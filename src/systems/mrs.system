;;; Copyright (c) 1991--2003
;;;   John Carroll, Ann Copestake, Robert Malouf, Stephan Oepen;
;;;   see `licence.txt' for conditions.


(in-package :make)

(eval-when #+:ansi-eval-when (:load-toplevel :compile-toplevel :execute)
           #-:ansi-eval-when (load eval compile)
  #+(and :allegro (version>= 6 0))
  (pushnew :xml *features*)
  (pushnew :mrs *features*))

(defsystem "mrs"
    :device (make-pathname :device cl-user::%sys-device%)
    :source-pathname (get-sources-dir "lkb")
    :binary-pathname (get-binaries-dir "lkb")
    :source-extension "lisp"
    :depends-on (#+:lkb "lkb" #+:xml "xml")

    :finally-do
    (when (and (find-package :lkb) (find-symbol "*MRS-LOADED*" :lkb))
      (set (find-symbol "*MRS-LOADED*" :lkb) t))

    :components
    ((:module "package"
      :source-pathname ""
      :binary-pathname ""
      :load-only t
      :source-extension "lsp"
      :components
               ((:file "lkb-package")
                (:file "mrs-package")))
     
     (:module "core"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "lkb-interface")          ; interface functions to LKB
       (:file "mrsglobals")             ; have to redefine most of these, but
                                        ; this is mostly done 
					; by mrsglobals-eng 
       (:file "basemrs")                ; MRS structures and printing 
       (:file "mrsoutput")              ; constructing MRS from parse result  
       (:file "mrscorpus")              ; checking equality etc
       (:file "interface")))
       ;; following two files needed for scoping - can be excluded
       ;; for generation

     (:module "scoping"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "mrsresolve")             ; resolving scope
       (:file "mrscons")))              ; constraints on scope

     (:module "munge"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "cheapscope")             ; scope for fragments
       #+:lkb
       (:file "mrsmunge")               ; manipulate MRS via rules
                                        ; currently for vitrifying - potential
                                        ; other uses
       #+:lkb
       (:file "mrsruleinput")           ; creating rules for above
                                        ; requires LKB, but outputs compiled 
                                        ; rules which can be used without LKB
       #+(and :lkb :allegro :clim (not :tty)) 
       (:file "lkb-acl-mrs")            ; display etc in CLIM
       #+(and :lkb :mcl (not :tty)) 
       (:file "lkb-mcl-mrs")            ; display etc in MCL
       #+:lkb
       (:file "lkbmrs")))               ; LKB specific - redefines
                                        ; some functions
     #+:lkb
     (:module "generator"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "generate")               ; chart generator (requires mrs)
       (:file "spell")                  ; for a/an
       (:file "genbatch")
       (:file "mrstoplevel")))      
     
     #+:lkb
     (:module "generator-morph"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "lexutils")
       (:file "lexindex")               ; LKB specific - indexing
                                        ; entries etc on semantics
       (:file "lexlookup")              ; LKB specific - retrieving
       (:file "genpredict")))           ; LKB specific - null semantics
     
     #+:nil
     (:module "idioms"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "idioms")))     ; idioms

     #+:nil
     (:module "information-structure"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "infostr")))

     #+:nil
     (:module "theorem-proving"
      :source-pathname "tproving"
      :binary-pathname "tproving"
      :components
      ((:file "gq")
       (:file "gq-to-fol")                           
       (:file "fol-to-nf")
       (:file "dtp-interface")
       (:file "nf-to-fol")
       (:file "fol-to-mrs")))

     (:module "rmrs"
      :source-pathname "rmrs"
      :binary-pathname "rmrs"
      :components
      ((:file "comp")
       (:file "convert")
       (:file "annlt")                           
       (:file "output")
       (:file "xml-utils")
       (:file "readgram")
       (:file "readtag")
       (:file "input")))

     (:module "redwoods"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "dependencies")))

     #+:lkb
     (:module "lsp"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "lsp")))
     
     #+:mt
     (:module "translation"
       :source-pathname "mrs"
       :binary-pathname "mrs"
       :components
       ((:file "translate")))           ; collection of crude MT functions

     #+:nil
      (:module "extensions"
       :source-pathname "mrs"
       :binary-pathname "mrs"
       :components
       ((:file "time-convert")))))      ; may be useful to have a version of
                                        ; this for non-VM apps
                                        ; currently VM specific
