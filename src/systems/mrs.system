;;; Copyright (c) 1991--2003
;;;   John Carroll, Ann Copestake, Robert Malouf, Stephan Oepen;
;;;   see `licence.txt' for conditions.


(in-package :make)

(eval-when #+:ansi-eval-when (:load-toplevel :compile-toplevel :execute)
           #-:ansi-eval-when (load eval compile)
  #+(and :allegro (version>= 6 0))
  (pushnew :xml *features*)
  (pushnew :mrs *features*))

(defsystem "mrs"
    :source-pathname (get-sources-dir "lkb")
    :binary-pathname (get-binaries-dir "lkb")
    :source-extension "lisp"
    :depends-on (#+:lkb "lkb" #+(and :xml (not :lkb)) "pxml")

    #+:ecl :initially-do #+:ecl (ecl-initialize)
    
    :finally-do
    (let* ((package (find-package :lkb))
           (symbol (find-symbol "*MRS-LOADED*" package)))
      (when symbol (set symbol t))
      #+:ecl (ecl-finalize :module "mrs"))
    
      

    :components
    ((:module "package"
      :source-pathname ""
      :binary-pathname ""
      :load-only #-:ecl t #+:ecl nil
      :source-extension "lsp"
      :components
               ((:file "lkb-package")
                (:file "mrs-package")))
     
     (:module "core"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      (#+:lkb
       (:file "lkb-interface")          ; interface functions to LKB
       #+:ecl
       (:file "ecl" :compile-only t)
       #+:ecl
       (:file "pet-interface")
       #+(and (not :lkb) (not :ecl))
       (:file "dummy-interface")
       (:file "mrsglobals")             ; some defaults for grammar-specific 
                                        ; variables, typically adapted in a
                                        ; grammar-specific file.
       (:file "basemrs")                ; MRS structures and printing 
       (:file "mrsoutput")              ; constructing MRS from parse result  
       (:file "mrscorpus")              ; checking equality etc
       (:file "interface")))

     ;; following two files needed for scoping - can be excluded
     ;; for generation
     (:module "scoping"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "mrsresolve")             ; resolving scope
       (:file "mrscons")))              ; constraints on scope

     (:module "munge"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "cheapscope")             ; scope for fragments
       #+:lkb
       (:file "mrsmunge")               ; manipulate MRS via rules
                                        ; currently for vitrifying - potential
                                        ; other uses
       #+:lkb
       (:file "mrsruleinput")           ; creating rules for above
                                        ; requires LKB, but outputs compiled 
                                        ; rules which can be used without LKB
       #+(and :lkb :allegro :clim (not :tty)) 
       (:file "lkb-acl-mrs")            ; display etc in CLIM
       #+(and :lkb :mcl (not :tty)) 
       (:file "lkb-mcl-mrs")))          ; display etc in MCL
     
     #+:lkb
     (:module "generator-morph"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "lexutils")
       (:file "lexindex")               ; LKB specific - indexing
                                        ; entries etc on semantics
       (:file "lexlookup")              ; LKB specific - retrieving
       (:file "genpredict")))           ; LKB specific - null semantics

     #+:lkb
     (:module "generator"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "generate")               ; chart generator (requires mrs)
       (:file "spell")                  ; for a/an
       (:file "genbatch")
       (:file "mrstoplevel")))      
     

     #+:nil
;;; need to uncomment stuff in lexinput.lsp
;;; for this to work
     (:module "idioms"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "idioms")))     ; idioms

     #+:nil
     (:module "information-structure"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "infostr")))

     #+:nil
     (:module "theorem-proving"
      :source-pathname "tproving"
      :binary-pathname "tproving"
      :components
      ((:file "gq")
       (:file "gq-to-fol")                           
       (:file "fol-to-nf")
       (:file "dtp-interface")
       (:file "nf-to-fol")
       (:file "fol-to-mrs")))

     (:module "rmrs"
      :source-pathname "rmrs"
      :binary-pathname "rmrs"
      :components
      ((:file "basermrs") ;; the RMRS specific structures
       (:file "comp") ;; main code for semantic composition
       (:file "convert") ;; MRS to RMRS
       (:file "annlt") ;; The ANNLT specific code - navigates round the input trees                           
       (:file "output") ;; outputting RMRS structures, and also LKB
                        ;; generated structures in a compatible format.
                        ;; In principle, supports multiple outputs - right no
                        ;; outputs stuff in XML or a compact representation
                        ;; LKB-specific code for comparison windows
                        ;; but #+:lkb used
       #+:xml       
       (:file "xml-utils") ;; some utilities for XML parser
       (:file "readgram") ;; loads the data file that associates the 
                         ;; rule names with semantic operations
       (:file "readtag") ;; loads the data file that associates the tags with
                         ;; base semantic structures - uses a lot of code from 
                         ;; readgram
       (:file "input") ;;; loads the underlying rmrs input code
       (:file "compare") ;;; RMRS comparison
       #+(and :lkb :allegro :clim (not :tty)) 	
       (:file "lkb-acl-rmrs")            ; display etc in CLIM
       (:file "testing") ;;; temporary file for testing
))

     (:module "redwoods"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "dependencies")))

     #+:lkb
     (:module "lsp"
      :source-pathname "mrs"
      :binary-pathname "mrs"
      :components
      ((:file "lsp")))
     
     #+:mt
     (:module "translation"
       :source-pathname "mrs"
       :binary-pathname "mrs"
       :components
       ((:file "translate")))           ; collection of crude MT functions

     #+:lkb
     (:module "semi"
       :source-pathname "mrs"
       :binary-pathname "mrs"
       :source-extension "lsp"
       :components
       ((:file "semi")))           ; semi

     #+:nil
      (:module "extensions"
       :source-pathname "mrs"
       :binary-pathname "mrs"
       :components
       ((:file "time-convert")))))      ; may be useful to have a version of
                                        ; this for non-VM apps
                                        ; currently VM specific
