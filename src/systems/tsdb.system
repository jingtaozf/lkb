;;; -*- Mode: LISP; Syntax: Common-Lisp; Package: MAKE -*-

;;;
;;; [incr tsdb()] --- Competence and Performance Profiling Environment
;;; Copyright (c) 1996 -- 2005 Stephan Oepen (oe@csli.stanford.edu)
;;;
;;; This program is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU Lesser General Public License as published by
;;; the Free Software Foundation; either version 2.1 of the License, or (at
;;; your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful, but WITHOUT
;;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;;; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
;;; License for more details.
;;; 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        file: tsdb.system
;;;      module:
;;;     version: 0.0 -- 22-sep-95 (experimental)
;;;  written by: oe, dfki saarbruecken
;;; last update: 17-sep-01
;;;  updated by: oe, csli stanford
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; author            | date        | modification
;;; ------------------|-------------|------------------------------------------
;;;                   |             |
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(in-package "MAKE")

(eval-when (:load-toplevel :execute)
  (pushnew :tsdb *features*)
  (pushnew :itsdb *features*)

  ;;
  ;; for LOGON use, at least, assume AllegroCache is available
  ;;
  #+:logon
  (pushnew :acache *features*)
  
  ;;
  ;; the Alvey Tools package, unfortunately, comes without a unique feature to
  ;; identify it; invent one and hope for integration with future releases.
  ;;                                                      (22-nov-99  -  oe)
  ;;
  (when (and (find-symbol "*GDE-VERSION-NO" :common-lisp-user)
             (boundp (find-symbol "*GDE-VERSION-NO" :common-lisp-user)))
    (pushnew :anlt *features*)))
  

(defsystem "tsdb"
    :source-pathname (dir-append (get-sources-dir "tsdb")
				 '(:relative "tsdb"))
    :binary-pathname (dir-append (get-binaries-dir "tsdb")
				 '(:relative "tsdb"))

    #+:acache :initially-do #+:acache (require :acache)

    :finally-do
    #+(and :allegro (or :linux (and :sparc :svr4) :alpha) (not :slave))
    (let ((display (system:getenv "DISPLAY")))
      (when (and display (not (equal display "")))
        (funcall (symbol-function (read-from-string "tsdb::tsdb")) :podium)))
    #-(and :allegro (or :linux (and :sparc :svr4) :alpha) (not :slave))
    nil

    :components
    (#+:dfki
     (:module "agenda"
      :source-pathname ""
      :source-extension ""
      :operation-form 
      ((:load (lambda (component force)
                (declare (ignore force))
                (unless (probe-file 
                         (component-full-pathname component :source))
                  (format t
                   "~&; missing: `~a';~%"
                   (component-full-pathname component :source)))))
       (:compile (lambda (component force)
                   (declare (ignore force))
                   (unless (probe-file 
                            (component-full-pathname component :source))
                     (format 
                      t
                      "~&; missing: `~a';~%"
                      (component-full-pathname component :source))))))
      :components
      ((:file "Registration")
       (:file "ToDo")))

     #+(and :allegro (or :linux (and :sparc :svr4) :alpha))
     (:module "c"
      :source-pathname %system-binaries%
      :source-extension "so"
      :load-only t
      :components
      ((:file "capi")
       (:file "gc")))

     (:module "tsdb"
      :source-pathname "lisp"
      :binary-pathname ""
      :source-extension "lisp"
      :components
      ((:file "tsdb-package")
       (:file "macros")
       #+:page 
       (:file "tdl-patches")
       #+(and :lkb (not (or :page :annlt :sltg :xle :dummy)))
       (:file "lkb-interface")
       #+:anlt 
       (:file "anlt-interface")
       #+:sltg
       (:file "sltg-interface")
       #+:xle
       (:file "xle-interface")
       #+(or :dummy (not (or :lkb :page :annlt :sltg :xle)))
       (:file "dummy-interface")
       (:file "globals")
       (:file "utilities")
       #+(and :allegro (or :linux (and :sparc :svr4) :alpha)) 
       (:file "pvm")
       #+(and :allegro (or :linux (and :sparc :svr4) :alpha)) 
       (:file "capi")
       (:file "tsql")
       (:file "tsdb")
       (:file "process")
       (:file "commands")
       (:file "import")
       #+:null
       (:file "server")
       (:file "filter")
       (:file "statistics")
       (:file "evolution")
       (:file "html")
       (:file "podium")
       #+:allegro
       (:file "allegro")
       #+:allegro
       (:file "gc")
       (:file "yy")
       #+:lkb
       (:file "mt")
       #+:page 
       (:file "page-interface")
       (:file "derivations")
       #+:lkb
       (:file "tnt-interface")
       #+(and :lkb :allegro :clim)
       (:file "redwoods")
       #+:lkb
       (:file "lsp")
       #+:lkb
       (:file "ptb")
       #+:lkb
       (:file "rasp")
       #+:lkb
       (:file "pcfg")
       #+:lkb
       (:file "maxent")
       #+:null
       (:file "tagger")))
     
     #+:dfki
     (:module "podium"
      :source-pathname "tcl"
      :source-extension "tcl"
      :load-only t
      :operation-form 
      ((:load (lambda (component force)
                (declare (ignore force))
                (unless (probe-file 
                         (component-full-pathname component :source))
                  (format t
                   "~&; missing: `~a';~%"
                   (component-full-pathname component :source)))))
       (:compile (lambda (component force)
                   (declare (ignore force))
                   (unless (probe-file 
                            (component-full-pathname component :source))
                     (format t
                             "~&; missing: `~a';~%"
                             (component-full-pathname component :source))))))
      :components
      ((:file "icon" :source-extension "xbm")
       (:file "podium")
       (:file "goodies")
       (:file "table")
       (:file "showtable")
       (:file "nshowtable")
       (:file "showgraph")
       (:file "utilities")
       (:file "commands")
       (:file "input")
       (:file "yy")
       (:file "mt")
       (:file "copyleft")
       (:file "balloon")
       (:file "balloons" :source-extension ""))))
    
    :depends-on (#+(and :allegro (or :linux (and :sparc :svr4) :alpha)) "pvm"
		 #+(and :mrs (not :lkb)) "mrs"
		 #+:lkb "lkb"
                 #-:lkb "ppcre"
		 #+:page "page"))
