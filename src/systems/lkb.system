(in-package "MAKE")

;;;
;;; the :lkb feature is there to allow add-on modules (like the MRS code and
;;; [incr tsdb()]) to be conditionalized for various host platforms.  as it
;;; stands, :lkb is already set in `src/general/loadup.lisp' as distributed
;;; with the LKB (such that one can do, say, (load-system "mrs") to load MRS
;;; plus LKB).  this is somewhat unfortunate in that [incr tsdb()] comes with
;;; a generic version of `loadup.lisp' that allows using [incr tsdb()] in
;;; standalone mode (as well as in conjunction with the LKB or PAGE).  so, we
;;; have to distribute the [incr tsdb()] version separately and discourage
;;; people to unpack it on top of the LKB source tree.  once the first release
;;; is out, we should find a better solution here.        (22-aug-99  -  oe)
;;;
;;; the :tty feature, when set, disables all graphics.  the graphical user
;;; interface currently requires CLIM (typically using Allegro CL on Unix) or
;;; Macintosh CL.  Common Graphics (Allegro CL on Windoze) support is under
;;; development.
;;;
;;; push()ing :tty manually (before any load-system() call) can also be used
;;; to force non-graphics mode, if this seems desirable for some reason.
;;;

(eval-when #+:ansi-eval-when (:load-toplevel :compile-toplevel :execute)
           #-:ansi-eval-when (load eval compile)
  (pushnew :lkb *features*)
  #+(or :cl-http (not (or :mcl :clim :common-graphics))) 
  (pushnew :tty *features*))

;;;
;;; ultimately, all compile-time configurations (by means of *features*) that
;;; affect more than just one file should go here (together with a comment on
;;; what each feature does); with features added in individual files, we would
;;; needto worry about load() order.
;;;
;;;   - :packing -- enable code for chart packing under (partial) subsumption;
;;; 

(eval-when #+:ansi-eval-when (:load-toplevel :compile-toplevel :execute)
           #-:ansi-eval-when (load eval compile)
  (pushnew :packing *features*))


(defparameter *lisp-specific-directory*
    #+(and :allegro :clim) "ACL_specific"
    #+(and :allegro :tty) "ACL_specific"
    #+(and :allegro :common-graphics) "ACL-CG_specific"
    #+:mcl "MCL_specific")

(defsystem "lkb"
    :device (make-pathname :device cl-user::%sys-device%)
    :source-pathname (get-sources-dir "lkb")
    :binary-pathname (get-binaries-dir "lkb")
    :source-extension "lsp"
    :depends-on ()
    :initially-do
    #+:allegro (setf excl:*enable-package-locked-errors* nil)
    #-:allegro nil
    :finally-do
    #+(and :allegro :clim (not :tty))
    (unless (and (boundp 'cl-user::*building-image-p*)
		 cl-user::*building-image-p*)
      (let ((*package* (find-package "CLIM-USER")))
	(clim-user::set-up-lkb-interaction :core)))
  #+(and :allegro :common-graphics (not :tty))
    (unless (and (boundp 'cl-user::*building-image-p*)
		 cl-user::*building-image-p*)
	(cl-user::set-up-lkb-interaction :core))
    #+(and :mcl (not :tty))
    (cl-user::set-up-lkb-interaction :core)
    #+tty nil
    :components
    ((:module "version"
              :source-pathname ""
	      :binary-pathname ""
	      :components
	      ((:file "version")))
     (:module "for"
              :source-pathname "mrs"
	      :binary-pathname "mrs"
	      :components
	      ((:file "for")))         ; for loop macros
     (:module "initialization"
              :source-pathname "main"
	      :binary-pathname "main"
	      :components
	      ((:file "initializations" :load-only t)
               (:file "globals")))   
  ;; variables for grammar parameterization
  ;; mostly user-settable, usually reset by a globals file associated
  ;; with a particular grammar and loaded by the script file
     #-:tty(:module "general graphics utilities"
              :source-pathname *lisp-specific-directory*
	      :binary-pathname *lisp-specific-directory*
	      :components
	      ((:file "graphics") ; basic font handling etc
               (:file "misc")     ; non-graphics Lisp specific
               (:file "topmenu")  ; main interaction window/menu
               (:file "dialog"))) ; querying user
     (:module "main functionality"
              :source-pathname "main"
	      :binary-pathname "main"
	      :components
	      ((:file "types")      ; type hierarchy and associated runtime
                                    ; functions
               (:file "dag")        ; feature structures and unification
               (:file "yadu")       ; default unification
               (:file "gen")        ; generalisation
               (:file "structs")    ; structures for path values etc
               (:file "user-fns")   ; as globals - but functions
               (:file "marks")      ; utility macros for type checking
               (:file "checktypes") ; type hierarchy and constraint
                                    ; construction and checking
	       (:file "cdb")        ; constant database, for storing lexicon
               (:file "leaf")       ; leaf types - for efficiency not
                                    ; expanded at load time
	       (:file "lex")        ; lexical structures, also templates etc
	       #+plob (:file "plex")    ; lexical database 
               #+:ltemplates
               (:file "ltemplates") ; lexical templates (e.g. for cardinals)
	       (:file "clex")       ; constant lexical database 
               (:file "rules")      ; grammar and lexical rules
	       (:file "parse")      ; chart parser
	       (:file "active")     ; experimental key-driven (active) parser
               (:file "morph")    ; morphographemics
               (:file "check-unif"))) ; for efficiency 
     (:module "various io"
              :source-pathname "io-general"
	      :binary-pathname "io-general"
	      :components
	      (#-tty(:file "menus")      ; top level menus for varying 
                                         ; configurations
               (:file "async")	; utilities for doing asynchronous I/O
               (:file "outputfs")   ; feature structure display
               (:file "outputtdfs") ; default fs display
               (:file "outputsrc") ; outputting machine readable
                                   ; versions (useful for translating between formalisms)
	       #-:tty(:file "toplevel"))) ; top level menu commands
     (:module "path notation input"        ; original LKB notation
              :source-pathname "io-paths"  ; toplevel fns also used
	      :binary-pathname "io-paths"  ; by TDL files (below)
	      :components
	      ((:file "typeinput")     ; types and main input fns used by
                                       ; other input files
               (:file "lexinput")      ; lexical entries, templates etc
               (:file "ruleinput")     ; lexical and grammar rules
               (:file "pathout")))     ; output in path notation
     (:module "TDL syntax input"
              :source-pathname "io-tdl" ; as used in ERG
	      :binary-pathname "io-tdl"
	      :components
	      ((:file "tdltypeinput")  
               (:file "tdloutput")     ; output in TDL notation
               (:file "tdlruleinput")
               (:file "tdllexinput")))
     (:module "LiLFeS syntax output"
              :source-pathname "io-lilfes" 
	      :binary-pathname "io-lilfes"
	      :components
	      ((:file "lilout")     ; output in LiLFeS notation
               ))
     #-:tty(:module "Lisp specific graphics"
              :source-pathname *lisp-specific-directory*
	      :binary-pathname *lisp-specific-directory*
	      :components
	      ( 
        #+(and :allegro :clim)(:file "graph")   ; uses Allegro graph drawing
               #+:mcl (:file "picwin")      ; low level 
               #+:mcl (:file "picfield")    ; low level
        #+(and :allegro :common-graphics)(:file "fsclasses") ; classes for display	       
        (:file "activefs")           ; display FS in window
             (:file "tree")               ; type hierarchy
             (:file "parseout")           ; parse tree output
             (:file "chartout")           ; parse chart
             (:file "listout")            ; `active' lists
             #+(and :allegro :clim) (:file "compare"))) ; comparing parses
     #+:allegro(:module "emacs-interface"              
                :source-pathname *lisp-specific-directory*
	        :binary-pathname *lisp-specific-directory*
	        :components
               ((:file "emacs")))   ; recording source positions
     (:module "non-Lisp specific graphics"
              :source-pathname "io-general"
	      :binary-pathname "io-general"
	      :components
	      ((:file "tree-nodes")         ; non-Lisp specific
                                            ; display functions used
                                            ; in parse/generate chart
                                            ; and tree drawing code         
	       (:file "utils")              ; miscellany
        #+(and (not :clim) (not :tty))
               (:file "graph")))            ; JAC's graph package
     (:module "user utility functions"
              :source-pathname "main"
	      :binary-pathname "main"
	      :components
	      (
;              (:file "lkb-tsdb")           ; simulation of tsdb
	       (:file "batch-check")        ; batch check lexicon
               (:file "debug")))            ; rudimentary debugging
                                            ; for errors in type file
     #+tty
     (:module "tty commands"                ; redefine for tty version
              :source-pathname "tty"
	      :binary-pathname "tty"
	      :components
	      ((:file "tty")))))     




