;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 
;;; GRAMMAR FOR ENGLISH INTERROGATIVE CONSTRUCTIONS
;;; by Chris Callison-Burch 
;;;
;;; based on Ch. 16 of Sag and Wasow (1999)
;;;
;;; lexeme-types.tdl
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; <<< >>> PART OF SPEECH

;;; VERB LEXEME DEFINITIONS 

v-lxm := lexeme & 
 [ SS [ LOC [ CAT [ HEAD verb & [ NEG false,
                                  ANA false],
                    SPR < >,
	            SUBJ < [ LOC.CAT phrase-cat & [ HEAD noun,
                                                     SPR < >,
                                                     COMPS < > ] ] > ] ],
        WH <! !> ] ].

; CCB -- temporarially removed content from verbs, because the pol-int-cl was breaking because of a failure to unify between soa and question.  So "Can Sandy sleep?"  Was breaking. 
;            CONT soa ] ].


non-auxv-lxm:= v-lxm &
[ SS.LOC [ CAT [ HEAD verb & [ INV false, 
                               AUX false ] ] ] ].

;;; CCB - Ivan says should only be LOC that are identified in the SUBJs
;auxv-lxm := v-lxm & 
;[ SS.LOC.CAT [ SUBJ < #2 >,
;               ARG-ST < #2 & [ LOC #1 &
;                                      [STORE <! > ] ], [ LOC.CAT [ SUBJ < [ LOC #1 & [ STORE <! > ] ] >, 
;                                                                    COMPS < > ] ] >

#|
auxv-lxm := v-lxm & 
[ SS.LOC.CAT [ SUBJ < [ LOC /l #1 ] >,
               ARG-ST < [ LOC /l #1 ], [ LOC.CAT [ SUBJ < [ LOC /l #1  & [ STORE <! !> ] ] >, 
                                         COMPS < > ] ] > ] ].
|#


auxv-lxm := v-lxm & 
[ SS.LOC.CAT [ SUBJ < #1 >,
               ARG-ST < #1, [ LOC.CAT [ SUBJ < #1 & [ LOC.STORE <! !> ] >, 
                                         COMPS < > ] ] > ] ].




 

dummy-auxv-lxm :=  v-lxm & 
[ SS.LOC.CAT.ARG-ST < [ LOC.CAT.HEAD [ AGR expl-index & [ PERNUM 1or3sg ] ] ],
                       #1 & [ LOC.CAT  phrase-cat & [ HEAD noun,
                                                      SPR < > ] ],
                       [ LOC.CAT [ HEAD [ PRED true ],
                                          SUBJ < #1 >,
                                          COMPS < > ] ] > ].
;s-rais.


;;; NOUN LEXEME DEFINITIONS 

n-lxm := lexeme &
 [ SS.LOC [ CAT [ HEAD noun & [ FORM /l normal, 
	        	        ANA /l false,
                                AGR /l ref-index,
                                MOD /l < > ],
                  SUBJ < >,
                  SPR /l < >,
                  COMPS /l < > ] ] ].

;            CONT param ] ].
	 
pron-lxm := n-lxm & no-args &
 [ SS [ LOC [ CAT [ HEAD noun & [ FORM /l normal, 
                                  ANA /l false ] ] ],
        WH <! !> ] ].

cn-lxm := n-lxm &
 [ SS.LOC [ CAT [ HEAD [ AGR.PERNUM #agr ],
	          SPR < [ LOC.CAT phrase-cat & [ HEAD det & [ AGR.PERNUM #agr,
                                                               COUNT /l true ],
                                                  SPR < > ] ] > ] ] ].


pn-lxm := n-lxm & no-args &
 [ SS [ LOC [ CAT [ HEAD [ AGR.PERNUM 3sg ] ] ],
              WH <! !> ] ].






;;; NON-INFLECTING (CONST-LXM) LEXEME TYPES

const-lxm := lexeme.

det-lxm := const-lxm &
 [ SS [ LOC [ CAT [ HEAD det,
                    SUBJ < >,
                    SPR /l < >,
                    COMPS < > ],
              CONT null-sem ] ] ].


p-lxm := const-lxm &
 [ SS.LOC.CAT [ HEAD prep,
                    SPR < >,
                    COMPS < [ LOC [ CAT phrase-cat & [ HEAD noun,
                                                        SPR < > ] ] ] > ] ].


mkp-lxm := p-lxm &
 [ SS.LOC.CAT [ HEAD.PRED true,
                SUBJ < synsem > ] ].



pdp-lxm := p-lxm &
 [ SS.LOC.CAT [ HEAD.PRED false,
                SUBJ < > ] ].


comp-lxm := const-lxm &
 [ SS [ LOC.CAT [ HEAD comp,
                  SUBJ < >, 
                  SPR < > ],
        WH <! !> ] ].


;;; CCB - this is just a quick definiton.  Needs to be fixed.
adj-lxm := const-lxm &
 [ SS.LOC.CAT [ HEAD adj & [ FORM normal,
                             PRED true,
                             MOD < [ LOC.CAT.HEAD noun ] > ],
                SUBJ /l < >,
                SPR /l < >,
                COMPS /l < > ] ].

;;; CCB - this is just a quick definiton.  Needs to be fixed.
adv-lxm := const-lxm &
 [ SS.LOC.CAT [ HEAD adv,
                SUBJ < >,
                SPR < >,
                COMPS < > ] ].



;;; <<< >>> ARGUMENT SELECTION


; no-arguments (no-args)
no-args := lexeme &
[ SS.LOC.CAT.ARG-ST < > ].

; intransitive (intr)
intr := lexeme &
[ SS.LOC.CAT.ARG-ST < synsem, ... > ].

; strict-intransitive (str-intr)
str-intr := intr &
[ SS.LOC.CAT.ARG-ST < synsem > ].

; intransitive-xcomp (intr-xcomp)
intr-xcomp := intr &
[ SS.LOC.CAT.ARG-ST < synsem, synsem > ].

; subject-control (s-con)
s-con := intr-xcomp &
[ SS.LOC.CAT.ARG-ST < [ LOC [ CONT [ INDEX #1 ] ] ], 

                       [ LOC.CAT [ SPR < [ LOC [ CONT [ INDEX #1 ] ] ] >,
                                   COMPS < > ] ] > ].


; transitive (tran)
tran := lexeme &
[ SS.LOC.CAT.ARG-ST < synsem, synsem, ... > ].

; strict-transitive (str-tr)
str-tr := tran &
[ SS.LOC.CAT.ARG-ST < synsem, synsem > ].

; transitive-xcomp (tran-xcomp)
tran-xcomp := tran &
[ SS.LOC.CAT.ARG-ST < synsem, synsem, synsem > ].





;;; <<< >>> Maximal Subtypes of PART-OF-SPEECH and ARG-SELECTION

; strict-intransitive-verb (siv)
siv := non-auxv-lxm & str-intr.

; subject-control-verb (scv)
scv := non-auxv-lxm & s-con.

; subject-raising-verb (srv)
srv := non-auxv-lxm & s-rais.







; PP-argument (prep-arg)
prep-arg := lexeme &
[ SS.LOC.CAT.ARG-ST < synsem, [ LOC.CAT phrase-cat & [ HEAD prep,
                                                       SPR < >,
                                                       COMPS < > ] ] > ].

; NP-transitive-argument (NP-trans-arg) - Added by CCB 9/9/99
NP-trans-arg := tran &
[ SS.LOC.CAT.ARG-ST < synsem, [ LOC.CAT phrase-cat & [ HEAD noun,
                                                     SPR < >,
                                                     COMPS < > ] ] > ].

; ditransitive-argument (ditrans-arg) - Added by CCB 9/9/99
ditrans-arg := lexeme &
[ SS.LOC.CAT.ARG-ST < synsem, synsem, synsem > ].

; dative-argument (dt-arg) - Added by CCB 9/9/99
dt-arg := ditrans-arg &
[ SS.LOC.CAT.ARG-ST < synsem, [ LOC.CAT phrase-cat & [ HEAD noun,
                                                       SPR < >,
                                                       COMPS < > ] ], 
                              [ LOC.CAT phrase-cat & [ HEAD noun,
                                                       SPR < >,
                                                       COMPS < > ] ] > ].

; PP-ditransitive (ptv-arg) - Added by CCB 9/9/99
ptv-arg :=  ditrans-arg &
[ SS.LOC.CAT.ARG-ST < synsem, [ LOC.CAT phrase-cat & [ HEAD noun,
                                                     SPR < > ] ],
                              [ LOC.CAT phrase-cat & [ HEAD prep,
                                                       SPR < > ] ] > ].

; subject-raising (s-rais)
s-rais := lexeme &
[ SS.LOC.CAT.ARG-ST < #1, [ LOC.CAT [ SUBJ < #1 >,
                                       COMPS < > ] ] > ].







; PP-intransitive-verb (piv)
piv := non-auxv-lxm & prep-arg.

; strict-transitive-verb (stv)
stv := non-auxv-lxm & NP-trans-arg.


ctv := non-auxv-lxm & str-tr &
[ SS.LOC.CAT.ARG-ST < synsem, [ LOC [ CAT [ HEAD verbal & [ FORM fin ],
                                             SPR < >,
                                             COMPS < > ],
                                       CONT proposition ] ] > ].


; dative-verb (dtv)
dtv := non-auxv-lxm & dt-arg.

; PP-transitive-verb (ptv)
ptv := non-auxv-lxm & ptv-arg.





;;; <<>> Adjective Lexeme types.

; strict-intransitive-adjective (sia)
sia := adj-lxm & str-intr.

; PP-intransitive-adjective (pia)
pia := adj-lxm & prep-arg.

; strict-transitive-adjective (sta)
sta := adj-lxm & str-tr.

; subject-raising-adjective (sra)
sra := adj-lxm & s-rais.

; subject-control-adjective (sca)
sca := adj-lxm & s-con.



