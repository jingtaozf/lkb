#| I'm not longer treating the variation in auxilaries' forms as exections to the lexical rules; they're now all specified in the lexicon as inflected-lexemes.
can 3RD-SING-VERB can
would 3RD-SING-VERB would
could 3RD-SING-VERB could
should 3RD-SING-VERB should
must 3RD-SING-VERB must
will 3RD-SING-VERB will
|#

;;;JTB 07/2/01 - Going to generalize this stuff a bit.

;;; <<< >>> LEXICAL ENTRIES FOR THE COPULA


will_1 := auxv-lxm &
[ ORTH <! "will" !>,
  SS.LOC.CONT [ NUCL will-rel ],
  SS.LOC.CAT.HEAD.FORM fin,
  SS.LOC.CAT.COMPS < [ LOC.CAT.HEAD.FORM base ] > ].

be_0 := copula &
[ ORTH <! "be" !>,
  SS.LOC.CAT.HEAD.FORM base ].

being_0 := copula &
[ ORTH <! "being" !>,
  SS.LOC.CAT.HEAD [ FORM prp,
                    PRED true ] ].

been_0 := copula &
[ ORTH <! "been" !>,
  SS.LOC.CAT.HEAD [ FORM pfp ] ].

;;; CCB - the following finite forms need tense information.

am_0 := fin_copula &
[ ORTH <! "am" !>,
  ARG-ST < [ LOC.CAT.HEAD.AGR.PERNUM 1sg ], synsem > ].

are_0 := fin_copula &
[ ORTH <! "are" !>,
  ARG-ST < [ LOC.CAT.HEAD.AGR.PERNUM non-1sg ], synsem > ].

is_0 := fin_copula &
[ ORTH <! "is" !>,
  ARG-ST < [ LOC.CAT.HEAD.AGR.PERNUM 3sg ], synsem > ].

was_0 := fin_copula &
[ ORTH <! "was" !>,
  ARG-ST < [ LOC.CAT.HEAD.AGR.PERNUM 1or3sg ], synsem > ].

were_0 := fin_copula &
[ ORTH <! "were" !>,
  ARG-ST < [ LOC.CAT.HEAD.AGR.PERNUM non-1sg ], synsem > ].

;;; <<< >>> Dummy subject "be".  This case is for sentences like
;;;"There was a unicorn in the garden." where there is non-referential.

there_0 := n-lxm &
[ ORTH <! "there" !>,
  SS.LOC.CAT.HEAD.AGR expl-there ].


it_01 := n-lxm &
[ ORTH <! "it" !>,
  SS.LOC.CAT.HEAD.AGR expl-it & [ PERNUM 3sg ] ].


dummy-are_0 := inflected-lexeme &
[ ORTH <! "are" !>,
  DTRS < dummy-auxv-lxm > ].


dummy-is_0 := inflected-lexeme &
[ ORTH <! "is" !>,
  DTRS < dummy-auxv-lxm > ].


dummy-was_0 := inflected-lexeme &
[ ORTH <! "was" !>,
  DTRS < dummy-auxv-lxm > ].


dummy-were_0 := inflected-lexeme &
[ ORTH <! "were" !>,
  DTRS < dummy-auxv-lxm > ].


;;; The Auxilary "do", including unfocused "do" and focused "dó".

focused-did_0 := do-lxm-foc &
[ ORTH <! "DÍD" !> ].

focused-did_1 := do-lxm-foc &
[ ORTH <! "did" !> ].

unfocused-did_0 := do-lxm-unfoc &
[ ORTH <! "did" !>,
  SS.LOC.CAT.HEAD.AUX true ].

focused-do_0 := do-lxm-foc &
[ ORTH <! "DÓ" !>,
  SS.LOC.CAT.SUBJ < [ LOC.CAT.HEAD.AGR.PERNUM non-3sg ] > ].

focused-do_1 := do-lxm-foc &
[ ORTH <! "do" !>,
  SS.LOC.CAT.SUBJ < [ LOC.CAT.HEAD.AGR.PERNUM non-3sg ] > ].

unfocused-do_0 := do-lxm-unfoc &
[ ORTH <! "do" !>,
  SS.LOC.CAT.HEAD.AUX true,
  SS.LOC.CAT.SUBJ < [ LOC.CAT.HEAD.AGR.PERNUM non-3sg ] > ].

focused-does_0 := do-lxm-foc &
[ ORTH <! "DÓES" !>,
  SS.LOC.CAT.SUBJ < [ LOC.CAT.HEAD.AGR.PERNUM 3sg ] > ].

focused-does_1 := do-lxm-foc &
[ ORTH <! "does" !>,
  SS.LOC.CAT.SUBJ < [ LOC.CAT.HEAD.AGR.PERNUM 3sg ] > ].

unfocused-does_0 := do-lxm-unfoc &
[ ORTH <! "does" !>,
  SS.LOC.CAT.HEAD.AUX true,
  SS.LOC.CAT.SUBJ < [ LOC.CAT.HEAD.AGR.PERNUM 3sg ] > ].

;;; CCB - Needs the idosyncratic infromation that not outscopes the
;;;content of won't's compliment.  See pg.24 of the English Aux paper.

;;; I removed [ FORM fin ] because it excludes won't from the
;;;pol-int-cl consturction, since inter-cl specifies that the verb be [
;;;FORM inf ].

;;; I added [ CASE nom ] to SUBJ, and [ PRED false ] to HEAD.

wont_0 := inflected-lexeme &
[ ORTH <! "wont" !>,
  SS.LOC.CAT [ HEAD [ NEG true ],
               SUBJ < [ LOC.CAT.HEAD.CASE nom ] >,
               COMPS < [ LOC.CAT [ HEAD [ FORM base ],
                                    COMPS < > ] ] > ],
  DTRS < auxv-lxm > ].



;;; Definition for can_0, and wont_0 taken from "Rules and Exceptions
;;;in the English Auxiliary System," Sag 2000.

;can_0 :=  inflected-lexeme &
;[ ORTH <! "can" !>,
;  SS.LOC.CAT.HEAD [ FORM fin ],
;  ARG-ST < synsem, [ LOC.CAT [ HEAD verb & [FORM base ] ] ] >,
;  DTRS < auxv-lxm > ].

;;;JTB 07/29/01 - Made this another aux/modal like "to" and "be" by
;;;inheriting from the non-infl-vb-comp (which needs a better name) to
;;;do the raising properly.  Also added epistemic semantics.

can_0 :=  non-infl-vb-comp &
[ ORTH <! "can" !>,
  SS.LOC.CAT.HEAD [ FORM fin ],
  SS.LOC.CONT.NUCL can-rel & [ POSSIBLE.SOA #cont ],
  ARG-ST < synsem, [ LOC.CAT [ HEAD verb & [FORM base ] ],
                     LOC.CONT #cont ] >,
  DTRS < auxv-lxm > ].

;;; CCB - not_0 shouldn't be specified by FORM as it is in the Ling120 textbook, but instead by a relation in the semantics.  Fix that once you figure out the semantic types.

not_0 := adv-lxm &
[ ORTH <! "not" !>,
  SS.LOC.CAT.HEAD [ FORM f_not,
                    MOD < [ LOC.CAT.HEAD verb & [ FORM nonfin ] ] > ] ].

could_0 := non-infl-vb-comp &
[ ORTH <! "could" !>,
  ARG-ST < synsem, [ LOC.CAT [ HEAD verb & [FORM inf] ] ] >,
  DTRS < auxv-lxm > ].

;have_0a :=  auxv-lxm &
;[ ORTH <! "have" !>,
;  SS.LOC.CAT.HEAD [ FORM fin ],
;  ARG-ST < [ ], [ LOC.CAT [ HEAD verb & [FORM pfp] ] ] >,
;  DTRS < auxv-lxm > ].

have_0 :=  inflected-lexeme &
[ ORTH <! "have" !>,
  SS.LOC.CAT.HEAD [ FORM fin ],
  ARG-ST < synsem, [ LOC.CAT [ HEAD verb & [FORM pfp] ] ] >,
  DTRS < auxv-lxm > ].


;;;JTB - multiply defined, 
;;;have_0 :=  inflected-lexeme &
;;;[ ORTH <! "have" !>,
;;;  SS.LOC.CAT [ HEAD [ FORM fin ],
;;;               ARG-ST < synsem, [ LOC.CAT [ HEAD verb & [FORM pfp] ] ] > ],
;;;  DTRS < auxv-lxm > ].