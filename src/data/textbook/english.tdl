;;; -*- Mode: TDL; Package: DISCO -*-
;;;
;;;  english.tdl
;;;
;;;  Top-level load file for English grammar - Comp.Ling.Practicum
;;;
;;;  File created: 5-Jan-98 Dan Flickinger
;;;                CSLI, Stanford University
;;;  Last revised: Dan Flickinger, 19-Jan-98
;;;

;;;  To load the English grammar, type the following at the PAGE prompt, where
;;;  <grammardir> is the path to the directory where your grammar files are:
;;;
;;;        load-grammar "<grammardir>/english" "tuneup"

:end!.
					
:leval (progn
	 (setq user::*unifier* :csli)	; Use CSLI unifier.
	 (setq pg::*lexical-sources*	; Get offline entries for GDBM file
	   (list (make-instance 'pg::tdl-lex)))
	 (setq fed::*def-filename* main::tmp-dir)).

:leval (setf tdl::*tdl-built-ins-file* 
	(dir-and-name tdl::*source-grammar* "tdl-built-ins" "tdl")).

:leval (setf disco::*grammar-version* "4712").
:leval (setf fegramed::*fegramed-application* 
		"exec /afs/ir/class/ling137a/page/bin/fegramed -poll").

:leval (progn
	 (setq tdl::*simplify-fs-p* nil)
	 (setq tdl::*simplify-type-p* t)
	 (setq tdl::*simplify-instance-p* nil)
	 (setq main::*print-without-toplevel-fails* nil)
	 (setq lex::*normalize-unification-flag* nil)
	 (setq tdl::*and-open-world-reasoning-p*  nil)
	 (setq tdl::*ignore-errors-p* nil)
	 (setq tdl::*pprint-lists* t)
	 (setq unify::*verbose-warnings* nil)).

:leval (setf main::*scanner* main::*eng-scanner*)

;;; Set up English morphology

:leval (setf main::*morphology* main::*english-morphology*).
:leval (progn
	(setq lex::*stem-path* '(disco::orth disco::list disco::first))
	(setq lex::*form-into* 'disco::form)
	(setq lex::%klaus-oude-grammar% nil)
	(setq pg::*legal-combinations*
	 '((:rule :rule :lex-rule :c-lex-entry :lex-entry)
	   (:lex-rule :lex-entry :c-lex-entry :lex-rule)
	   (:c-lex-entry :morph) (:lex-entry :morph)))
	(setq lex::*affix-into* 'disco::affix)).

;;; Load patches

:leval (load (dir-and-name tdl::*source-grammar* "patches")).
	 
;;; Load TSDB code

#|
:leval (load (dir-and-name (dir-append tdl::*source-grammar* 
				       "tsdb/src/")
			   "load-tsdb")).
:leval (setf tsdb::*tsdb-home* "~/grammar/tsdb/").
;:leval (setf tsdb::*tsdb-semantix-hook* "mrs::get-mrs-strings").
:leval (setf tsdb::*tsdb-semantix-hook* nil).
|#

;;; Set MRS globals

:leval (setf main::*trees-output-p* t
	trees::*local-path* nil
	trees::*label-fs-path* nil).
:leval (setf main::*ascii-trees* t).
:leval (setf main::*mrs-output-p* nil).
:leval (progn
	 (setq mrs::*mrs-to-vit* nil)
	 (setq main::*vm-arg-roles-only-p* nil)
	 (setq mrs::*raw-mrs-output-p* nil)).

;;
;;  Load grammar files
;;

:deldomain :disco :errorp nil.
:defdomain :disco :errorp nil.
:begin :domain :disco.

;;
;;  Lexical types (i.e., primitive word classes)
;;

:include "types".

;;  Morphology

:include "page/infl".

;;
;;  Syntactic rules
;;

:include "grules".

;;
;;  Lexical rules
;;

:include "lrules".

;;
;;  Lexical entries
;;

:include "lexicon".

;;
;; Definitions for parse-tree labels
;;

:include "parse-nodes".

;;
;; Expand all instances except for lexical entries, which are expanded on 
;; the fly at parse time
;;

:expand-all-instances.

;;;
;;; For drawing parse trees, accumulate list of parse nodes, and set 
;;; meta symbols
;;;
;
:leval (setf trees::*label-names* 
   '("NP" "N" "VP" "S" "V" "P" "DET" "COMP" "ADV" "PP" "CONJ")
   trees::*node-labels* (trees::ordered-label-list)
   trees::*meta-symbols* (trees::get-instances :meta) foo nil).


; Load file of irregular morphology forms

:leval (load (dir-and-name tdl::*source-grammar* "irregs")).
