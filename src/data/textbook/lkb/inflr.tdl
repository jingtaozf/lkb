%(letter-set (!c bdfglmnprstz))
%(letter-set (!s abcdefghijklmnopqrtuvwxyz))
%(letter-set (!t bcdfghjklmnpqrstvwxz))
%(letter-set (!v aeiou))


;;; irregular words are stored in a separate file - irregs.tab
;;; because the forms stored there are the values of affix
;;; all the rules here should have the name `affix-type'_infl_rule


plur-noun_infl_rule :=
%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (f ves) (tch tches) (sh shes)
lrule-general &
[ NEEDS-AFFIX true,
  ARGS [ FIRST [ AFFIX plur-noun ]]] .


3rd-sing-verb_infl_rule := 
%suffix (!s !ss) (!ss !ssses) (ss sses) (!ty !ties) (f ves) (tch tches) (sh shes)
3rd-sing-verb-lexical-rule &
[ NEEDS-AFFIX true,
  ARGS [ FIRST [ AFFIX 3rd-sing-verb ]]].

past-verb_infl_rule := 
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lrule-general &
[ NEEDS-AFFIX true,
  ARGS [ FIRST [ AFFIX past-verb]]].

;pass-verb_infl_rule :=
;%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
;general-passive-lrule &
;[ NEEDS-AFFIX true,
;  ARGS [ FIRST [ AFFIX pass-verb ]]].

past-part-verb_infl_rule :=
%suffix (* ed) (!ty !tied) (e ed) (!t!v!c !t!v!c!ced) 
lrule-general &
[ NEEDS-AFFIX true,
  ARGS [ FIRST [ AFFIX past-part-verb]]].

pres-part-verb_infl_rule :=
%suffix (!t!v!c !t!v!c!cing) (* ing) (e ing) (ie ying)
lrule-general &
[ NEEDS-AFFIX true,
  ARGS [ FIRST [ AFFIX pres-part-verb]]].

inf-verb_infl_rule := lrule-general &
[ NEEDS-AFFIX false,
  ORTH #orth,
  ARGS [ FIRST [ ORTH #orth,
                 AFFIX inf-verb ]]].

non-3rd-sing-verb_infl_rule := lrule-general &
[ NEEDS-AFFIX false,
  ORTH #orth,
  ARGS [ FIRST [ ORTH #orth,
                 AFFIX non-3rd-sing-verb ]]].

sing-noun_infl_rule := lrule-general &
[ NEEDS-AFFIX false,
  ORTH #orth,
  ARGS [ FIRST [ ORTH #orth,
                 AFFIX sing-noun ]]].

constant-lexeme_infl_rule := lrule-general &
[ NEEDS-AFFIX false,
  ORTH #orth,
  ARGS [ FIRST [ ORTH #orth,
                 AFFIX no-affix ]]].

;;; (defun expand-engl-infl (affix)
;;;  (cond ((equal affix "-S") '("3rd-sing-verb" "plur-noun"))
;;;	((equal affix "-ED") '("past-verb" "past-part-verb"))
;;;	((equal affix "-ING") '("pres-part-verb"))
;;;	((equal affix "") '("inf-verb" "non-3rd-sing-verb" "sing-noun" 
;;;			    "no-affix"))
;;;	(t (list affix))))

plur-noun-nom_infl_rule :=
%suffix (zzz foobar)
lrule-general &
[ NEEDS-AFFIX true,
  ARGS [ FIRST [ AFFIX plur-noun-nom]]].

plur-noun-acc_infl_rule :=
%suffix (zzz foobar)
lrule-general &
[ NEEDS-AFFIX true,
  ARGS [ FIRST [ AFFIX plur-noun-acc]]].
