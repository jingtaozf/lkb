;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 
;;; SYNTACTIC THEORY by Sag and Wasow -- Textbook Grammar 
;;; implementation by Chris Callison-Burch & Scott Guffey
;;;
;;; lrule-types.tdl
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Don't change the name of lrule-super, or it will break -- it's named
;;; in the globals.lsp file.  CCB.


lrule-super :< lex-item.

; Words go through several stages before they can be used by our grammatical
; rules.  First the argument realization principle is applied, which sets up 
; the correspondence between the arg-st and the spr and comps.  Next the 
; anaphoric agreement principle determines which forms the argument structure
; can take.
; We've made types that correspond to these steps. They're called word, 
; word+arg_real, and word+arg_real+ana_agr.  The latter two types correspond 
; fairly closely to the book's notion of Lexical-Structural Description.  CCB
 
word+arg_real :< lrule-super.
 
;word+arg_real+ana_agr :< lrule-super.

;;; turning off the binding stuff for speed too.
;;; added this line to make sure that things go through.
word+arg_real+ana_agr :< word+arg_real.

lrule := lrule-super & 
  [ ARGS < lexeme & [ AFFIX #argaff,
		      ARGS < [ AFFIX #argaff ] > ] >,

    NEEDS-AFFIX boolean ],
status: lex-rule.

lrule-general := lrule & word &
[ SYN #syn,
  SEM #sem,
  ARG-ST #arg-st,

  WORD-DUMMY-LABEL boolean,
  ARGS < [SYN #syn,
	  SEM #sem,
	  ARG-ST #arg-st ] > ]. 

3rd-sing-verb-lexical-rule := lrule & word &
[ SYN #syn & [ HEAD  verb & [ FORM fin,
			      PRED false ],
	       SPR < [ SYN [ HEAD [ AGR 3sing ] ] ] > ],
  SEM [ MODE #mode,
	INDEX #1,
	RESTR [ LIST  < [RELN r_t-overlap,
			 ARG1 #1,
			 ARG2 now] . #restr >,
                LAST #semlast ]],
  ARG-ST #arg-st,
  ARGS < lexeme & [  SYN #syn,
		     SEM [ MODE #mode,
			   RESTR [ LIST #restr,
                                   LAST #semlast ]],
		     ARG-ST #arg-st ] >,
 NEEDS-AFFIX true ].



general-passive-lrule := word & 
[ ORTH #orth,
  SYN [ HEAD verb & [ FORM pass,
		      PRED true ],
	SPR < [ ] > ],
  SEM #sem,
  
  ARGS < word & [ ORTH #orth,
                  SYN [ HEAD verb & [ FORM psp,
				      PRED false ] ],
		  SEM #sem ] > ].





sing-noun := affix & 
 [ HEAD noun & [ AGR [ NUM sing ] ] ].

plur-noun := affix &
 [ HEAD noun & [ AGR [ NUM plur ] ],
   SPR < [ SYN [ HEAD [ COUNT true ] ] ] > ].

plur-noun-nom := affix &
 [ HEAD noun & [ AGR [ NUM plur ], CASE nom ] ].

plur-noun-acc := affix &
 [ HEAD noun & [ AGR [ NUM plur ], CASE acc ] ].


non-3rd-sing-verb := affix &  
 [ HEAD verb & [ FORM fin,
		 PRED false ],
   SPR < [ SYN [ HEAD [ CASE nom, AGR non-3sing ] ] ] > ].

3rd-sing-verb := affix &  
 [ HEAD verb & [ FORM fin,
		 PRED false ],
   SPR < [ SYN [ HEAD [ CASE nom, AGR 3sing ] ] ] > ].

past-verb := affix &
 [ HEAD verb & [ FORM fin,
		 PRED false ],
   SPR < [ SYN [ HEAD [ CASE nom ] ] ] > ].

pass-verb := affix &
 [ HEAD verb & [ FORM pass,
		 PRED true ] ].

pres-part-verb := affix &
 [ HEAD verb & [ FORM prp,
		 PRED true ] ].

past-part-verb := affix & 
 [ HEAD verb & [ FORM psp,
		 PRED false ] ].

inf-verb := affix &
 [ HEAD verb & [ FORM inf,
		 PRED false ] ].



