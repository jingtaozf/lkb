;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; 
;;; SYNTACTIC THEORY by Sag and Wasow -- Textbook Grammar 
;;; implementation by Chris Callison-Burch & Scott Guffey
;;;
;;; lrules.tdl
;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


:begin :instance.
negation-lexical-rule := word+arg_real+ana_agr &
[ SYN [ HEAD verb & [ FORM fin, PRED #pred, 
		      INV #inv, NEG true, 
		      AUX true, ANA #ana  ],
	SPR < #spr >,
	COMPS < [ SYN [ HEAD [ FORM f_not ] ] ] . #comps >,
	GAP #gap ],
  SEM #sem,
  ARG-ST < #spr, [ SYN [ HEAD [ FORM f_not ] ] ] , #comps >,

  ARGS < word+arg_real+ana_agr & [ SYN [ HEAD verb & [ FORM fin, PRED #pred,
						       INV #inv, NEG false,
						       AUX true, ANA #ana ], 
					 SPR < #spr >,
					 COMPS #comps,
					 GAP #gap],
				   SEM #sem,
				   ARG-ST < #spr . #comps > ] > ].
:end :instance.


:begin :instance.
inversion-lexical-rule := word+arg_real+ana_agr &
[ SYN [ HEAD verb & [ FORM fin, PRED #pred, 
		      INV true, NEG #neg, 
		      AUX true, ANA #ana ],
	SPR < >,
	COMPS < #spr . #comps >,
	GAP #gap ],
  SEM [ MODE ques,
	INDEX #index,
	RESTR #restr ],
  ARG-ST < #spr . #comps >,
  
  ARGS < word+arg_real+ana_agr & [ SYN [ HEAD verb & [ FORM fin, PRED #pred, 
						       INV false, NEG #neg,
						       AUX true, ANA #ana ], 
					 SPR < #spr & [ SYN NP ] >,
					 COMPS #comps,
					 GAP #gap ],
				   SEM [ MODE prop,
					 INDEX #index,
					 RESTR #restr ],
				   ARG-ST < #spr . #comps > ] > ].
:end :instance.

;; The verb value was added to prevent "to" from undergoing the 
;; extraposition rule and producing an extra "It continues to".
:begin :instance.
extraposition-lexical-rule := word & 
[ SYN [ HEAD #head ],
  SEM #sem,
  ARG-ST < [ SYN [HEAD noun & [FORM f_it] ] ], #b , #a >,
  
  ARGS < word & [ SYN [ HEAD #head & verb ],
		      SEM #sem,
		      ARG-ST < #a & [SYN CP-fin] , #b > ] > ].
:end :instance.


;; The additional #b was added to require at least two real elements
;; so as to prevent an infinite loop of rule application.  
:begin :instance.
ellipsis-lexical-rule := word & 
[ SYN [ HEAD #head,
	SPR < #1 >,
	COMPS < > ],
  SEM #sem,
  ARG-ST < #1 >,
  
  ARGS < word & [ SYN [ HEAD #head & [AUX true,
				      NEG false],
			SPR < #1 >,
			COMPS < #b . #a > ],
		  SEM #sem,
		  ARG-ST < #1 . < #b . #a > > ] > ]. 
:end :instance.


;  Half of the passive rules below could be removed if we institute code for optionality of 
;  compliments.  SMG
;
:begin :instance.
tv-pass-rule-short := general-passive-lrule &
 [ ARG-ST < [SYN [HEAD noun],
	     SEM [INDEX #und ] ] >,
   
   ARGS < [ ARG-ST < [ ], [SYN [HEAD noun],
			   SEM [INDEX #und ] ] > ] > ].
:end :instance.


:begin :instance.
tv-pass-rule-long := general-passive-lrule &
 [ ARG-ST < [SYN [HEAD noun],
	     SEM [INDEX #und] ], [SYN [HEAD prep & [FORM f_by ] ],
				  SEM [INDEX #act] ] >,
	      
   ARGS < [ ARG-ST < [SEM [INDEX #act ] ], [SYN [HEAD noun ],
					   SEM [INDEX #und] ] > ] > ].
:end :instance.


:begin :instance.
dtv-pass-rule-und-short := general-passive-lrule &
 [ ARG-ST < [SYN [HEAD noun],
	    SEM [INDEX #und ] ], [SYN [HEAD noun],
				  SEM [INDEX #thm ] ] >,
	  
   ARGS < [ ARG-ST < [ ], [SEM [INDEX #und ] ], [SYN [HEAD noun],
						  SEM [INDEX #thm] ] > ] > ].
:end :instance.


:begin :instance.
dtv-pass-rule-und-long := general-passive-lrule & 
 [ ARG-ST < [SYN [HEAD noun],
	    SEM [INDEX #und ] ], [SYN [HEAD noun],
				  SEM [INDEX #thm ] ], [SYN [HEAD prep & [FORM f_by] ],
							SEM [INDEX #act ] ] >,

   ARGS < [ ARG-ST < [ SEM [INDEX #act] ], [ SEM [INDEX #und ] ], [SYN [HEAD noun],
								   SEM [INDEX #thm] ] > ] > ].
:end :instance.


:begin :instance.
dtv-pass-rule-thm-short := general-passive-lrule & 
[ ARG-ST < [SYN [HEAD noun],
	    SEM [INDEX #thm ] ], [SYN [HEAD prep & [FORM #form] ],
				  SEM [INDEX #und] ] >,
  
   ARGS < [ ARG-ST < *top*, [SEM [INDEX #thm ] ], [SYN [HEAD prep & [FORM #form] ],
								  SEM [INDEX #und] ] > ] > ].
:end :instance.  


:begin :instance.
dtv-pass-rule-thm-long := general-passive-lrule & 
 [ ARG-ST < [SYN [HEAD noun],
	    SEM [INDEX #thm ] ], [SYN [HEAD prep & [FORM #form] ],
				  SEM [INDEX #und]              ], [SYN [HEAD prep & [FORM f_by] ],
								    SEM [INDEX #act ] ] >,
  
   ARGS < [ ARG-ST < [SEM [INDEX #act ] ], [SEM [INDEX #thm ] ], [SYN [HEAD prep & [FORM #form] ],
								  SEM [INDEX #und] ] > ] > ].
:end :instance.  



