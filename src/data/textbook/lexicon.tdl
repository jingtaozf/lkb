i_1 := pron-lxm &
[ ORTH <! "i" !>,
  SYN [ HEAD noun & [ AGR 1sing & [ PER 1st,
				    NUM sing ],
		      CASE nom ] ],
  SEM [ RESTR <! [RELN r_speaker] !> ] ].

we_1 := pron-lxm &
[ ORTH <! "we" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 1st,
					NUM plur ],
		      CASE nom ] ],
  SEM [ RESTR <! [RELN r_speakers] !> ] ].

me_1 := pron-lxm &
[ ORTH <! "me" !>,
  SYN [ HEAD noun & [ AGR 1sing & [ PER 1st,
				    NUM sing ],
		      CASE acc ] ],
  SEM [ RESTR <! [RELN r_speaker] !> ] ].

us_1 := pron-lxm &
[ ORTH <! "us" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 1st,
					NUM plur ],
		      CASE acc ] ],
  SEM [ RESTR <! [RELN r_speakers] !> ] ].

you_1 := pron-lxm &
[ ORTH <! "you" !>,
  SYN [ HEAD noun & [ AGR [ PER 2nd ] ] ],
  SEM [ RESTR <! [RELN r_listener] !> ] ].
; See Changes File #3

she_1 := pron-lxm &
[ ORTH <! "she" !>,
  SYN [ HEAD noun & [ AGR 3sing & [ GEND fem ],
		      CASE nom ] ],
  SEM [ RESTR <! [RELN r_female] !> ] ].

her_1 := pron-lxm &
[ ORTH <! "her" !>,
  SYN [ HEAD noun & [ AGR 3sing & [ GEND fem ],
		      CASE acc ] ],
  SEM [ RESTR <! [RELN r_female] !> ] ].

he_1 := pron-lxm &
[ ORTH <! "he" !>,
  SYN [ HEAD noun & [ AGR 3sing & [ GEND masc ],
		      CASE nom ] ],
  SEM [ RESTR <! [RELN r_male] !> ] ].

him_1 := pron-lxm &
[ ORTH <! "him" !>,
  SYN [ HEAD noun & [ AGR 3sing & [ GEND masc ],
		      CASE acc ] ],
  SEM [ RESTR <! [RELN r_male] !> ] ].

it_1 := pron-lxm &
[ ORTH <! "it" !>,
  SYN [ HEAD noun & [ AGR 3sing & [ GEND neut ] ] ],
  SEM [ RESTR <! [ RELN r_it] !> ] ].

they_1 := pron-lxm &
[ ORTH <! "they" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 3rd, GEND neut, NUM plur ],
		      CASE nom ] ],
  SEM [ RESTR <! [ RELN r_group] !> ] ].

them_1 := pron-lxm &
[ ORTH <! "them" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 3rd, GEND neut, NUM plur ],
		      CASE acc ] ],
  SEM [ RESTR <! [ RELN r_group] !> ] ].

nobody_1 := pron-lxm &
[ ORTH <! "nobody" !>,
  SYN [ HEAD noun & [ AGR 3sing ] ],
  SEM [ RESTR <! [RELN r_no-person] !> ] ].

everybody_1 := pron-lxm &
[ ORTH <! "everybody" !>,
  SYN [ HEAD noun & [ AGR 3sing ] ],
  SEM [ RESTR <! [RELN r_every-person] !> ] ].

myself_1 := pron-lxm &
[ ORTH <! "myself" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 1st ],
		      CASE acc,
        ANA true ] ],
  SEM [ RESTR <! [RELN r_speaker] !> ] ].

yourself_1 := pron-lxm &
[ ORTH <! "yourself" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 2nd, NUM sing ],
		      CASE acc,
        ANA true ] ],
  SEM [ RESTR <! [RELN r_listener] !> ] ].

yourselves_1 := pron-lxm &
[ ORTH <! "yourselves" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 2nd, NUM plur ],
		      CASE acc,
        ANA true ] ],
  SEM [ RESTR <! [RELN r_listeners] !> ] ].

herself_1 := pron-lxm &
[ ORTH <! "herself" !>,
  SYN [ HEAD noun & [ AGR 3sing & [ GEND fem ],
		      CASE acc,
        ANA true ] ],
  SEM [ RESTR <! [RELN r_female] !> ] ].

himself_1 := pron-lxm &
[ ORTH <! "himself" !>,
  SYN [ HEAD noun & [ AGR 3sing & [ GEND masc ],
		      CASE acc,
        ANA true ] ],
  SEM [ RESTR <! [RELN r_male] !> ] ].

itself_1 := pron-lxm &
[ ORTH <! "itself" !>,
  SYN [ HEAD noun & [ AGR 3sing & [ PER 3rd, GEND neut ],
		      CASE acc,
        ANA true ] ],
  SEM [ RESTR <! [ RELN r_itself] !> ] ].

ourselves_1 := pron-lxm &
[ ORTH <! "ourselves" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 1st, GEND neut, NUM plur ],
		      CASE acc,
        ANA true ] ],
  SEM [ RESTR <! [ RELN r_speakers] !> ] ].

themselves_1 := pron-lxm &
[ ORTH <! "themselves" !>,
  SYN [ HEAD noun & [ AGR non-3sing & [ PER 3rd, GEND neut, NUM plur ],
		      CASE acc,
        ANA true ] ],
  SEM [ RESTR <! [ RELN r_group] !> ] ].

Kim_n1 := pn-lxm &
[ ORTH <! "Kim" !>,
  SEM [ RESTR <! [ NAME 'Kim ] !> ] ].

Sandy_n1 := pn-lxm &
[ ORTH <! "Sandy" !>,
  SEM [ RESTR <! [ NAME 'Sandy ] !> ] ].

Pat_n1 := pn-lxm &
[ ORTH <! "Pat" !>,
  SEM [ RESTR <! [ NAME 'Pat ] !> ] ].

Chris_n1 := pn-lxm &
[ ORTH <! "Chris" !>,
  SEM [ RESTR <! [ NAME 'Chris ] !> ] ].

Carrie_n1 := pn-lxm &
[ ORTH <! "Carrie" !>,
  SEM [ RESTR <! [ NAME 'Carrie ] !> ] ].

Fido_n1 := pn-lxm &
[ ORTH <! "Fido" !>,
  SEM [ RESTR <! [ NAME 'Fido ] !> ] ].

Leslie_n1 := pn-lxm &
[ ORTH <! "Leslie" !>,
  SEM [ RESTR <! [ NAME 'Leslie ] !> ] ].

Lou_n1 := pn-lxm &
[ ORTH <! "Lou" !>,
  SEM [ RESTR <! [ NAME 'Lou ] !> ] ].

Dana_n1 := pn-lxm &
[ ORTH <! "Dana" !>,
  SEM [ RESTR <! [ NAME 'Dana ] !> ] ].

Lynn_n1 := pn-lxm &
[ ORTH <! "Lynn" !>,
  SEM [ RESTR <! [ NAME 'Lynn ] !> ] ].

Lee_n1 := pn-lxm &
[ ORTH <! "Lee" !>,
  SEM [ RESTR <! [ NAME 'Lee ] !> ] ].

Maria_n1 := pn-lxm &
[ ORTH <! "Maria" !>,
  SYN [ HEAD [ AGR [ GEND fem] ] ],
  SEM [ RESTR <! [ NAME 'Maria ] !> ] ].

Hannibal_n1 := pn-lxm &
[ ORTH <! "Hannibal" !>,
  SYN [ HEAD [ AGR [ GEND masc] ] ],
  SEM [ RESTR <! [ NAME 'Hannibal ] !> ] ].

TV_n2 := pn-lxm &
[ ORTH <! "TV" !>,
  SYN [ HEAD [ AGR [ GEND neut] ] ],
  SEM [ RESTR <! [ NAME 'TV ] !> ] ].

Chicago_n1 := pn-lxm &
[ ORTH <! "Chicago" !>,
  SYN [ HEAD [ AGR [ GEND neut] ] ],
  SEM [ RESTR <! [ NAME 'Chicago ] !> ] ].

Cleveland_n1 := pn-lxm &
[ ORTH <! "Cleveland" !>,
  SYN [ HEAD [ AGR [ GEND neut] ] ],
  SEM [ RESTR <! [ NAME 'Cleveland ] !> ] ].

America_n1 := pn-lxm &
[ ORTH <! "America" !>,
  SYN [ HEAD [ AGR [ GEND fem] ] ],
  SEM [ RESTR <! [ NAME 'America ] !> ] ].

Tarzan_n1 := pn-lxm &
[ ORTH <! "Tarzan" !>,
  SYN [ HEAD [ AGR [ GEND masc] ] ],
  SEM [ RESTR <! [ NAME 'Tarzan ] !> ] ].

Jane_n1 := pn-lxm &
[ ORTH <! "Jane" !>,
  SYN [ HEAD [ AGR [ GEND fem] ] ],
  SEM [ RESTR <! [ NAME 'Jane ] !> ] ].

Romeo_n1 := pn-lxm &
[ ORTH <! "Romeo" !>,
  SYN [ HEAD [ AGR [ GEND masc] ] ],
  SEM [ RESTR <! [ NAME 'Romeo ] !> ] ].

Juliet_n1 := pn-lxm &
[ ORTH <! "Juliet" !>,
  SYN [ HEAD [ AGR [ GEND fem] ] ],
  SEM [ RESTR <! [ NAME 'Juliet ] !> ] ].

Mulder_n1 := pn-lxm &
[ ORTH <! "Mulder" !>,
  SYN [ HEAD [ AGR [ GEND masc] ] ],
  SEM [ RESTR <! [ NAME 'Mulder ] !> ] ].

Scully_n1 := pn-lxm &
[ ORTH <! "Scully" !>,
  SYN [ HEAD [ AGR [ GEND fem] ] ],
  SEM [ RESTR <! [ NAME 'Scully ] !> ] ].

tabs_n1 := dummy-idiom-lxm &
[ ORTH <! "tabs" !>,
  SYN [ HEAD [ FORM f_tabs ] ] ].

advantage_n1 := dummy-idiom-lxm &
[ ORTH <! "advantage" !>,
  SYN [ HEAD [ FORM f_advantage ] ] ].

it_2 := dummy-idiom-lxm &
[ ORTH <! "it" !>,
  SYN [ HEAD [ FORM f_it,
	       AGR 3sing ] ] ].

there_n1 := infl-lxm &
[ ORTH <! "there" !>,
  SYN [ HEAD noun & [ FORM f_there,
		      AGR [ PER 3rd,
			    NUM singandplur ] ] ],
  SEM null-sem,
  ARG-ST < > ].  

;;; ----- DETERMINERS  -----

; 's was made of type const-lxm because the ARG-ST of det-lxm is empty.  SMG
;
s_1 := det-lxm &
[ ORTH <! "s" !>,
  SYN [ SPR < [ ] > ],
  ARG-ST < [ SYN NP ] > ].

the_1 := det-lxm & 
[ ORTH <! "the" !> ].

a_1 := det-lxm & 
[ ORTH <! "a" !>,
  SYN [ HEAD [ COUNT true,
	       AGR [ NUM sing ] ] ] ].

this_1 := det-lxm & 
[ ORTH <! "this" !>,
  SYN [ HEAD [ AGR [ NUM sing ] ] ] ].

;; Add "that" as a pronoun lexeme as well?
that_1 := det-lxm & 
[ ORTH <! "that" !>,
  SYN [ HEAD [ AGR [ NUM sing ] ] ] ].

these_1 := det-lxm & 
[ ORTH <! "these" !>,
  SYN [ HEAD [ COUNT true,
	       AGR [ NUM plur ] ] ] ].

those_1 := det-lxm & 
[ ORTH <! "those" !>,
  SYN [ HEAD [ COUNT true,
	       AGR [ NUM plur ] ] ] ].

few_1 := det-lxm & 
[ ORTH <! "few" !>,
  SYN [ HEAD [ COUNT true,
	       AGR [ NUM plur ] ] ] ].

many_1 := det-lxm & 
[ ORTH <! "many" !>,
  SYN [ HEAD [ COUNT true,
	       AGR [ NUM plur ] ] ] ].

much_1 := det-lxm & 
[ ORTH <! "much" !>,
  SYN [ HEAD [ COUNT false ] ] ].

my_1 := det-lxm & 
[ ORTH <! "my" !> ].

your_1 := det-lxm & 
[ ORTH <! "your" !> ].

his_1 := det-lxm & 
[ ORTH <! "his" !> ].

her_2 := det-lxm & 
[ ORTH <! "her" !> ].

its_1 := det-lxm & 
[ ORTH <! "its" !> ].

our_1 := det-lxm & 
[ ORTH <! "our" !> ].

their_1 := det-lxm & 
[ ORTH <! "their" !> ].

;; Do we want to try to produce a interpretation of quantifier syntax.  If so 
;; we have to find some way of allowing both "all chairs" as well as "all furniture".
;; To do that involves a new grule as well as new inflectional rules, perhaps
;; even an furniture entry in the irregs file.  Might not be worth it...  SMG
all_1 := det-lxm & 
[ ORTH <! "all" !>,
  SYN [ HEAD [ AGR [ NUM plur ] ] ] ].

;; What about "There is no/some cat on the table." or "I love no cat"

no_1 := det-lxm & 
[ ORTH <! "no" !>,
  SYN [ HEAD [ AGR [ NUM plur ] ] ] ].

most_1 := det-lxm & 
[ ORTH <! "most" !>,
  SYN [ HEAD [ AGR [ NUM plur ] ] ] ].


to_1 := mkp-lxm & 
[ ORTH <! "to" !>,
  SYN [ HEAD [FORM f_to ] ] ].

;; The entry below is necessary for instances of "told...about"
about_1 :=mkp-lxm &
[ ORTH <! "about" !>,
  SYN [HEAD [FORM f_about ] ] ].

;; This entry is needed for "I was angry with kim about the book"
;; But it also causes more parses for "I told him about us".
;about_2 :=pdp-lxm &
;[ ORTH <! "about" !>,
;  SYN [HEAD [FORM f_about ] ] ].

on_1 := mkp-lxm &
[ ORTH <! "on" !>,
  SYN [ HEAD [ FORM f_on ] ] ].

on_2 := pdp-lxm &
[ ORTH <! "on" !>,
  SYN [ HEAD [ FORM f_on ] ] ].

in_1 := mkp-lxm &
[ ORTH <! "in" !>,
  SYN [ HEAD [ FORM f_in ] ] ].

in_2 := pdp-lxm &
[ ORTH <! "in" !>,
  SYN [ HEAD [ FORM f_in ] ] ].

with_1 := pdp-lxm &
[ ORTH <! "with" !>,
  SYN [ HEAD [ FORM f_with ] ] ].

of_1 := mkp-lxm &
[ ORTH <!  "of" !>,
  SYN [ HEAD [ FORM f_of ] ] ].

for_1 := mkp-lxm &
[ ORTH <!  "for" !>,
  SYN [ HEAD [ FORM f_for ] ] ].

; Seems like we'll need a pdp-lxm for by as well to account for "I dropped the
; book by the store." 
by_1 := mkp-lxm & 
[ ORTH <!  "by" !>,
  SYN [ HEAD [ FORM f_by ] ] ].


around_1 := mkp-lxm & 
[ ORTH <!  "around" !>,
  SYN [ HEAD [ FORM f_around ] ] ].

to_2:= comp1-lxm & 
[ ORTH <! "to" !>,
  SYN [ HEAD [ FORM inf ],
	SPR < [ ] > ],
  ARG-ST < #1, [SYN [SPR < #1 > ] ] > ].

that_2 := comp2-lxm & 
[ ORTH <! "that" !>,
  SYN [ HEAD [ FORM fin ],
	SPR < > ],
  ARG-ST < [SYN [SPR < > ] ] > ].

;; This entry needs to be fixed...
not_1 := adv-lxm & 
[ ORTH <! "not" !>,
  SYN  [ HEAD adv & [ 
		      FORM f_not ] ],
  ARG-ST  < >,
  SEM [ RESTR <! [RELN r_not] !> ] ].
;  MOD < [ SYN [ HEAD [ AUX false ] ] ] >,

and_1 := conj-lxm &
[ ORTH <! "and" !>,
  SYN [ HEAD [ FORM f_and ] ],
  SEM [ RESTR <! [ RELN r_and ] !> ] ].

but_1 := conj-lxm &
[ ORTH <! "but" !>,
  SYN [ HEAD [ FORM f_but ] ],
  SEM [ RESTR <! [ RELN r_but ] !> ] ].

quickly_1 := adv-lxm &
[ ORTH <! "quickly" !>,
  SEM [ RESTR <! [ RELN r_quickly] !> ] ].

slowly_1 := adv-lxm &
[ ORTH <! "slowly" !>,
  SEM [ RESTR <! [ RELN r_slowly] !> ] ].

easily_1 := adv-lxm &
[ ORTH <! "easily" !>,
  SEM [ RESTR <! [ RELN r_easily] !> ] ].

today_1 := adv-lxm &
[ ORTH <! "today" !>,
  SEM [ RESTR <! [ RELN r_today] !> ] ].

fond_a1 := adj-lxm &
[ ORTH <! "fond" !>,
  ARG-ST < [ ], [ SYN PP & [ HEAD [ FORM f_of,
				    P-OBJ <[SYN NP]> ] ] ] >,
  SEM [ RESTR <! [ RELN r_fond] !> ] ].

happy_a1 := adj-lxm &
[ ORTH <! "happy" !>,
  SEM [ RESTR <! [ RELN r_happy] !> ] ].

unhappy_a1 := adj-lxm &
[ ORTH <! "unhappy" !>,
  SEM [ RESTR <! [ RELN r_unhappy] !> ] ].

mere_a1 := adj-lxm &
[ ORTH <! "mere" !>,
  SYN [ HEAD [ PRED false ] ],
  SEM [ RESTR <! [ RELN r_mere] !> ] ].

angry_a1 := adj-lxm &
[ ORTH <! "angry" !>,
  SEM [ RESTR <! [ RELN r_angry] !> ] ].

;; This is for "I was angry with..." sentences but doesn't work.
;angry_a2 := adj-lxm &
;[ ORTH <! "angry" !>,
;  ARG-ST < [ ], [ SYN PP & [ HEAD [ FORM f_with,
;				    P-OBJ <[SYN NP]> ] ] ] >,
;  SEM [ RESTR <! [ RELN r_angry] !> ] ].

available_a1 := adj-lxm &
[ ORTH <! "available" !>,
  SEM [ RESTR <! [ RELN r_available] !> ] ].

black_a1 := adj-lxm &
[ ORTH <! "black" !>,
  SEM [ RESTR <! [ RELN r_black] !> ] ].

broken_a1 := adj-lxm &
[ ORTH <! "broken" !>,
  SEM [ RESTR <! [ RELN r_broke] !> ] ].

brown_a1 := adj-lxm &
[ ORTH <! "brown" !>,
  SEM [ RESTR <! [ RELN r_brown] !> ] ].

eager_a1 := adj-lxm &
[ ORTH <! "eager" !>,
  SEM [ RESTR <! [ RELN r_eager] !> ] ].

eager_a2 := adj-lxm &
[ ORTH <! "eager" !>,
  ARG-ST < [ ], [SYN CP-inf] >,
  SEM [ RESTR <! [ RELN r_eager] !> ] ].

expensive_a1 := adj-lxm &
[ ORTH <! "expensive" !>,
  SEM [ RESTR <! [ RELN r_expensive] !> ] ].

funny_a1 := adj-lxm &
[ ORTH <! "funny" !>,
  SEM [ RESTR <! [ RELN r_funny] !> ] ].

;; This is for "It is funny that..." sentences but doesn't work.
funny_a2 := adj-lxm &
[ ORTH <! "funny" !>,
  SEM [ RESTR <! [ RELN r_funny] !> ],
  ARG-ST < [SYN [HEAD [FORM f_it ] ],
	    SEM [ INDEX null-index ] ], 
           [SYN [HEAD [FORM fin],
                 COMPS < > ] ] > ].

german_a1 := adj-lxm &
[ ORTH <! "german" !>,
  SEM [ RESTR <! [ RELN r_german] !> ] ].

hard_a1 := adj-lxm &
[ ORTH <! "hard" !>,
  SEM [ RESTR <! [ RELN r_hard] !> ] ].

kind_a1 := adj-lxm &
[ ORTH <! "kind" !>,
  SEM [ RESTR <! [ RELN r_kind] !> ] ].

likely_a1 := adj-lxm &
[ ORTH <! "likely" !>,
  SEM [ RESTR <! [ RELN r_likely] !> ] ].

large_a1 := adj-lxm &
[ ORTH <! "large" !>,
  SEM [ RESTR <! [ RELN r_large] !> ] ].

magnificent_a1 := adj-lxm &
[ ORTH <! "magnificent" !>,
  SEM [ RESTR <! [ RELN r_magnificent] !> ] ].

obvious_a1 := adj-lxm &
[ ORTH <! "obvious" !>,
  SEM [ RESTR <! [ RELN r_obvious] !> ] ].

obvious_a2 := adj-lxm &
[ ORTH <! "obvious" !>,
  SEM [ RESTR <! [ RELN r_obvious] !> ],
  ARG-ST < [SYN [HEAD [FORM f_it ] ],
	    SEM [ INDEX null-index ] ], 
           [SYN [HEAD [FORM fin],
                 COMPS < > ] ] > ].

offended_a1 := adj-lxm &
[ ORTH <! "offended" !>,
  SEM [ RESTR <! [ RELN r_offended] !> ] ].

optional_a1 := adj-lxm &
[ ORTH <! "optional" !>,
  SEM [ RESTR <! [ RELN r_optional] !> ] ].

new_a1 := adj-lxm &
[ ORTH <! "new" !>,
  SEM [ RESTR <! [ RELN r_new] !> ] ].

noisy_a1 := adj-lxm &
[ ORTH <! "noisy" !>,
  SEM [ RESTR <! [ RELN r_noisy] !> ] ].

unfair_a1 := adj-lxm &
[ ORTH <! "unfair" !>,
  SEM [ RESTR <! [ RELN r_unfair] !> ] ].

undocumented_a1 := adj-lxm &
[ ORTH <! "undocumented" !>,
  SEM [ RESTR <! [ RELN r_undocumented] !> ] ].

rain_v1 := verb-lxm &
[ ORTH <! "rain" !>,
  ARG-ST < [SYN [ HEAD noun & [FORM f_it] ],
	    SEM [ INDEX null-index ] ] >,
  SEM [ RESTR <! [ RELN r_rain] !> ] ].

;; Should this really inherit from ptv instead?  If so, then we have to
;; play around with the semantic fields.  
keep_v1 := verb-lxm &
[ ORTH <! "keep" !>,
  ARG-ST < [SYN NP-nom,
	    SEM [INDEX #1] ],
	                  [SYN NP-acc & [HEAD [FORM f_tabs] ],
			   SEM [INDEX null-index] ],
				   	           [SYN PP & [HEAD [FORM f_on] ],
						    SEM [INDEX #2 ] ] >,
  SEM  [ RESTR <! stv_pred & [ RELN r_observe,
                               ACT #1,
                               UND #2 ] !> ] ].

take_v1 := verb-lxm &
[ ORTH <! "take" !>,
  ARG-ST < [SEM [INDEX #1] ], [SYN [HEAD noun & [FORM f_advantage] ] ], 

                        [SYN [HEAD prep & [FORM f_of],
  	                      SPR < > ],
                         SEM [ INDEX #2 ] ] >,
  SEM  [ INDEX #index,
         RESTR <! stv_pred & [ RELN r_exploit,
                               SIT #index,
                               ACT #1,
                               UND #2 ] !> ] ]. 

can_v1 := modal-lxm &
[ ORTH <! "can" !>,
  SEM  [ RESTR <! [ RELN r_can ] !> ] ].

could_v1 := modal-lxm &
[ ORTH <! "could" !>,
  SEM  [ RESTR <! [ RELN r_could ] !> ] ].

should_v1 := modal-lxm &
[ ORTH <! "should" !>,
  SEM  [ RESTR <! [ RELN r_should ] !> ] ].

would_v1 := modal-lxm &
[ ORTH <! "would" !>,
  SEM  [ RESTR <! [ RELN r_would ] !> ] ].

might_v1 := modal-lxm &
[ ORTH <! "might" !>,
  SEM  [ RESTR <! [ RELN r_might ] !> ] ].

must_v1 := modal-lxm &
[ ORTH <! "must" !>,
  SEM  [ RESTR <! [ RELN r_must ] !> ] ].

will_v1 := modal-lxm &
[ ORTH <! "will" !>,
  SEM  [ RESTR <! [ RELN r_will ] !> ] ].

do_v1 := auxv-lxm &
[ ORTH <! "do" !>,
  SYN [ HEAD verb & [ FORM fin ] ],
  ARG-ST < [ ], [ SYN [ HEAD verb & [FORM inf, AUX false ] ],
		  SEM [ INDEX #1 ] ] >,
  SEM [ INDEX #1,
	RESTR <! [ RELN r_do] !> ] ].

get_v2 := auxv-lxm &
[ ORTH <! "get" !>,
  SYN [ HEAD verb & [ FORM fin ] ],
  ARG-ST < [ ], [ SYN [ HEAD verb & [FORM pass ] ],
		  SEM [ INDEX #1 ] ] >,
  SEM [ INDEX #1,
	RESTR <! [ RELN r_get] !> ] ].

have_v1 := auxv-lxm &
[ ORTH <! "have" !>,
  ARG-ST < [ ], [ SYN [ HEAD verb & [FORM psp] ] ] >,
  SEM [ RESTR <! [ RELN r_have] !> ] ].

be_v1 := auxv-lxm &
[ ORTH <! "be" !>,
  SEM [ MODE prop,
  	INDEX #1,
	RESTR <! [ RELN r_be ] !> ],
  ARG-ST < [ ], [ SYN [ HEAD [PRED true] ],
		  SEM [ INDEX #1 ] ] > ].
; SEM [INDEX real-index ]

; notes suggest auxv instead.  And what about a blank SPR on the second
; ARG-ST element to block double parses on "there is a cat on the table"
be_v2 := tv-lxm &
[ ORTH <! "be" !>,
  SYN [ HEAD [ AUX true ] ],
  SEM [ INDEX #3,
	RESTR <! fiv_pred & [ ACT #2,
			      ARG #3,
			      RELN r_be ] !> ],
  ARG-ST < [ SYN [ HEAD [ AGR [NUM #num],
			  FORM f_there] ],
	     SEM [ INDEX null-index ] ], 
                      #4 & [ SYN [ HEAD [AGR [NUM #num] ] ],
			     SEM [ INDEX #2 ] ],       [ SYN [ HEAD [PRED true],
							       SPR < #4 >,
							       COMPS < > ],
							 SEM [ INDEX #3 ] ] > ].
age_v1 := iv-lxm &
[ ORTH <! "age" !>,
  SEM [ RESTR <! [ RELN r_age-verb] !> ] ].

bark_v1 := iv-lxm &
[ ORTH <! "bark" !>,
  SEM [ RESTR <! [ RELN r_bark] !> ] ].

believe_v1 := iv-lxm &
[ ORTH <! "believe" !>,
  SEM [ RESTR <! [ RELN r_believe] !> ] ].

die_v1 := iv-lxm &
[ ORTH <! "die" !>,
  SEM [ RESTR <! [ RELN r_die] !> ] ].

dine_v1 := iv-lxm &
[ ORTH <! "dine" !>,
  SEM [ RESTR <! [ RELN r_dine] !> ] ].

disappear_v1 := iv-lxm &
[ ORTH <! "disappear" !>,
  SEM [ RESTR <! [ RELN r_disappear] !> ] ].

duck_2 := iv-lxm &
[ ORTH <! "duck" !>,
  SEM  [ RESTR <! [ RELN r_duck-verb] !> ] ].

eat_v1 := iv-lxm &
[ ORTH <! "eat" !>,
  SEM [ RESTR <! [ RELN r_eat] !> ] ].

explode_v1 := iv-lxm &
[ ORTH <! "explode" !>,
  SEM [ RESTR <! [ RELN r_explode] !> ] ].

fall_v1 := iv-lxm &
[ ORTH <! "fall" !>,
  SEM [ RESTR <! [ RELN r_fall] !> ] ].

fly_v1 := iv-lxm &
[ ORTH <! "fly" !>,
  SEM [ RESTR <! [ RELN r_fly] !> ] ].

float_v1 := iv-lxm &
[ ORTH <! "float" !>,
  SEM [ RESTR <! [ RELN r_float] !> ] ].

gather_v1 := iv-lxm &
[ ORTH <! "gather" !>,
  SEM [ RESTR <! [ RELN r_gather] !> ] ].

laugh_v1 := iv-lxm &
[ ORTH <! "laugh" !>,
  SEM [ RESTR <! [ RELN r_laugh] !> ] ].

leave_v1 := iv-lxm &
[ ORTH <! "leave" !>,
  SEM [ RESTR <! [ RELN r_leave] !> ] ].

lie_v1 := iv-lxm &
[ ORTH <! "lie" !>,
  SEM [ RESTR <! [ RELN r_lie] !> ] ].

live_v1 := iv-lxm &
[ ORTH <! "live" !>,
  SEM [ RESTR <! [ RELN r_live] !> ] ].

run_v1 := iv-lxm &
[ ORTH <! "run" !>,
  SEM [ RESTR <! [ RELN r_run] !> ] ].

sank_v1 := iv-lxm &
[ ORTH <! "sank" !>,
  SEM [ RESTR <! [ RELN r_sank] !> ] ].

sat_v1 := iv-lxm &
[ ORTH <! "sat" !>,
  SEM [ RESTR <! [ RELN r_sat] !> ] ].

scream_v1 := iv-lxm &
[ ORTH <! "scream" !>,
  SEM [ RESTR <! [ RELN r_scream] !> ] ].

sing_v1 := iv-lxm &
[ ORTH <! "sing" !>,
  SEM [ RESTR <! [ RELN r_sing] !> ] ].

skate_v1 := iv-lxm &
[ ORTH <! "skate" !>,
  SEM [ RESTR <! [ RELN r_skate] !> ] ].

sleep_v1 :=  iv-lxm &
[ ORTH <! "sleep" !>,
  SEM [ RESTR <! [ RELN r_sleep] !> ] ].

sneeze_v1 := iv-lxm &
[ ORTH <! "sneeze" !>,
  SEM [ RESTR <! [ RELN r_sneeze] !> ] ].

speak_v1 := iv-lxm &
[ ORTH <! "speak" !>,
  SEM [ RESTR <! [ RELN r_speak] !> ] ].

suck_v1 := iv-lxm &
[ ORTH <! "suck" !>,
  SEM [ RESTR <! [ RELN r_suck] !> ] ].

talk_v1 := iv-lxm &
[ ORTH <! "talk" !>,
  SEM [ RESTR <! [ RELN r_talk] !> ] ].

tapdance_v1 := iv-lxm &
[ ORTH <! "tapdance" !>,
  SEM [ RESTR <! [ RELN r_tapdance] !> ] ].

visit_v1 := iv-lxm &
[ ORTH <! "visit" !>,
  SEM [ RESTR <! [ RELN r_visit] !> ] ].

vote_v1 := iv-lxm &
[ ORTH <! "vote" !>,
  SEM [ RESTR <! [ RELN r_vote] !> ] ].

win_v1 := iv-lxm &
[ ORTH <! "win" !>,
  SEM [ RESTR <! [ RELN r_win] !> ] ].

yell_v1 := iv-lxm &
[ ORTH <! "yell" !>,
  SEM [ RESTR <! [ RELN r_yell] !> ] ].

ask_v1 := piv-lxm &
[ ORTH <! "ask" !>,
  SEM [ RESTR <! [ RELN r_ask] !> ] ].

campaign_v1 := piv-lxm &
[ ORTH <! "campaign" !>,
  SEM [ RESTR <! [ RELN r_campaign] !> ] ].

come_v1 := piv-lxm &
[ ORTH <! "come" !>,
  SEM [ RESTR <! [ RELN r_come] !> ] ].

fit_v1 := piv-lxm &
[ ORTH <! "fit" !>,
  SEM [ RESTR <! [ RELN r_fit-verb] !> ] ].

go_v1 := piv-lxm &
[ ORTH <! "go" !>,
  SEM [ RESTR <! [ RELN r_go] !> ] ].

lie_2 := piv-lxm &
[ ORTH <! "lie" !>,
  SEM [ RESTR <! [ RELN r_lie] !> ] ].

look_v1 := piv-lxm &
[ ORTH <! "look" !>,
  SEM [ RESTR <! [ RELN r_look] !> ] ].

rely_v1 := piv-lxm &
[ ORTH <! "rely" !>,
  SEM [ RESTR <! [ RELN r_rely] !> ] ].

talk_v2 := piv-lxm &
[ ORTH <! "talk" !>,
  SEM [ RESTR <! [ RELN r_talk] !> ] ].

tug_v1 := piv-lxm &
[ ORTH <! "tug" !>,
  SEM [ RESTR <! [ RELN r_tug] !> ] ].

visit_v2 := piv-lxm &
[ ORTH <! "visit" !>,
  SEM [ RESTR <! [ RELN r_visit] !> ] ].

vote_v2 := piv-lxm &
[ ORTH <! "vote" !>,
  SEM [ RESTR <! [ RELN r_vote] !> ] ].

hope_v1 := fiv-lxm &
[ ORTH <! "hope" !>,
  SEM [ RESTR <! [ RELN r_hope] !> ] ].

hope_v2 := scv-lxm &
[ ORTH <! "hope" !>,
  SEM [ RESTR <! [ RELN r_hope] !> ],
  ARG-ST < [ ], [SYN CP-inf] > ].

say_v1 := fiv-lxm &
[ ORTH <! "say" !>,
  SEM [ RESTR <! [ RELN r_say] !> ] ].

think_v1 := fiv-lxm &
[ ORTH <! "think" !>,
  SEM [ RESTR <! [ RELN r_think] !> ] ].

suspect_v1 := fiv-lxm &
[ ORTH <! "suspect" !>,
  SEM [ RESTR <! [ RELN r_suspect] !> ] ].

discover_v1 := fiv-lxm &
[ ORTH <! "discover" !>,
  SEM [ RESTR <! [ RELN r_discover] !> ] ].

believe_v2 := fiv-lxm &
[ ORTH <! "believe" !>,
  SEM [ RESTR <! [ RELN r_believe] !> ] ].

learn_v1 := fiv-lxm &
[ ORTH <! "learn" !>,
  SEM [ RESTR <! [ RELN r_learn] !> ] ].

learn_v2 := scv-lxm &
[ ORTH <! "learn" !>,
  SEM [ RESTR <! [ RELN r_learn] !> ],
  ARG-ST < [ ], [SYN CP-inf] > ].

learn_v3 := iv-lxm &
[ ORTH <! "learn" !>,
  SEM [ RESTR <! [ RELN r_learn] !> ] ].

learn_v4 := stv-lxm &
[ ORTH <! "learn" !>,
  SEM [ RESTR <! [ RELN r_learn] !> ] ].

see_v1 := fiv-lxm &
[ ORTH <! "see" !>,
  SEM [ RESTR <! [ RELN r_see] !> ] ].

see_v2 := stv-lxm &
[ ORTH <! "see" !>,
  SEM [ RESTR <! [ RELN r_see] !> ] ].

;; Added for second parse of "I saw her duck."  
see_v3 := tv-lxm & 
[ ORTH <! "see" !>,
  SEM  [ RESTR <! [ ACT #1,
		    UND #2,
		    ARG #3,
		    RELN r_see] !> ],
  ARG-ST < [SEM [INDEX #1]], [SEM [INDEX #2]], [SYN [HEAD verb & [FORM inf],
						     SPR < [ ] >,
						     COMPS < > ],
						SEM [INDEX #3] ] > ].

;; Added for "Pat helped Chris (to) solve the problem"  
help_v3 := tv-lxm & 
[ ORTH <! "help" !>,
  SEM  [ RESTR <! [ ACT #1,
		    UND #2,
		    ARG #3,
		    RELN r_help] !> ],
  ARG-ST < [SEM [INDEX #1]], [SEM [INDEX #2]], [SYN [HEAD [FORM inf],
						     SPR < [ ] >,
						     COMPS < > ],
						SEM [INDEX #3] ] > ].

admire_v1 := stv-lxm &
[ ORTH <! "admire" !>,
  SEM [ RESTR <! [ RELN r_admire] !> ] ].

affect_v1 := stv-lxm &
[ ORTH <! "affect" !>,
  SEM [ RESTR <! [ RELN r_affect] !> ] ].

annoy_v1 := stv-lxm &
[ ORTH <! "annoy" !>,
  SEM [ RESTR <! [ RELN r_annoy] !> ] ].

annoy_v2 := tv-lxm & 
[ ORTH <! "annoy" !>,
  ARG-ST < [ SYN CP-fin,
	     SEM [INDEX #1] ], [ SEM [INDEX #2] ] >,
  SEM [ RESTR <! ctv_pred & [ ARG #1,
			      UND #2,
			      RELN r_annoy] !> ] ].

arrest_v1 := stv-lxm &
[ ORTH <! "arrest" !>,
  SEM [ RESTR <! [ RELN r_arrest] !> ] ].

ask_v2 := stv-lxm &
[ ORTH <! "ask" !>,
  SEM [ RESTR <! [ RELN r_ask] !> ] ].

ask_v3 := ocv-lxm &
[ ORTH <! "ask" !>,
  SEM [ RESTR <! [ RELN r_ask] !> ] ].

avoid_v1 := stv-lxm &
[ ORTH <! "avoid" !>,
  SEM [ RESTR <! [ RELN r_avoid] !> ] ].

bite_v1 := stv-lxm &
[ ORTH <! "bite" !>,
  SEM [ RESTR <! [ RELN r_bite] !> ] ].

bare_v1 := stv-lxm &
[ ORTH <! "bare" !>,
  SEM [ RESTR <! [ RELN r_bare] !> ] ].

broke_v1 := stv-lxm &
[ ORTH <! "broke" !>,
  SEM [ RESTR <! [ RELN r_broke] !> ] ].

cause_v1 := stv-lxm &
[ ORTH <! "cause" !>,
  SEM [ RESTR <! [ RELN r_cause] !> ] ].

cark_v1 := stv-lxm &
[ ORTH <! "cark" !>,
  SEM [ RESTR <! [ RELN r_cark] !> ] ].

chase_v1 := stv-lxm &
[ ORTH <! "chase" !>,
  SEM [ RESTR <! [ RELN r_chase] !> ] ].

close_v1 := stv-lxm &
[ ORTH <! "close" !>,
  SEM [ RESTR <! [ RELN r_close] !> ] ].

consider_v1 := stv-lxm &
[ ORTH <! "consider" !>,
  SEM [ RESTR <! [ RELN r_consider] !> ] ].

consume_v1 := stv-lxm &
[ ORTH <! "consume" !>,
  SEM [ RESTR <! [ RELN r_consume] !> ] ].

cross_v1 := stv-lxm &
[ ORTH <! "cross" !>,
  SEM [ RESTR <! [ RELN r_cross] !> ] ].

cut_v1 := stv-lxm &
[ ORTH <! "cut" !>,
  SEM [ RESTR <! [ RELN r_cut] !> ] ].

determine_v1 := stv-lxm &
[ ORTH <! "determine" !>,
  SEM [ RESTR <! [ RELN r_determine] !> ] ].

devour_v1 := stv-lxm &
[ ORTH <! "devour" !>,
  SEM [ RESTR <! [ RELN r_devour] !> ] ].

deny_v1 := stv-lxm &
[ ORTH <! "deny" !>,
  SEM [ RESTR <! [ RELN r_deny] !> ] ].

discover_v2 := stv-lxm &
[ ORTH <! "discover" !>,
  SEM [ RESTR <! [ RELN r_discover] !> ] ].

display_v1 := stv-lxm &
[ ORTH <! "display" !>,
  SEM [ RESTR <! [ RELN r_display] !> ] ].

draw_v1 := stv-lxm &
[ ORTH <! "draw" !>,
  SEM [ RESTR <! [ RELN r_draw] !> ] ].

dread_v1 := stv-lxm &
[ ORTH <! "dread" !>,
  SEM [ RESTR <! [ RELN r_dread] !> ] ].

drive_v1 := stv-lxm &
[ ORTH <! "drive" !>,
  SEM [ RESTR <! [ RELN r_drive] !> ] ].

eat_v2 := stv-lxm &
[ ORTH <! "eat" !>,
  SEM [ RESTR <! [ RELN r_eat] !> ] ].

elect_v1 := stv-lxm &
[ ORTH <! "elect" !>,
  SEM [ RESTR <! [ RELN r_elect] !> ] ].

enjoy_v1 := stv-lxm &
[ ORTH <! "enjoy" !>,
  SEM [ RESTR <! [ RELN r_enjoy] !> ] ].

examine_v1 := stv-lxm &
[ ORTH <! "examine" !>,
  SEM [ RESTR <! [ RELN r_examine] !> ] ].

exploit_v1 := stv-lxm &
[ ORTH <! "exploit" !>,
  SEM [ RESTR <! [ RELN r_exploit] !> ] ].

find_v1 := stv-lxm &
[ ORTH <! "find" !>,
  SEM [ RESTR <! [ RELN r_find] !> ] ].

finish_v1 := stv-lxm &
[ ORTH <! "finish" !>,
  SEM [ RESTR <! [ RELN r_finish] !> ] ].

fix_v1 := stv-lxm &
[ ORTH <! "fix" !>,
  SEM [ RESTR <! [ RELN r_fix] !> ] ].

fill_v1 := stv-lxm &
[ ORTH <! "fill" !>,
  SEM [ RESTR <! [ RELN r_fill] !> ] ].

fly_v2 := stv-lxm &
[ ORTH <! "fly" !>,
  SEM [ RESTR <! [ RELN r_fly] !> ] ].

follow_v1 := stv-lxm &
[ ORTH <! "follow" !>,
  SEM [ RESTR <! [ RELN r_follow] !> ] ].

gather_v2 := stv-lxm &
[ ORTH <! "gather" !>,
  SEM [ RESTR <! [ RELN r_gather] !> ] ].

get_v1 := stv-lxm &
[ ORTH <! "get" !>,
  SEM [ RESTR <! [ RELN r_get] !> ] ].

halve_v1 := stv-lxm &
[ ORTH <! "halve" !>,
  SEM [ RESTR <! [ RELN r_halve] !> ] ].

hate_v1 := stv-lxm &
[ ORTH <! "hate" !>,
  SEM [ RESTR <! [ RELN r_hate] !> ] ].

have_v2 := stv-lxm &
[ ORTH <! "have" !>,
  SYN [ HEAD [ AUX boolean ] ],
  SEM [ RESTR <! [ RELN r_have] !> ] ].

have_v4 := srv-lxm &
[ ORTH <! "have" !>,
  SEM [ RESTR <! [ RELN r_have] !> ],
  ARG-ST < [ ], [SYN CP-inf] > ].

help_v1 := stv-lxm &
[ ORTH <! "help" !>,
  SEM [ RESTR <! [ RELN r_help] !> ] ].

help_v2 := iv-lxm &
[ ORTH <! "help" !>,
  SEM [ RESTR <! [ RELN r_help] !> ] ].

hit_v1 := stv-lxm &
[ ORTH <! "hit" !>,
  SEM [ RESTR <! [ RELN r_hit] !> ] ].

improve_v1 := stv-lxm &
[ ORTH <! "improve" !>,
  SEM [ RESTR <! [ RELN r_improve] !> ] ].

improve_v2 := iv-lxm &
[ ORTH <! "improve" !>,
  SEM [ RESTR <! [ RELN r_improve] !> ] ].

involve_v1 := stv-lxm &
[ ORTH <! "involve" !>,
  SEM [ RESTR <! [ RELN r_involve] !> ] ].

know_v1 := stv-lxm &
[ ORTH <! "know" !>,
  SEM [ RESTR <! [ RELN r_know] !> ] ].

kick_v1 := stv-lxm &
[ ORTH <! "kick" !>,
  SEM [ RESTR <! [ RELN r_kick] !> ] ].

leave_v2 := stv-lxm &
[ ORTH <! "leave" !>,
  SEM [ RESTR <! [ RELN r_leave] !> ] ].

like_v1 := stv-lxm &
[ ORTH <! "like" !>,
  SEM [ RESTR <! [ RELN r_like] !> ] ].

like_v2 := fiv-lxm &
[ ORTH <! "like" !>,
  SEM  [ RESTR <! [ RELN r_like ] !> ] ].
; See Changes File #7 

like_v3 := scv-lxm &
[ ORTH <! "like" !>,
  SEM  [ RESTR <! [ RELN r_like ] !> ],
  ARG-ST < [ ], [SYN CP-inf] > ].

list_v1 := stv-lxm &
[ ORTH <! "list" !>,
  SEM [ RESTR <! [ RELN r_list] !> ] ].

lock_v1 := stv-lxm &
[ ORTH <! "lock" !>,
  SEM [ RESTR <! [ RELN r_lock] !> ] ].

love_v1 := stv-lxm &
[ ORTH <! "love" !>,
  SEM [ RESTR <! [ RELN r_love] !> ] ].

meet_v1 := stv-lxm &
[ ORTH <! "meet" !>,
  SEM [ RESTR <! [ RELN r_meet] !> ] ].

observe_v1 := stv-lxm &
[ ORTH <! "observe" !>,
  SEM [ RESTR <! [ RELN r_observe] !> ] ].

offend_v1 := stv-lxm &
[ ORTH <! "offend" !>,
  SEM [ RESTR <! [ RELN r_offend] !> ] ].

open_v1 := stv-lxm &
[ ORTH <! "open" !>,
  SEM [ RESTR <! [ RELN r_open] !> ] ].

pat_v2 := stv-lxm &
[ ORTH <! "pat" !>,
  SEM [ RESTR <! [ RELN r_pat] !> ] ].

paint_v1 := stv-lxm &
[ ORTH <! "paint" !>,
  SEM [ RESTR <! [ RELN r_paint] !> ] ].

pet_v1 := stv-lxm &
[ ORTH <! "pet" !>,
  SEM [ RESTR <! [ RELN r_pet] !> ] ].

phone_v1 := stv-lxm &
[ ORTH <! "phone" !>,
  SEM [ RESTR <! [ RELN r_phone] !> ] ].

present_v1 := stv-lxm &
[ ORTH <! "present" !>,
  SEM [ RESTR <! [ RELN r_present] !> ] ].

protect_v1 := stv-lxm &
[ ORTH <! "protect" !>,
  SEM [ RESTR <! [ RELN r_protect] !> ] ].

question_v1 := stv-lxm &
[ ORTH <! "question" !>,
  SEM [ RESTR <! [ RELN r_question] !> ] ].

race_v1 := stv-lxm &
[ ORTH <! "race" !>,
  SEM [ RESTR <! [ RELN r_race] !> ] ].

rake_v1 := stv-lxm &
[ ORTH <! "rake" !>,
  SEM [ RESTR <! [ RELN r_rake] !> ] ].

represent_v1 := stv-lxm &
[ ORTH <! "represent" !>,
  SEM [ RESTR <! [ RELN r_represent] !> ] ].

respect_v1 := stv-lxm &
[ ORTH <! "respect" !>,
  SEM [ RESTR <! [ RELN r_respect] !> ] ].

sing_v2 := stv-lxm &
[ ORTH <! "sing" !>,
  SEM [ RESTR <! [ RELN r_sing] !> ] ].

solve_v1 := stv-lxm &
[ ORTH <! "solve" !>,
  SEM [ RESTR <! [ RELN r_solve] !> ] ].

spot_v1 := stv-lxm &
[ ORTH <! "spot" !>,
  SEM [ RESTR <! [ RELN r_spot] !> ] ].

spray_v1 := stv-lxm &
[ ORTH <! "spray" !>,
  SEM [ RESTR <! [ RELN r_spray] !> ] ].

spray_v2 := ptv-lxm &
[ ORTH <! "spray" !>,
  SEM [ RESTR <! [ RELN r_spray] !> ] ].

suck_v2 := stv-lxm &
[ ORTH <! "suck" !>,
  SEM [ RESTR <! [ RELN r_suck] !> ] ].

supervise_v1 := stv-lxm &
[ ORTH <! "supervise" !>,
  SEM [ RESTR <! [ RELN r_supervise] !> ] ].

take_v2 := stv-lxm &
[ ORTH <! "take" !>,
  SEM [ RESTR <! [ RELN r_take] !> ] ].

taste_v1 := stv-lxm &
[ ORTH <! "taste" !>,
  SEM [ RESTR <! [ RELN r_taste] !> ] ].

target_v1 := stv-lxm &
[ ORTH <! "target" !>,
  SEM [ RESTR <! [ RELN r_target] !> ] ].

tell_v1 := stv-lxm &
[ ORTH <! "tell" !>,
  SEM [ RESTR <! [ RELN r_tell] !> ] ].

trick_v1 := stv-lxm &
[ ORTH <! "trick" !>,
  SEM [ RESTR <! [ RELN r_trick] !> ] ].

turn_v1 := stv-lxm &
[ ORTH <! "turn" !>,
  SEM [ RESTR <! [ RELN r_turn] !> ] ].

upset_v1 := stv-lxm &
[ ORTH <! "upset" !>,
  SEM [ RESTR <! [ RELN r_upset] !> ] ].

visit_v3 := stv-lxm &
[ ORTH <! "visit" !>,
  SEM [ RESTR <! [ RELN r_visit] !> ] ].

watch_v1 := stv-lxm &
[ ORTH <! "watch" !>,
  SEM [ RESTR <! [ RELN r_watch] !> ] ].

win_v2 := stv-lxm &
[ ORTH <! "win" !>,
  SEM [ RESTR <! [ RELN r_win] !> ] ].

bring_v1 := dtv-lxm &
[ ORTH <! "bring" !>,
  SEM [ RESTR <! [ RELN r_bring] !> ] ].

donate_v1 := dtv-lxm &
[ ORTH <! "donate" !>,
  SEM [ RESTR <! [ RELN r_donate] !> ] ].

hand_v1 := dtv-lxm &
[ ORTH <! "hand" !>,
  SEM [ RESTR <! [ RELN r_hand] !> ] ].

give_v1 := dtv-lxm &
[ ORTH <! "give" !>,
  SEM [ RESTR <! [ RELN r_give] !> ] ].

tell_v2 := dtv-lxm &
[ ORTH <! "tell" !>,
  SEM [ RESTR <! [ RELN r_tell] !> ] ].

ask_v4 := ptv-lxm &
[ ORTH <! "ask" !>,
  SEM [ RESTR <! [ RELN r_ask] !> ] ].

bring_v2 := ptv-lxm &
[ ORTH <! "bring" !>,
  SEM [ RESTR <! [ RELN r_bring] !> ] ].

hand_v2 := ptv-lxm &
[ ORTH <! "hand" !>,
  SEM [ RESTR <! [ RELN r_hand] !> ] ].

determine_v2 := dtv-lxm &
[ ORTH <! "determine" !>,
  SEM [ RESTR <! [ RELN r_determine] !> ] ].

donate_v2 := ptv-lxm &
[ ORTH <! "donate" !>,
  SEM [ RESTR <! [ RELN r_donate] !> ] ].

move_v1 := ptv-lxm &
[ ORTH <! "move" !>,
  SEM [ RESTR <! [ RELN r_move] !> ] ].

put_v1 := ptv-lxm &
[ ORTH <! "put" !>,
  SEM [ RESTR <! [ RELN r_put] !> ] ].

tell_v3 := ptv-lxm &
[ ORTH <! "tell" !>,
  SEM [ RESTR <! [ RELN r_tell] !> ] ].

take_v3 := ptv-lxm &
[ ORTH <! "take" !>,
  SEM [ RESTR <! [ RELN r_take] !> ] ].

wrap_v1 := ptv-lxm &
[ ORTH <! "wrap" !>,
  SEM [ RESTR <! [ RELN r_wrap] !> ] ].

give_v2 := ptv-lxm &
[ ORTH <! "give" !>,
  SEM [ RESTR <! [ RELN r_give] !> ] ].

;; The CP-inf seems necessary to block "I continue sleep".
continue_v1 := srv-lxm &
[ ORTH <! "continue" !>,
  SEM [ RESTR <! [ RELN r_continue] !> ],
  ARG-ST < [ ], [SYN CP-inf] > ].

seem_v1 := srv-lxm &
[ ORTH <! "seem" !>,
  SEM [ RESTR <! [ RELN r_seem] !> ],
  ARG-ST < [ ], [SYN CP-inf] > ].

appear_v1 := srv-lxm &
[ ORTH <! "appear" !>,
  SEM [ RESTR <! [ RELN r_appear] !> ],
  ARG-ST < [ ], [SYN CP-inf] > ].

appear_v2 := srv-to-lxm &
[ ORTH <! "appear" !>,
  SEM [ RESTR <! [ RELN r_appear] !> ],
  ARG-ST < [ ], [ ], [SYN CP-inf] > ].

appeal_v1 := ocv-lxm &
[ ORTH <! "appeal" !>,
  SEM  [ RESTR <! [ RELN r_appeal ] !> ],
  ARG-ST < [ ], [SYN [HEAD prep & [FORM f_to] ] ], [ ] > ].

try_v1 := scv-lxm &
[ ORTH <! "try" !>,
  SEM [ RESTR <! [ RELN r_try] !> ],
  ARG-ST < [ ], [SYN CP-inf] > ].

expect_v1 := orv-lxm &
[ ORTH <! "expect" !>,
  SEM [ RESTR <! [ RELN r_expect] !> ] ].

persuade_v1 := ocv-lxm &
[ ORTH <! "persuade" !>,
  SEM [ RESTR <! [ RELN r_persuade] !> ] ].

accusation_n1 := cn-lxm &
[ ORTH <! "accusation" !>,
  SEM [ RESTR <! [ RELN r_accusation] !> ] ].

advantage_n2 := cn-lxm &
[ ORTH <! "advantage" !>,
  SEM [ RESTR <! [ RELN r_advantage] !> ] ].

album_n1 := cn-lxm &
[ ORTH <! "album" !>,
  SEM [ RESTR <! [ RELN r_album] !> ] ].

alps_n1 := const-lxm &
[ ORTH <! "the", "alps" !>,
  SYN [ HEAD noun & [ FORM normal,
		      AGR [ PER 3rd,
			    NUM plur ] ] ],
  SEM [ MODE ref,
	INDEX #1,
	RESTR <! named_pred & [ NAME 'Alps,
				NAMED #1 ] !> ], 
  ARG-ST < > ].

pants_n1 := cn-lxm &
[ ORTH <! "pants" !>,
  SYN [ HEAD [ AGR [ NUM plur ] ] ],
  SEM [ RESTR <! [ RELN r_pants] !> ] ].

andes_n1 := const-lxm &
[ ORTH <! "the", "andes" !>,
  SYN [ HEAD noun & [ FORM normal,
		      AGR [ PER 3rd,
			    NUM plur ] ] ],
  SEM [ MODE ref,
	INDEX #1,
	RESTR <! named_pred & [ NAME 'Andes,
				NAMED #1 ] !> ], 
  ARG-ST < > ].

animal_n1 := cn-lxm &
[ ORTH <! "animal" !>,
  SEM [ RESTR <! [ RELN r_animal] !> ] ].

answer_n1 := cn-lxm &
[ ORTH <! "answer" !>,
  SEM [ RESTR <! [ RELN r_answer] !> ] ].

arrow_n1 := cn-lxm &
[ ORTH <! "arrow" !>,
  SEM [ RESTR <! [ RELN r_arrow] !> ] ].

artist_n1 := cn-lxm &
[ ORTH <! "artist" !>,
  SEM [ RESTR <! [ RELN r_artist] !> ] ].

assignment_n1 := cn-lxm &
[ ORTH <! "assignment" !>,
  SEM [ RESTR <! [ RELN r_assignment] !> ] ].

associate_n1 := cn-lxm &
[ ORTH <! "associate" !>,
  SEM [ RESTR <! [ RELN r_associate] !> ] ].

astronomer_n1 := cn-lxm &
[ ORTH <! "astronomer" !>,
  SEM [ RESTR <! [ RELN r_astronomer] !> ] ].

atom_n1 := cn-lxm &
[ ORTH <! "atom" !>,
  SEM [ RESTR <! [ RELN r_atom] !> ] ].

audience_n1 := cn-lxm &
[ ORTH <! "audience" !>,
  SEM [ RESTR <! [ RELN r_audience] !> ] ].

auxiliary_n1 := cn-lxm &
[ ORTH <! "auxiliary" !>,
  SEM [ RESTR <! [ RELN r_auxiliary] !> ] ].

baby_n1 := cn-lxm &
[ ORTH <! "baby" !>,
  SEM [ RESTR <! [ RELN r_baby] !> ] ].

back_n1 := cn-lxm &
[ ORTH <! "back" !>,
  SEM [ RESTR <! [ RELN r_back] !> ] ].

bark_n1 := cn-lxm &
[ ORTH <! "bark" !>,
  SEM [ RESTR <! [ RELN r_bark] !> ] ].

barn_n1 := cn-lxm &
[ ORTH <! "barn" !>,
  SEM [ RESTR <! [ RELN r_barn] !> ] ].

beer_n1 := cn-lxm &
[ ORTH <! "beer" !>,
  SEM [ RESTR <! [ RELN r_beer] !> ] ].

belief_n1 := cn-lxm &
[ ORTH <! "belief" !>,
  SEM [ RESTR <! [ RELN r_belief] !> ] ].

bicycle_n1 := cn-lxm &
[ ORTH <! "bicycle" !>,
  SEM [ RESTR <! [ RELN r_bicycle] !> ] ].

bird_n1 := cn-lxm &
[ ORTH <! "bird" !>,
  SEM [ RESTR <! [ RELN r_bird] !> ] ].

bit_n1 := cn-lxm &
[ ORTH <! "bit" !>,
  SEM [ RESTR <! [ RELN r_bit] !> ] ].

blanket_n1 := cn-lxm &
[ ORTH <! "blanket" !>,
  SEM [ RESTR <! [ RELN r_blanket] !> ] ].

blues_n1 := cn-lxm &
[ ORTH <! "blues" !>,
  SEM [ RESTR <! [ RELN r_blues] !> ] ].

boat_n1 := cn-lxm &
[ ORTH <! "boat" !>,
  SEM [ RESTR <! [ RELN r_boat] !> ] ].

book_n1 := cn-lxm &
[ ORTH <! "book" !>,
  SEM [ RESTR <! [ RELN r_book] !> ] ].


;; This was put in to account for examples such as "I like the book about Kim"
book_n2 := cn-pp-lxm &
[ ORTH <! "book" !>,
  ARG-ST < [ ], [ SYN [ HEAD prep & [FORM f_about] ] ] >,
  SEM [ RESTR <! [ RELN r_book] !> ] ].

bucket_n1 := cn-lxm &
[ ORTH <! "bucket" !>,
  SEM [ RESTR <! [ RELN r_bucket] !> ] ].

building_n1 := cn-lxm &
[ ORTH <! "building" !>,
  SEM [ RESTR <! [ RELN r_building] !> ] ].

campaign_n1 := cn-lxm &
[ ORTH <! "campaign" !>,
  SEM [ RESTR <! [ RELN r_campaign] !> ] ].

cancer_n1 := cn-lxm &
[ ORTH <! "cancer" !>,
  ARG-ST < [ SYN [ HEAD [COUNT false] ] ] >,
  SEM [ RESTR <! [ RELN r_cancer] !> ] ].

candidate_n1 := cn-lxm &
[ ORTH <! "candidate" !>,
  SEM [ RESTR <! [ RELN r_candidate] !> ] ].

captain_n1 := cn-lxm &
[ ORTH <! "captain" !>,
  SEM [ RESTR <! [ RELN r_captain] !> ] ].

car_n1 := cn-lxm &
[ ORTH <! "car" !>,
  SEM [ RESTR <! [ RELN r_car] !> ] ].

cardinal_n1 := cn-lxm &
[ ORTH <! "cardinal" !>,
  SEM [ RESTR <! [ RELN r_cardinal] !> ] ].

cat_n1 := cn-lxm &
[ ORTH <! "cat" !>,
  SEM [ RESTR <! [ RELN r_cat] !> ] ].

cause_n1 := cn-lxm &
[ ORTH <! "cause" !>,
  SEM [ RESTR <! [ RELN r_cause] !> ] ].

chair_n1 := cn-lxm &
[ ORTH <! "chair" !>,
  SEM [ RESTR <! [ RELN r_chair] !> ] ].

cheetah_n1 := cn-lxm &
[ ORTH <! "cheetah" !>,
  SEM [ RESTR <! [ RELN r_cheetah] !> ] ].

child_n1 := cn-lxm &
[ ORTH <! "child" !>,
  SEM [ RESTR <! [ RELN r_child] !> ] ].

city_n1 := cn-lxm &
[ ORTH <! "city" !>,
  SEM [ RESTR <! [ RELN r_city] !> ] ].

class_n1 := cn-lxm &
[ ORTH <! "class" !>,
  SEM [ RESTR <! [ RELN r_class] !> ] ].

cloud_n1 := cn-lxm &
[ ORTH <! "cloud" !>,
  SEM [ RESTR <! [ RELN r_cloud] !> ] ].

clue_n1 := cn-lxm &
[ ORTH <! "clue" !>,
  SEM [ RESTR <! [ RELN r_clue] !> ] ].

coast_n1 := cn-lxm &
[ ORTH <! "coast" !>,
  SEM [ RESTR <! [ RELN r_coast] !> ] ].

conflict_n1 := cn-lxm &
[ ORTH <! "conflict" !>,
  ARG-ST < [ SYN [ HEAD [COUNT false] ] ] >,
  SEM [ RESTR <! [ RELN r_conflict] !> ] ].

council_n1 := cn-lxm &
[ ORTH <! "council" !>,
  SEM [ RESTR <! [ RELN r_council] !> ] ].

customer_n1 := cn-lxm &
[ ORTH <! "customer" !>,
  SEM [ RESTR <! [ RELN r_customer] !> ] ].

day_n1 := cn-lxm &
[ ORTH <! "day" !>,
  SEM [ RESTR <! [ RELN r_day] !> ] ].

dealer_n1 := cn-lxm &
[ ORTH <! "dealer" !>,
  SEM [ RESTR <! [ RELN r_dealer] !> ] ].

dealership_n1 := cn-lxm &
[ ORTH <! "dealership" !>,
  SEM [ RESTR <! [ RELN r_dealership] !> ] ].

defendant_n1 := cn-lxm &
[ ORTH <! "defendant" !>,
  SEM [ RESTR <! [ RELN r_defendant] !> ] ].

difference_n1 := cn-lxm &
[ ORTH <! "difference" !>,
  SEM [ RESTR <! [ RELN r_difference] !> ] ].

dinner_n1 := cn-lxm &
[ ORTH <! "dinner" !>,
  SEM [ RESTR <! [ RELN r_dinner] !> ] ].

disease_n1 := cn-lxm &
[ ORTH <! "disease" !>,
  SEM [ RESTR <! [ RELN r_disease] !> ] ].

doctor_n1 := cn-lxm &
[ ORTH <! "doctor" !>,
  SEM [ RESTR <! [ RELN r_doctor] !> ] ].

dog_n1 := cn-lxm &
[ ORTH <! "dog" !>,
  SEM [ RESTR <! [ RELN r_dog] !> ] ].

drug_n1 := cn-lxm &
[ ORTH <! "drug" !>,
  SEM [ RESTR <! [ RELN r_drug] !> ] ].

duck_n1 := cn-lxm &
[ ORTH <! "duck" !>,
  SEM [ RESTR <! [ RELN r_duck-noun] !> ] ].

earthquake_n1 := cn-lxm &
[ ORTH <! "earthquake" !>,
  SEM [ RESTR <! [ RELN r_earthquake] !> ] ].

east_n1 := cn-lxm &
[ ORTH <! "east" !>,
  SEM [ RESTR <! [ RELN r_east] !> ] ].

exam_n1 := cn-lxm &
[ ORTH <! "exam" !>,
  SEM [ RESTR <! [ RELN r_exam] !> ] ].

evidence_n1 := cn-lxm &
[ ORTH <! "evidence" !>,
  SEM [ RESTR <! [ RELN r_evidence] !> ] ].

fbi_n1 := cn-lxm &
[ ORTH <! "fbi" !>,
  SEM [ RESTR <! [ RELN r_fbi] !> ] ].

felon_n1 := cn-lxm &
[ ORTH <! "felon" !>,
  SEM [ RESTR <! [ RELN r_felon] !> ] ].

fever_n1 := cn-lxm &
[ ORTH <! "fever" !>,
  SEM [ RESTR <! [ RELN r_fever] !> ] ].

fit_n1 := cn-lxm &
[ ORTH <! "fit" !>,
  SEM [ RESTR <! [ RELN r_fit-noun] !> ] ].

flower_n1 := cn-lxm &
[ ORTH <! "flower" !>,
  SEM [ RESTR <! [ RELN r_flower] !> ] ].

flour_n1 := cn-lxm &
[ ORTH <! "flour" !>,
  SEM [ RESTR <! [ RELN r_flour] !> ] ].

food_n1 := cn-lxm &
[ ORTH <! "food" !>,
  SEM [ RESTR <! [ RELN r_food] !> ] ].

fool_n1 := cn-lxm &
[ ORTH <! "fool" !>,
  SEM [ RESTR <! [ RELN r_fool] !> ] ].

form_n1 := cn-lxm &
[ ORTH <! "form" !>,
  SEM [ RESTR <! [ RELN r_form] !> ] ].

friend_n1 := cn-lxm &
[ ORTH <! "friend" !>,
  SEM [ RESTR <! [ RELN r_friend] !> ] ].

;; Do we want this going through the 3sing-noun rule?
furniture_n1 := cn-lxm &
[ ORTH <! "furniture" !>,
  ARG-ST < [ SYN [ HEAD [COUNT false] ] ] >,
  SEM [ RESTR <! [ RELN r_furniture] !> ] ].

game_n1 := cn-lxm &
[ ORTH <! "game" !>,
  SEM [ RESTR <! [ RELN r_game] !> ] ].

garden_n1 := cn-lxm &
[ ORTH <! "garden" !>,
  SEM [ RESTR <! [ RELN r_garden] !> ] ].

garlic_n1 := cn-lxm &
[ ORTH <! "garlic" !>,
  ARG-ST < [ SYN [ HEAD [COUNT false] ] ] >,
  SEM [ RESTR <! [ RELN r_garlic] !> ] ].

gas_n1 := cn-lxm &
[ ORTH <! "gas" !>,
  SEM [ RESTR <! [ RELN r_gas] !> ] ].

gathering_n1 := cn-lxm &
[ ORTH <! "gathering" !>,
  SEM [ RESTR <! [ RELN r_gathering] !> ] ].

german_n1 := cn-lxm &
[ ORTH <! "german" !>,
  SEM [ RESTR <! [ RELN r_german] !> ] ].

grandmother_n1 := cn-lxm &
[ ORTH <! "grandmother" !>,
  SEM [ RESTR <! [ RELN r_grandmother] !> ] ].

guest_n1 := cn-lxm &
[ ORTH <! "guest" !>,
  SEM [ RESTR <! [ RELN r_guest] !> ] ].

hand_3 := cn-lxm &
[ ORTH <! "hand" !>,
  SEM [ RESTR <! [ RELN r_hand] !> ] ].

head_n1 := cn-lxm &
[ ORTH <! "head" !>,
  SEM [ RESTR <! [ RELN r_head] !> ] ].

horse_n1 := cn-lxm &
[ ORTH <! "horse" !>,
  SEM [ RESTR <! [ RELN r_horse] !> ] ].

hospital_n1 := cn-lxm &
[ ORTH <! "hospital" !>,
  SEM [ RESTR <! [ RELN r_hospital] !> ] ].

ice_cream_n1 := cn-lxm &
[ ORTH <! "ice", "cream" !>,
  ARG-ST < [ SYN [ HEAD [COUNT false] ] ] >,
  SEM [ RESTR <! [ RELN r_ice_cream] !> ] ].

idea_n1 := cn-lxm &
[ ORTH <! "idea" !>,
  SEM [ RESTR <! [ RELN r_idea] !> ] ].

improvement_n1 := cn-lxm &
[ ORTH <! "improvement" !>,
  SEM [ RESTR <! [ RELN r_improvement] !> ] ].

innocent_n1 := cn-lxm &
[ ORTH <! "innocent" !>,
  SEM [ RESTR <! [ RELN r_innocent] !> ] ].

judge_n1 := cn-lxm &
[ ORTH <! "judge" !>,
  SEM [ RESTR <! [ RELN r_judge] !> ] ].

jury_n1 := cn-lxm &
[ ORTH <! "jury" !>,
  SEM [ RESTR <! [ RELN r_jury] !> ] ].

kind_n1 := cn-lxm &
[ ORTH <! "kind" !>,
  SEM [ RESTR <! [ RELN r_kind] !> ] ].

language_n1 := cn-lxm &
[ ORTH <! "language" !>,
  SEM [ RESTR <! [ RELN r_language] !> ] ].

leaf_n1 := cn-lxm &
[ ORTH <! "leaf" !>,
  SEM [ RESTR <! [ RELN r_leaf] !> ] ].

leg_n1 := cn-lxm &
[ ORTH <! "leg" !>,
  SEM [ RESTR <! [ RELN r_leg] !> ] ].

letter_n1 := cn-lxm &
[ ORTH <! "letter" !>,
  SEM [ RESTR <! [ RELN r_letter] !> ] ].

letter_n2 := cn-pp-lxm &
[ ORTH <! "letter" !>,
  ARG-ST < [ ], [SYN [ HEAD prep & [ FORM f_to ] ] ] >,
  SEM [ RESTR <! [ RELN r_letter] !> ] ].

letter_n3 := cn-pp-lxm &
[ ORTH <! "letter" !>,
  ARG-ST < [ ], [SYN [ HEAD prep & [ FORM f_for ] ] ] >,
  SEM [ RESTR <! [ RELN r_letter] !> ] ].

library_n1 := cn-lxm &
[ ORTH <! "library" !>,
  SEM [ RESTR <! [ RELN r_library] !> ] ].

life_n1 := cn-lxm &
[ ORTH <! "life" !>,
  SEM [ RESTR <! [ RELN r_life] !> ] ].

light_n1 := cn-lxm &
[ ORTH <! "light" !>,
  SEM [ RESTR <! [ RELN r_light] !> ] ].

linguist_n1 := cn-lxm &
[ ORTH <! "linguist" !>,
  SEM [ RESTR <! [ RELN r_linguist] !> ] ].

list_n1 := cn-lxm &
[ ORTH <! "list" !>,
  SEM [ RESTR <! [ RELN r_list] !> ] ].

logic_n1 := cn-lxm &
[ ORTH <! "logic" !>,
  ARG-ST < [ SYN [ HEAD [COUNT false] ] ] >,
  SEM [ RESTR <! [ RELN r_logic] !> ] ].

age_n1 := cn-lxm &
[ ORTH <! "age" !>,
  ARG-ST < [ SYN [ HEAD [COUNT false] ] ] >,
  SEM [ RESTR <! [ RELN r_age-noun] !> ] ].

lunch_n1 := cn-lxm &
[ ORTH <! "lunch" !>,
  SEM [ RESTR <! [ RELN r_lunch] !> ] ].

mailbox_n1 := cn-lxm &
[ ORTH <! "mailbox" !>,
  SEM [ RESTR <! [ RELN r_mailbox] !> ] ].

martini_n1 := cn-lxm &
[ ORTH <! "martini" !>,
  SEM [ RESTR <! [ RELN r_martini] !> ] ].

master_n1 := cn-lxm &
[ ORTH <! "master" !>,
  SEM [ RESTR <! [ RELN r_master] !> ] ].

meal_n1 := cn-lxm &
[ ORTH <! "meal" !>,
  SEM [ RESTR <! [ RELN r_meal] !> ] ].

meeting_n1 := cn-lxm &
[ ORTH <! "meeting" !>,
  SEM [ RESTR <! [ RELN r_meeting] !> ] ].

man_n1 := cn-lxm &
[ ORTH <! "man" !>,
  SEM [ RESTR <! [ RELN r_man] !> ] ].

monster_n1 := cn-lxm &
[ ORTH <! "monster" !>,
  SEM [ RESTR <! [ RELN r_monster] !> ] ].

mothen_n1 := cn-lxm &
[ ORTH <! "mothen" !>,
  SEM [ RESTR <! [ RELN r_mothen] !> ] ].

movie_n1 := cn-lxm &
[ ORTH <! "movie" !>,
  SEM [ RESTR <! [ RELN r_movie] !> ] ].

museum_n1 := cn-lxm &
[ ORTH <! "museum" !>,
  SEM [ RESTR <! [ RELN r_museum] !> ] ].

napkin_n1 := cn-lxm &
[ ORTH <! "napkin" !>,
  SEM [ RESTR <! [ RELN r_napkin] !> ] ].

neighborhood_n1 := cn-lxm &
[ ORTH <! "neighborhood" !>,
  SEM [ RESTR <! [ RELN r_neighborhood] !> ] ].

nephew_n1 := cn-lxm &
[ ORTH <! "nephew" !>,
  SEM [ RESTR <! [ RELN r_nephew] !> ] ].

night_n1 := cn-lxm &
[ ORTH <! "night" !>,
  SEM [ RESTR <! [ RELN r_night] !> ] ].

note_n1 := cn-lxm &
[ ORTH <! "note" !>,
  SEM [ RESTR <! [ RELN r_note] !> ] ].

opportunity_n1 := cn-lxm &
[ ORTH <! "opportunity" !>,
  SEM [ RESTR <! [ RELN r_opportunity] !> ] ].

painting_n1 := cn-lxm &
[ ORTH <! "painting" !>,
  SEM [ RESTR <! [ RELN r_painting] !> ] ].

park_n1 := cn-lxm &
[ ORTH <! "park" !>,
  SEM [ RESTR <! [ RELN r_park] !> ] ].

participant_n1 := cn-lxm &
[ ORTH <! "participant" !>,
  SEM [ RESTR <! [ RELN r_participant] !> ] ].

past_n1 := cn-lxm &
[ ORTH <! "past" !>,
  SEM [ RESTR <! [ RELN r_past] !> ] ].

patient_n1 := cn-lxm &
[ ORTH <! "patient" !>,
  SEM [ RESTR <! [ RELN r_patient] !> ] ].

pencil_n1 := cn-lxm &
[ ORTH <! "pencil" !>,
  SEM [ RESTR <! [ RELN r_pencil] !> ] ].

person_n1 := cn-lxm &
[ ORTH <! "person" !>,
  SEM [ RESTR <! [ RELN r_person] !> ] ].

phone_n1 := cn-lxm &
[ ORTH <! "phone" !>,
  SEM [ RESTR <! [ RELN r_phone] !> ] ].

picture_n1 := cn-lxm &
[ ORTH <! "picture" !>,
  SEM [ RESTR <! [ RELN r_picture] !> ] ].

picture_n2 := cn-pp-lxm &
[ ORTH <! "picture" !>,
  ARG-ST < [ ], [ SYN [ HEAD prep & [FORM f_of] ] ] >,
  SEM [ RESTR <! [ RELN r_picture] !> ] ].

police_n1 := cn-lxm &
[ ORTH <! "police" !>,
  SEM [ RESTR <! [ RELN r_police] !> ] ].

present_n1 := cn-lxm &
[ ORTH <! "present" !>,
  SEM [ RESTR <! [ RELN r_present] !> ] ].

price_n1 := cn-lxm &
[ ORTH <! "price" !>,
  SEM [ RESTR <! [ RELN r_price] !> ] ].

problem_n1 := cn-lxm &
[ ORTH <! "problem" !>,
  SEM [ RESTR <! [ RELN r_problem] !> ] ].

protester_n1 := cn-lxm &
[ ORTH <! "protester" !>,
  SEM [ RESTR <! [ RELN r_protester] !> ] ].

question_n1 := cn-lxm &
[ ORTH <! "question" !>,
  SEM [ RESTR <! [ RELN r_question] !> ] ].

race_n1 := cn-lxm &
[ ORTH <! "race" !>,
  SEM [ RESTR <! [ RELN r_race] !> ] ].

rain_n1 := cn-lxm &
[ ORTH <! "rain" !>,
  SEM [ RESTR <! [ RELN r_rain] !> ] ].

rake_n1 := cn-lxm &
[ ORTH <! "rake" !>,
  SEM [ RESTR <! [ RELN r_rake] !> ] ].

ravioli_n1 := cn-lxm &
[ ORTH <! "ravioli" !>,
  SEM [ RESTR <! [ RELN r_ravioli] !> ] ].

relative_n1 := cn-lxm &
[ ORTH <! "relative" !>,
  SEM [ RESTR <! [ RELN r_relative] !> ] ].

riot_n1 := cn-lxm &
[ ORTH <! "riot" !>,
  SEM [ RESTR <! [ RELN r_riot] !> ] ].

river_n1 := cn-lxm &
[ ORTH <! "river" !>,
  SEM [ RESTR <! [ RELN r_river] !> ] ].

roof_n1 := cn-lxm &
[ ORTH <! "roof" !>,
  SEM [ RESTR <! [ RELN r_roof] !> ] ].

room_n1 := cn-lxm &
[ ORTH <! "room" !>,
  SEM [ RESTR <! [ RELN r_room] !> ] ].

run_n1 := cn-lxm &
[ ORTH <! "run" !>,
  SEM [ RESTR <! [ RELN r_run] !> ] ].

scream_n1 := cn-lxm &
[ ORTH <! "scream" !>,
  SEM [ RESTR <! [ RELN r_scream] !> ] ].

seat_n1 := cn-lxm &
[ ORTH <! "seat" !>,
  SEM [ RESTR <! [ RELN r_seat] !> ] ].

senora_n1 := cn-lxm &
[ ORTH <! "senora" !>,
  SEM [ RESTR <! [ RELN r_senora] !> ] ].

sentence_n1 := cn-lxm &
[ ORTH <! "sentence" !>,
  SEM [ RESTR <! [ RELN r_sentence] !> ] ].

series_n1 := cn-lxm &
[ ORTH <! "series" !>,
  SEM [ RESTR <! [ RELN r_series] !> ] ].

shepherd_n1 := cn-lxm &
[ ORTH <! "shepherd" !>,
  SEM [ RESTR <! [ RELN r_shepherd] !> ] ].

song_n1 := cn-lxm &
[ ORTH <! "song" !>,
  SEM [ RESTR <! [ RELN r_song] !> ] ].

skate_n1 := cn-lxm &
[ ORTH <! "skate" !>,
  SEM [ RESTR <! [ RELN r_skate] !> ] ].

sneeze_n1 := cn-lxm &
[ ORTH <! "sneeze" !>,
  SEM [ RESTR <! [ RELN r_sneeze] !> ] ].

spot_n1 := cn-lxm &
[ ORTH <! "spot" !>,
  SEM [ RESTR <! [ RELN r_spot] !> ] ].

storm_n1 := cn-lxm &
[ ORTH <! "storm" !>,
  SEM [ RESTR <! [ RELN r_storm] !> ] ].

student_n1 := cn-lxm &
[ ORTH <! "student" !>,
  SEM [ RESTR <! [ RELN r_student] !> ] ].

table_n1 := cn-lxm &
[ ORTH <! "table" !>,
  SEM [ RESTR <! [ RELN r_table] !> ] ].

tab_n1 := cn-lxm &
[ ORTH <! "tab" !>,
  SEM [ RESTR <! [ RELN r_tabs] !> ] ].

tail_n1 := cn-lxm &
[ ORTH <! "tail" !>,
  SEM [ RESTR <! [ RELN r_tail] !> ] ].

tale_n1 := cn-lxm &
[ ORTH <! "tale" !>,
  SEM [ RESTR <! [ RELN r_tale] !> ] ].

talk_3 := cn-lxm &
[ ORTH <! "talk" !>,
  SEM [ RESTR <! [ RELN r_talk] !> ] ].

teacher_n1 := cn-lxm &
[ ORTH <! "teacher" !>,
  SEM [ RESTR <! [ RELN r_teacher] !> ] ].

team_n1 := cn-lxm &
[ ORTH <! "team" !>,
  SEM [ RESTR <! [ RELN r_team] !> ] ].

telescope_n1 := cn-lxm &
[ ORTH <! "telescope" !>,
  SEM [ RESTR <! [ RELN r_telescope] !> ] ].

television_n1 := cn-lxm &
[ ORTH <! "television" !>,
  SEM [ RESTR <! [ RELN r_television] !> ] ].

theorem_n1 := cn-lxm &
[ ORTH <! "theorem" !>,
  SEM [ RESTR <! [ RELN r_theorem] !> ] ].

thief_n1 := cn-lxm &
[ ORTH <! "thief" !>,
  SEM [ RESTR <! [ RELN r_thief] !> ] ].

thing_n1 := cn-lxm &
[ ORTH <! "thing" !>,
  SEM [ RESTR <! [ RELN r_thing] !> ] ].

thrill_n1 := cn-lxm &
[ ORTH <! "thrill" !>,
  SEM [ RESTR <! [ RELN r_thrill] !> ] ].

time_n1 := cn-lxm &
[ ORTH <! "time" !>,
  SEM [ RESTR <! [ RELN r_time] !> ] ].

town_n1 := cn-lxm &
[ ORTH <! "town" !>,
  SEM [ RESTR <! [ RELN r_town] !> ] ].

toy_n1 := cn-lxm &
[ ORTH <! "toy" !>,
  SEM [ RESTR <! [ RELN r_toy] !> ] ].

trash_n1 := cn-lxm &
[ ORTH <! "trash" !>,
  SEM [ RESTR <! [ RELN r_trash] !> ] ].

trick_n1 := cn-lxm &
[ ORTH <! "trick" !>,
  SEM [ RESTR <! [ RELN r_trick] !> ] ].

trouble_n1 := cn-lxm &
[ ORTH <! "trouble" !>,
  SEM [ RESTR <! [ RELN r_trouble] !> ] ].

tug_n1 := cn-lxm &
[ ORTH <! "tug" !>,
  SEM [ RESTR <! [ RELN r_tug] !> ] ].

tv_n1 := cn-lxm &
[ ORTH <! "tv" !>,
  SEM [ RESTR <! [ RELN r_tv] !> ] ].

twin_n1 := cn-lxm &
[ ORTH <! "twin" !>,
  SEM [ RESTR <! [ RELN r_twin] !> ] ].

type_n1 := cn-lxm &
[ ORTH <! "type" !>,
  SEM [ RESTR <! [ RELN r_type] !> ] ].

umbrella_n1 := cn-lxm &
[ ORTH <! "umbrella" !>,
  SEM [ RESTR <! [ RELN r_umbrella] !> ] ].

unicorn_n1 := cn-lxm &
[ ORTH <! "unicorn" !>,
  SEM [ RESTR <! [ RELN r_unicorn] !> ] ].

verb_n1 := cn-lxm &
[ ORTH <! "verb" !>,
  SEM [ RESTR <! [ RELN r_verb] !> ] ].

vote_3 := cn-lxm &
[ ORTH <! "vote" !>,
  SEM [ RESTR <! [ RELN r_vote] !> ] ].

voter_n1 := cn-lxm &
[ ORTH <! "voter" !>,
  SEM [ RESTR <! [ RELN r_voter] !> ] ].

water_n1 := cn-lxm &
[ ORTH <! "water" !>,
  SEM [ RESTR <! [ RELN r_water] !> ] ].

window_n1 := cn-lxm &
[ ORTH <! "window" !>,
  SEM [ RESTR <! [ RELN r_window] !> ] ].

wine_n1 := cn-lxm &
[ ORTH <! "wine" !>,
  SEM [ RESTR <! [ RELN r_wine] !> ] ].

witness_n1 := cn-lxm &
[ ORTH <! "witness" !>,
  SEM [ RESTR <! [ RELN r_witness] !> ] ].

woman_n1 := cn-lxm &
[ ORTH <! "woman" !>,
  SEM [ RESTR <! [ RELN r_woman] !> ] ].

work_n1 := cn-lxm &
[ ORTH <! "work" !>,
  SEM [ RESTR <! [ RELN r_work] !> ] ].

worm_n1 := cn-lxm &
[ ORTH <! "worm" !>,
  SEM [ RESTR <! [ RELN r_worm] !> ] ].

Rome_n1 := pn-lxm &
[ ORTH <! "Rome" !>,
  SEM [ RESTR <! [ NAME 'Rome ] !> ] ].

Milan_n1 := pn-lxm &
[ ORTH <! "Milan" !>,
  SEM [ RESTR <! [ NAME 'Milan ] !> ] ].

Moscow_n1 := pn-lxm &
[ ORTH <! "Moscow" !>,
  SEM [ RESTR <! [ NAME 'Moscow ] !> ] ].

Romania_n1 := pn-lxm &
[ ORTH <! "Romania" !>,
  SEM [ RESTR <! [ NAME 'Romania ] !> ] ].
