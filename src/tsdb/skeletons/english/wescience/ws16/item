10970010@unknown@formal@none@1@S@<article>WordPerfect</article>@1@1@@oe@30-11-2008
10970020@unknown@formal@none@1@S@'''WordPerfect''' is a [[proprietary software|proprietary]] [[word processing]] application.@1@8@@oe@30-11-2008
10970030@unknown@formal@none@1@S@At the height of its popularity in the late 1980s and early 1990s, it was the ''[[de facto]]'' standard word processor, but has since been eclipsed in sales by [[Microsoft Office Word|Microsoft Word]].@1@33@@oe@30-11-2008
10970040@unknown@formal@none@1@S@Although the [[MS-DOS]] and [[Microsoft Windows]] versions are best known, its popularity was based on the fact that it had been available for a wide variety of computers and operating systems, including [[Mac OS]], [[Linux]], the [[Apple IIe]], a separate version for the [[Apple IIgs]], most popular versions of [[Unix]], [[OpenVMS|VMS]], [[Data General]], [[System/370]], [[AmigaOS]], [[Atari ST]], [[OS/2]], and [[Nextstep|NeXTSTEP]].@1@60@@oe@30-11-2008
10970050@unknown@formal@none@1@S@==WordPerfect for DOS==@1@3@@oe@30-11-2008
10970060@unknown@formal@none@1@S@WordPerfect was originally produced by [[Bruce Bastian]] and Dr. [[Alan Ashton (executive)|Alan Ashton]] who founded Satellite Software International, Inc. of [[Orem]], [[Utah]], which later renamed itself WordPerfect Corporation.@1@28@@oe@30-11-2008
10970070@unknown@formal@none@1@S@Originally written for [[Data General]] minicomputers, in 1982 the developers ported the program to the IBM PC as WordPerfect 2.20, continuing the version numbering of the Data General series.@1@29@@oe@30-11-2008
10970080@unknown@formal@none@1@S@The program's popularity took off with the introduction of WordPerfect 4.2 in 1986, with automatic paragraph numbering (important to the law office market), and the splitting of a lengthy footnote and its partial overflow to the bottom of the next page, as if it had been professionally typeset (valuable to both the law office and academic markets).@1@57@@oe@30-11-2008
10970090@unknown@formal@none@1@S@WordPerfect 4.2 became the first program to overtake the original microcomputer word processor market leader, [[WordStar]], in a major application category on the [[DOS]] platform.@1@25@@oe@30-11-2008
10970100@unknown@formal@none@1@S@In 1989, WordPerfect Corporation released the program's most successful version ever, WordPerfect 5.1 for DOS, which was the first version to include [[Macintosh]] style pull-down menus to supplement the traditional F-key combinations, as well as support for tables, a spreadsheet-like feature.@1@41@@oe@30-11-2008
10970110@unknown@formal@none@1@S@The data format used by WordPerfect 5.1 was, for years, the most portable format in the world.@1@17@@oe@30-11-2008
10970120@unknown@formal@none@1@S@All word processors could read (and convert) that format.@1@9@@oe@30-11-2008
10970130@unknown@formal@none@1@S@Many conferences and magazines insisted that you shipped your documents in 5.1 format.@1@13@@oe@30-11-2008
10970140@unknown@formal@none@1@S@Unlike previous DOS versions, WordPerfect 6.0 for DOS could switch between its traditional text-based editing mode and a graphical editing mode that [[WYSIWYG|showed the document as it would print out]], including fonts and text effects like bold, underline, and italics.@1@40@@oe@30-11-2008
10970150@unknown@formal@none@1@S@The previous text-based versions used different colors or text color inversions to indicate various markups, and (starting with version 5.0) used a graphic mode only for an uneditable print preview that used generic fonts rather than the actual fonts that appeared on the printed page.@1@45@@oe@30-11-2008
10970160@unknown@formal@none@1@S@===Key characteristics===@1@2@@oe@30-11-2008
10970170@unknown@formal@none@1@S@To this day, WordPerfect's three major characteristics that have differentiated from other market-leading word processors are its streaming code architecture, its Reveal Codes feature, and its unusually user-friendly macro/scripting language, PerfectScript.@1@31@@oe@30-11-2008
10970180@unknown@formal@none@1@S@====Streaming code architecture====@1@3@@oe@30-11-2008
10970190@unknown@formal@none@1@S@A key to WordPerfect's design is its streaming code architecture that parallels the formatting features of [[HTML]] and [[Cascading Style Sheets]].@1@21@@oe@30-11-2008
10970200@unknown@formal@none@1@S@Documents are created much the same way that raw HTML pages are written, with text interspersed by tags that trigger treatment of data until a corresponding closing tag is encountered, at which point the settings active to the point of the opening tag resume control.@1@45@@oe@30-11-2008
10970210@unknown@formal@none@1@S@As with HTML, tags can be nested.@1@7@@oe@30-11-2008
10970220@unknown@formal@none@1@S@Some data structures are treated as objects within the stream as with HTML's treatment of graphic images, e.g., footnotes and styles, but the bulk of a WordPerfect document's data and formatting codes appear as a single continuous stream.@1@38@@oe@30-11-2008
10970230@unknown@formal@none@1@S@====Styles and style libraries====@1@4@@oe@30-11-2008
10970240@unknown@formal@none@1@S@The addition of styles and style libraries in WP 5.0 provided greatly increased power and flexibility in formatting documents, while maintaining the streaming-code architecture of earlier versions.@1@27@@oe@30-11-2008
10970250@unknown@formal@none@1@S@Prior to that, WordPerfect's only use of styles (a particular type of programming object) is the Opening Style, which contains the default settings for a document.@1@26@@oe@30-11-2008
10970260@unknown@formal@none@1@S@====Reveal codes====@1@2@@oe@30-11-2008
10970270@unknown@formal@none@1@S@The Reveal Codes feature is a second editing screen that can be toggled open and closed at the bottom of the main editing screen.@1@24@@oe@30-11-2008
10970280@unknown@formal@none@1@S@Text is displayed in Reveal Codes interspersed with tags and the occasional objects, with the tags and objects represented by named tokens.@1@22@@oe@30-11-2008
10970290@unknown@formal@none@1@S@The scheme makes it far easier to untangle coding messes than with styles-based word processors, and object tokens can be clicked with a pointing device to directly open the configuration editor for the particular object type, e.g. clicking on a style token brings up the style editor with the particular style type displayed.@1@53@@oe@30-11-2008
10970300@unknown@formal@none@1@S@WordPerfect users forced to change word processors by employers frequently complain on WordPerfect online forums that they are lost without Reveal Codes.@1@22@@oe@30-11-2008
10970310@unknown@formal@none@1@S@Because of their style dependencies, efforts to create the equivalent of Reveal Codes in other word processors have produced disappointing results.@1@21@@oe@30-11-2008
10970320@unknown@formal@none@1@S@Note that WordPerfect had this feature already in its DOS incarnations: it could be brought forward by pressing the keys 'Alt' and 'F3' together.@1@24@@oe@30-11-2008
10970330@unknown@formal@none@1@S@====Macro languages====@1@2@@oe@30-11-2008
10970340@unknown@formal@none@1@S@WordPerfect for DOS was notable for its Alt-keystroke macro facility, which was expanded with the addition of macro libraries in WP 5.0 that also allowed for Ctrl-keystroke macros, and remapping of any key as a macro.@1@36@@oe@30-11-2008
10970350@unknown@formal@none@1@S@This enabled any sequence of keystrokes to be recorded, saved, edited, and recalled.@1@13@@oe@30-11-2008
10970360@unknown@formal@none@1@S@Macros could examine system data, make decisions, be chained together, and operate recursively until a defined 'stop' condition was met.@1@20@@oe@30-11-2008
10970370@unknown@formal@none@1@S@This capability provided an amazingly powerful way to rearrange data and formatting codes within a document, where the same sequence of actions needed to be performed repetitively e.g. for tabular data.@1@31@@oe@30-11-2008
10970380@unknown@formal@none@1@S@Macros can also be edited using WordPerfect Program Editor.@1@9@@oe@30-11-2008
10970390@unknown@formal@none@1@S@Unfortunately, this facility could not easily be ported to the subsequent Windows versions.@1@13@@oe@30-11-2008
10970400@unknown@formal@none@1@S@A new and even more powerful interpreted token-based macro recording and scripting language was introduced for both DOS and Windows 6.0 versions, and that became the basis of the language named PerfectScript in later versions.@1@35@@oe@30-11-2008
10970410@unknown@formal@none@1@S@PerfectScript has remained the mainstay scripting language for WordPerfect users ever since.@1@12@@oe@30-11-2008
10970420@unknown@formal@none@1@S@PerfectScript was specifically designed to be user-friendly, thus avoiding far less user-friendly methods of scripting languages implemented on other word processing programs that require education in advanced programming concepts such as Object Oriented Programming in order to produce useful yet sophisticated and powerful macros.@1@44@@oe@30-11-2008
10970430@unknown@formal@none@1@S@===Function keys===@1@2@@oe@30-11-2008
10970440@unknown@formal@none@1@S@Like its mid-1980s competitor, [[MultiMate]], WordPerfect used almost every possible combination of [[function key]]s with Ctrl, Alt, and Shift modifiers.@1@20@@oe@30-11-2008
10970450@unknown@formal@none@1@S@([[WordPerfect 4.1|See example help screen on this page]].)@1@8@@oe@30-11-2008
10970460@unknown@formal@none@1@S@This was in contrast to [[WordStar]], which used only Ctrl, in conjunction with traditional typing keys.@1@16@@oe@30-11-2008
10970470@unknown@formal@none@1@S@Many people still know and use the [[function key]] combinations from the DOS version, which were originally designed for Data General Dasher VDUs that supported 2 groups of 5 plain, shift, control, and control shift function keys.@1@37@@oe@30-11-2008
10970480@unknown@formal@none@1@S@This was translated to the layout of the 1981 [[IBM PC keyboard]], with two columns of function keys at the left end of the keyboard, but worked even better with the 1984 PC AT keyboard with 3 groups of 4 function keys across the top of the keyboard.@1@48@@oe@30-11-2008
10970490@unknown@formal@none@1@S@With the 1981 PC keyboard, the Tab key and the related F4 (''Indent'') functions were adjacent.@1@16@@oe@30-11-2008
10970500@unknown@formal@none@1@S@This plethora of keystroke possibilities, combined with the developers' wish to keep the user interface free of "clutter" such as on-screen menus, made it necessary for most users to use a keyboard template showing each function.@1@36@@oe@30-11-2008
10970510@unknown@formal@none@1@S@Infamously, WordPerfect used F3 instead of F1 for ''Help'', F1 instead of Esc for ''Cancel'', and Esc for ''Repeat'' (though a configuration option in later versions allowed these functions to be rotated to locations that later became more standard).@1@39@@oe@30-11-2008
10970520@unknown@formal@none@1@S@===Printer drivers===@1@2@@oe@30-11-2008
10970530@unknown@formal@none@1@S@WordPerfect for DOS shipped with an impressive array of printer drivers - a feature that played an important role in its adoption - and also shipped with a [[printer driver]] editor called PTR, which features a flexible [[Macro (computer science)|macro language]] and allows technically-inclined users to customize and create printer drivers.@1@51@@oe@30-11-2008
10970540@unknown@formal@none@1@S@Internally, WordPerfect used an extensive WordPerfect [[character set]] as its [[internal code]].@1@12@@oe@30-11-2008
10970550@unknown@formal@none@1@S@The precise meaning of the characters, although clearly defined and documented, can be overridden in its customizable printer drivers with PTR.@1@21@@oe@30-11-2008
10970560@unknown@formal@none@1@S@The relationship between different type faces and styles, and between them and the various sections in the WordPerfect character set, were also described in the printer drivers and can be customized through PTR.@1@33@@oe@30-11-2008
10970570@unknown@formal@none@1@S@===WordPerfect Library/Office===@1@2@@oe@30-11-2008
10970580@unknown@formal@none@1@S@WordPerfect Corporation produced a variety of ancillary and spin-off products.@1@10@@oe@30-11-2008
10970590@unknown@formal@none@1@S@WordPerfect Library (introduced in 1986 and later renamed WordPerfect Office) was a package of network and stand-alone utilities for use with WordPerfect, primarily developed for offices running [[Novell NetWare]].@1@29@@oe@30-11-2008
10970600@unknown@formal@none@1@S@WordPerfect Library/Office included the DOS antecedents of what is now known as [[Novell GroupWise]], a shareable package of contact management, calendaring, and related word processing utilities.@1@26@@oe@30-11-2008
10970610@unknown@formal@none@1@S@WordPerfect Library/Office a brand name later revived by Corel after it acquired ownership of WordPerfect and other programs still bundled under that product name as of this writing – included amongst other utilities a local area network (LAN) email facility and was the most popular such package in its day.@1@50@@oe@30-11-2008
10970620@unknown@formal@none@1@S@====WordPerfect Shell====@1@2@@oe@30-11-2008
10970630@unknown@formal@none@1@S@The Library/Office bundle also included a noteworthy task-switching program that ran as a shell atop DOS, branded as WordPerfect Shell.@1@20@@oe@30-11-2008
10970640@unknown@formal@none@1@S@Task-switchers were a popular application type for the DOS operating system because of its lack of multi-tasking, making it impractical to have many applications running at once.@1@27@@oe@30-11-2008
10970650@unknown@formal@none@1@S@Task-switchers were programs that allocated available memory between open applications, allowing fast switching between open applications whose actions were suspended when the user switched to a different program.@1@28@@oe@30-11-2008
10970660@unknown@formal@none@1@S@WordPerfect Shell 4.0, which was also bundled with the WordPerfect 6.x versions, had most functionality of the Windows 3.x shell but was far more versatile.@1@25@@oe@30-11-2008
10970670@unknown@formal@none@1@S@Its automated memory management was superior to that of the Microsoft Windows shell, and Microsoft's product generally performed with far less frequent memory glitches when Windows was run as a program under Shell 4.0.@1@34@@oe@30-11-2008
10970680@unknown@formal@none@1@S@The user interface for Shell is based on a hierarchical menu metaphor rather than the windows/folders/icons metaphor used by Microsoft.@1@20@@oe@30-11-2008
10970690@unknown@formal@none@1@S@Shell 4.0's menu structures could be individually hot-keyed as pop-ups and its powerful menu editor allowed fast creation and editing of menu structures and menu items, with each menu item quickly configurable for entry of command lines and menu names.@1@40@@oe@30-11-2008
10970700@unknown@formal@none@1@S@Shell 4.0 included 80 programmable clipboards, and the menu structures and menu items were also programmable using a scripting language whose scripts could themselves be chained to and from WordPerfect macros.@1@31@@oe@30-11-2008
10970710@unknown@formal@none@1@S@The scripting language also included a keyboard buffer stuffing tool for control and operation of non-WordPerfect applications.@1@17@@oe@30-11-2008
10970720@unknown@formal@none@1@S@Microsoft Windows had no answer to such powerful features other than a glitz of windows, icons, pointing devices, and an overwhelming marketing strategy.@1@23@@oe@30-11-2008
10970730@unknown@formal@none@1@S@WordPerfect Shell was laid to rest along with many other popular DOS character-based tools inundated by Microsoft's marketing of Windows 95.@1@21@@oe@30-11-2008
10970740@unknown@formal@none@1@S@Novell later licensed Shell 3.0 and 4.0 for free distribution.@1@10@@oe@30-11-2008
10970750@unknown@formal@none@1@S@As of this writing it is still downloadable from the DataPerfect Users Group.@1@13@@oe@30-11-2008
10970760@unknown@formal@none@1@S@WordPerfect Library/Office also included a Calculator, a flat-file database called Notebook that could be used by itself or in WordPerfect document merges, an exceptionally powerful relational database - [[DataPerfect]] - that retains a small but dedicated following despite having been dropped by WordPerfect Corporation in favour of Borland's Paradox as a companion of WP for Windows.@1@56@@oe@30-11-2008
10970770@unknown@formal@none@1@S@Additional features continue to be added from time to time by DataPerfect's author, Lew Bastian - Bruce Bastian's older brother - a brilliant programmer who had written some of IBM's earliest disk-caching patents, and DataPerfect can now run as web server.@1@41@@oe@30-11-2008
10970780@unknown@formal@none@1@S@LetterPerfect was a scaled down version of WordPerfect with the more advanced features removed but with file and (for the most part) keystroke compatibility.@1@24@@oe@30-11-2008
10970790@unknown@formal@none@1@S@An implementation of Microsoft Visual Basic for Applications (VBA), introduced with WordPerfect for Windows 9.0, provides a full-featured development environment for building advanced custom WordPerfect solutions.@1@26@@oe@30-11-2008
10970800@unknown@formal@none@1@S@These solutions are often created by corporate developers or programmers and may not be easily accessible to the typical WordPerfect user.@1@21@@oe@30-11-2008
10970810@unknown@formal@none@1@S@For these users, PerfectScript is the better option.@1@8@@oe@30-11-2008
10970820@unknown@formal@none@1@S@People who code scripts for WordPerfect use the Macros & Merges forum at WordPerfect Universe as their primary meeting ground.@1@20@@oe@30-11-2008
10970830@unknown@formal@none@1@S@That site is a collaboration among other WordPerfect-related web site operators and others and functions as a portal to WordPerfect resources on the web.@1@24@@oe@30-11-2008
10970840@unknown@formal@none@1@S@The site also maintains an extensive clip library for use in PerfectScript programming, has the Web's largest metalink library for locating online WordPerfect resources, and has the only peer-to-peer forum on the Web for DOS WordPerfect.@1@36@@oe@30-11-2008
10970850@unknown@formal@none@1@S@The WordPerfect template and document file formats have remained remarkably stable since the WordPerfect 6.x DOS and Windows versions.@1@19@@oe@30-11-2008
10970860@unknown@formal@none@1@S@Complete backward compatibility has been maintained and all WordPerfect versions since 6.0 have included a feature that stores any unrecognized codes in stream location represented in Reveal Codes by an "Unknown" token.@1@32@@oe@30-11-2008
10970870@unknown@formal@none@1@S@Documents generated on newer versions can thus be edited in older versions with the codes retained.@1@16@@oe@30-11-2008
10970880@unknown@formal@none@1@S@Then, upon being reopened in a newer version of WordPerfect, the "unknown" tokens regain their functionality.@1@16@@oe@30-11-2008
10970890@unknown@formal@none@1@S@None of the newer WordPerfect features reflected in the file formats cause data loss when opened in older versions.@1@19@@oe@30-11-2008
10970900@unknown@formal@none@1@S@==WordPerfect for Windows==@1@3@@oe@30-11-2008
10970910@unknown@formal@none@1@S@===History===@1@1@@oe@30-11-2008
10970920@unknown@formal@none@1@S@WordPerfect was late in coming to market with a Windows version.@1@11@@oe@30-11-2008
10970930@unknown@formal@none@1@S@The first mature version, WordPerfect 5.2 for Windows, was released in November [[1992]].@1@13@@oe@30-11-2008
10970940@unknown@formal@none@1@S@Prior to that, there was a WordPerfect 5.1 for Windows, introduced a year earlier.@1@14@@oe@30-11-2008
10970950@unknown@formal@none@1@S@That version had to be installed from DOS and was largely unpopular due to serious stability issues.@1@17@@oe@30-11-2008
10970960@unknown@formal@none@1@S@By the time WordPerfect 5.2 for Windows was introduced, [[Microsoft Word|Microsoft Word for Windows]] version 2 had been on the market for over a year and had received its third interim release, v2.0c. WordPerfect's function-key-centered user interface did not adapt well to the new paradigm of mouse and pull-down menus, especially with many of WordPerfect's standard key combinations pre-empted by incompatible keyboard shortcuts that Windows itself used (e.g. Alt-F4 became ''Exit Program'' as opposed to WordPerfect's ''Block Text'').@1@78@@oe@30-11-2008
10970970@unknown@formal@none@1@S@The DOS version's impressive arsenal of finely tuned printer drivers was also rendered obsolete by Windows' use of its own printer device drivers.@1@23@@oe@30-11-2008
10970980@unknown@formal@none@1@S@Internally, WordPerfect for Windows still used the WordPerfect character set as its internal code.@1@14@@oe@30-11-2008
10970990@unknown@formal@none@1@S@This caused WordPerfect for Windows to be unable to support some languages — for example [[Chinese language|Chinese]] — that were natively supported by Windows.@1@24@@oe@30-11-2008
10971000@unknown@formal@none@1@S@WordPerfect became part of an [[office suite]] when the company entered into a co-licensing agreement with [[Borland|Borland Software Corporation]] in 1993.@1@21@@oe@30-11-2008
10971010@unknown@formal@none@1@S@The offerings were marketed as Borland Office, containing Windows versions of WordPerfect, [[Quattro Pro]], [[Borland Paradox]], and a LAN-based groupware package called WordPerfect Office (not to be confused with the complete applications suite of the same name later marketed by Corel) based on the WordPerfect Library for DOS.@1@48@@oe@30-11-2008
10971020@unknown@formal@none@1@S@The WordPerfect product line was sold twice, first to [[Novell]] in June [[1994]], who then sold it to [[Corel]] in January [[1996]].@1@22@@oe@30-11-2008
10971030@unknown@formal@none@1@S@However, Novell kept the WordPerfect Office technology, incorporating it into its [[GroupWise]] messaging and collaboration product.@1@16@@oe@30-11-2008
10971040@unknown@formal@none@1@S@Compounding WordPerfect's troubles were issues associated with the release of the first [[32-bit application|32-bit]] version, WordPerfect 7, intended for use on [[Windows 95]].@1@23@@oe@30-11-2008
10971050@unknown@formal@none@1@S@While it contained notable improvements over the [[16-bit application|16-bit]] WordPerfect for Windows 6.1, it was released in May [[1996]], nine months after the introduction of Windows 95 and Microsoft Office 95 (including [[Word for Windows|Word 95]]).@1@36@@oe@30-11-2008
10971060@unknown@formal@none@1@S@The initial release suffered from notable stability problems.@1@8@@oe@30-11-2008
10971070@unknown@formal@none@1@S@WordPerfect 7 also didn't have a Microsoft "Designed for Windows 95" logo.@1@12@@oe@30-11-2008
10971080@unknown@formal@none@1@S@This was important to Windows 95 software purchasers as Microsoft set standards for application design, behavior, and interaction with the operating system.@1@22@@oe@30-11-2008
10971090@unknown@formal@none@1@S@To make matters worse, the original release of WordPerfect 7 was incompatible with [[Windows NT]], hindering its adoption in academia.@1@20@@oe@30-11-2008
10971100@unknown@formal@none@1@S@The "NT Enabled" version of WordPerfect 7, which Corel considered to be Service Pack 2, wasn't available until Q1-[[1997]], over 6 months after the introduction of [[Windows NT 4.0]], a year and a half after the introduction of Office 95 (which supported Windows NT out of the box), and shortly after the introduction of Office 97.@1@56@@oe@30-11-2008
10971110@unknown@formal@none@1@S@Corel charged its customers to receive, what amounted to, a bug fix.@1@12@@oe@30-11-2008
10971120@unknown@formal@none@1@S@While WordPerfect retained a majority of the retail shelf sales of word processors, Microsoft gained marketshare by including [[Microsoft Word|Word for Windows]] in its Windows product on new PCs.@1@29@@oe@30-11-2008
10971130@unknown@formal@none@1@S@Microsoft gave discounts for Windows to OEMs who included Word on their PCs.@1@13@@oe@30-11-2008
10971140@unknown@formal@none@1@S@When new PC buyers found Word installed on their new PC, Word began to dominate marketshare of desktop word processing.@1@20@@oe@30-11-2008
10971150@unknown@formal@none@1@S@Amongst the remaining avid users of WordPerfect are many law firms and academics who favor the WordPerfect features such as macros and reveal codes.@1@24@@oe@30-11-2008
10971160@unknown@formal@none@1@S@Corel now caters to these markets, with, for example, a major sale to the [[United States Department of Justice]] in 2005 .@1@22@@oe@30-11-2008
10971170@unknown@formal@none@1@S@In November 2004, Novell filed an antitrust lawsuit against Microsoft for alleged anticompetitive behavior (viz, tying Word to sales of Windows) that Novell claims led to loss of WordPerfect market share .@1@32@@oe@30-11-2008
10971180@unknown@formal@none@1@S@===Corel WordPerfect===@1@2@@oe@30-11-2008
10971190@unknown@formal@none@1@S@Since its acquisition by [[Corel]], WordPerfect for Windows has officially been known as '''Corel WordPerfect'''.@1@15@@oe@30-11-2008
10971200@unknown@formal@none@1@S@== Unicode and Asian language editing ==@1@7@@oe@30-11-2008
10971210@unknown@formal@none@1@S@WordPerfect also lacks support for [[Unicode]].@1@6@@oe@30-11-2008
10971220@unknown@formal@none@1@S@The absence of support for [[Unicode]] limits its usefulness in many markets outside North America and Western Europe.@1@18@@oe@30-11-2008
10971230@unknown@formal@none@1@S@Despite pleas from longtime users, this feature has not been implemented as of yet.@1@14@@oe@30-11-2008
10971240@unknown@formal@none@1@S@For users in WordPerfect's traditional markets, the inability to deal with complex character sets, such as Asian language scripts, can cause difficulty when working on documents containing those characters.@1@29@@oe@30-11-2008
10971250@unknown@formal@none@1@S@However, later versions have provided better compliance with interface conventions, file compatibility, and even Word interface emulation.@1@17@@oe@30-11-2008
10971260@unknown@formal@none@1@S@== "Classic Mode" ==@1@4@@oe@30-11-2008
10971270@unknown@formal@none@1@S@Corel added "Classic Mode" in WordPerfect 11.@1@7@@oe@30-11-2008
10971280@unknown@formal@none@1@S@==WordPerfect for Macintosh==@1@3@@oe@30-11-2008
10971290@unknown@formal@none@1@S@Development of WordPerfect for Macintosh did not run parallel to versions for other operating systems, and used version numbers unconnected to contemporary releases for DOS, Windows, etc.@1@27@@oe@30-11-2008
10971300@unknown@formal@none@1@S@The first release reminded users and reviewers of the DOS version, and was not especially successful in the marketplace.@1@19@@oe@30-11-2008
10971310@unknown@formal@none@1@S@Version 2 was a total re-write, adhering more closely to Apple's UI guidelines.@1@13@@oe@30-11-2008
10971320@unknown@formal@none@1@S@Version 3 took this further, making extensive use of the technologies Apple introduced in Systems 7.0&ndash;7.5, while remaining fast and capable of running well on older machines.@1@27@@oe@30-11-2008
10971330@unknown@formal@none@1@S@Corel released version 3.5 in 1996, followed by the improved version 3.5e.@1@12@@oe@30-11-2008
10971340@unknown@formal@none@1@S@It was never updated beyond that, and the product was eventually discontinued.@1@12@@oe@30-11-2008
10971350@unknown@formal@none@1@S@[[As of 2004]], Corel has reiterated that the company has no plans to further develop WordPerfect for Macintosh (such as creating a native Mac OS X version).@1@27@@oe@30-11-2008
10971360@unknown@formal@none@1@S@For several years, Corel allowed Mac users to download version 3.5e from their website free of charge, and some Mac users still use this version.@1@25@@oe@30-11-2008
10971370@unknown@formal@none@1@S@The download is still available, along with the necessary OS 8/9/Classic Updater that slows scroll speed and restores functionality to the Style and Window menus.@1@25@@oe@30-11-2008
10971380@unknown@formal@none@1@S@Like other Mac OS applications of its age, it requires the Classic environment on [[PowerPC]] Macs.@1@16@@oe@30-11-2008
10971390@unknown@formal@none@1@S@While Intel Macs do not support Classic, emulators such as [[SheepShaver]], and [[vMac]] allow users to run WordPerfect and other Mac OS applications.@1@23@@oe@30-11-2008
10971400@unknown@formal@none@1@S@Users wishing to use an up to date version of WordPerfect can run the Windows version through [[Boot Camp (software)|Boot Camp]] or a Windows emulator, and through [[Darwine]] or [[CrossOver Mac]] with mixed results.@1@34@@oe@30-11-2008
10971410@unknown@formal@none@1@S@==WordPerfect for Linux==@1@3@@oe@30-11-2008
10971420@unknown@formal@none@1@S@In 1995, WordPerfect 6.0 was made available for [[Linux]] as part of [[SCO Group|Caldera]]'s internet office package.@1@17@@oe@30-11-2008
10971430@unknown@formal@none@1@S@In late 1997, a newer version was made available for download, but had to be purchased to be activated.@1@19@@oe@30-11-2008
10971440@unknown@formal@none@1@S@Hoping to establish themselves in the nascent commercial Linux market, Corel also developed their [[Corel Linux|own distribution]] of Linux.@1@19@@oe@30-11-2008
10971450@unknown@formal@none@1@S@Although the Linux distribution was fairly well-received, the response to WordPerfect for Linux was varied.@1@15@@oe@30-11-2008
10971460@unknown@formal@none@1@S@Some Linux promoters appreciated the availability of a well-known, mainstream application for the OS. Developers of other Linux-compatible word processors questioned the need for another application in the category.@1@29@@oe@30-11-2008
10971470@unknown@formal@none@1@S@Advocates of [[open-source software]] scoffed at its proprietary, closed-source nature, and questioned the viability of a commercial application in a market dominated by free software, such as [[OpenOffice.org]] and numerous others.@1@31@@oe@30-11-2008
10971480@unknown@formal@none@1@S@The performance and stability of WordPerfect 9.0 (not a native Linux application like WP 6-8, but derived from the Windows version using the [[Wine (software)|Wine]] compatibility library) was highly criticized.@1@30@@oe@30-11-2008
10971490@unknown@formal@none@1@S@WordPerfect failed to gain a large user base, and as part of Corel's change of strategic direction following a (non-voting) investment by Microsoft, WordPerfect for Linux was discontinued and their Linux distribution was sold to [[Xandros]].@1@36@@oe@30-11-2008
10971500@unknown@formal@none@1@S@In April 2004, Corel re-released WordPerfect 8.1 (the last Linux-native version) with some updates, as a "proof of concept" and to test the Linux market.@1@25@@oe@30-11-2008
10971510@unknown@formal@none@1@S@[[As of 2005]], WordPerfect for Linux is not available for purchase.@1@11@@oe@30-11-2008
10971520@unknown@formal@none@1@S@==Versions==@1@1@@oe@30-11-2008
10971530@unknown@formal@none@1@S@(* - Part of [[WordPerfect Office]])@1@6@@oe@30-11-2008
10971540@unknown@formal@none@1@S@Known versions for VAX/VMS include 5.1, 5.3 and 7.1 , year of release unknown.@1@14@@oe@30-11-2008
10971550@unknown@formal@none@1@S@Known versions for SUN include 6.0, requiring SunOS or Solaris 2, year of release unknown.@1@15@@oe@30-11-2008
10971560@unknown@formal@none@1@S@Known versions for IBM System/370 include 4.2, released 1988.@1@9@@oe@30-11-2008
10971570@unknown@formal@none@1@S@Known versions for OS/2 include 5.0, released 1989.@1@8@@oe@30-11-2008
10971580@unknown@formal@none@1@S@Known versions for the DEC Rainbow 100 include version (?), released November 1983.@1@13@@oe@30-11-2008
10971590@unknown@formal@none@1@S@In addition, versions of WordPerfect have also been available for Apricot, Atari ST, DEC Rainbow, Tandy 2000, TI Professional, Victor 9000, and Zenith Z-100 systems, as well as around 30 flavors of unix, including AT&T, NCR, SCO Xenix, Microport Unix, DEC Ultrix, Pyramid Tech Unix, Tru64, AIX, Motorola 8000, and HP9000 and SUN 3.@1@54@@oe@30-11-2008
10971600@unknown@formal@none@1@S@==Current versions==@1@2@@oe@30-11-2008
10971610@unknown@formal@none@1@S@On [[January 17]], [[2006]], Corel announced WordPerfect X3, the newest version of this office package.@1@15@@oe@30-11-2008
10971620@unknown@formal@none@1@S@Corel is an original member of the [[OASIS (organization)|OASIS]] Technical Committee on the [[OpenDocument|Open Document Format]], and Paul Langille, a senior Corel developer, is one of the original four authors of the OpenDocument specification.@1@34@@oe@30-11-2008
10971630@unknown@formal@none@1@S@In January 2006, subscribers to Corel's electronic newsletter were informed that WordPerfect 13 was scheduled for release later in 2006.@1@20@@oe@30-11-2008
10971640@unknown@formal@none@1@S@The subsequent release of X3 (identified as "13" internally and in registry entries) has been met with generally positive reviews, due to new features including a unique PDF import capability, metadata removal tools, integrated search and online resources and other features.@1@41@@oe@30-11-2008
10971650@unknown@formal@none@1@S@Version X3 was described by [[CNET]] in January, 2006 as a "winner", "a feature-packed productivity suite that's just as easy to use – and in many ways more innovative than – industry-goliath Microsoft Office 2003."@1@35@@oe@30-11-2008
10971660@unknown@formal@none@1@S@CNET went on to describe X3 as "a solid upgrade for longtime users", but that "Die-hard Microsoft fans may want to wait to see what Redmond has up its sleeve with the radical changes expected within the upcoming Microsoft Office 12."@1@41@@oe@30-11-2008
10971670@unknown@formal@none@1@S@While the notable if incremental enhancements of WordPerfect Office X3 have been well received by reviewers, a number of online forums have voiced concern about the future direction of WordPerfect, with longtime users complaining about certain usability and functionality issues that users have been asking to have fixed for the last few release versions.@1@54@@oe@30-11-2008
10971680@unknown@formal@none@1@S@Although the released version of X3 does not support the [[Office Open XML|OOXML]] or [[OpenDocument]] formats, a beta has been released that supports both.@1@24@@oe@30-11-2008
10971690@unknown@formal@none@1@S@Reports surfaced late in January 2006 that Apple's [[iWork]] had leapfrogged WordPerfect Office as the leading alternative to Microsoft Office.@1@20@@oe@30-11-2008
10971700@unknown@formal@none@1@S@This claim was soon debunked after industry analyst Joe Wilcox described JupiterResearch usage surveys that showed WordPerfect as the No. 2 office suite behind Microsoft Office in the consumer, small and medium businesses, and enterprise markets with a roughly 15 percent share in each market.@1@45@@oe@30-11-2008
10971710@unknown@formal@none@1@S@In April [[2008]] Corel released their WordPerfect Office X4 [[office suite]] containing the new X4 version of WordPerfect which includes support for [[PDF]], [[OpenDocument]] and [[Office Open XML]].@1@28@@oe@30-11-2008
10980010@unknown@formal@none@1@S@<article>Word sense disambiguation</article>@1@3@@oe@30-11-2008
10980020@unknown@formal@none@1@S@In [[computational linguistics]], '''word sense disambiguation''' (WSD) is the process of identifying which [[word sense|sense]] of a [[word]] (having a number of distinct senses) is used in a given [[Sentence (linguistics)|sentence]].@1@31@@oe@30-11-2008
10980030@unknown@formal@none@1@S@For example, consider the word ''bass'', two distinct senses of which are:@1@12@@oe@30-11-2008
10980040@unknown@formal@none@1@S@#a type of fish@1@4@@oe@30-11-2008
10980050@unknown@formal@none@1@S@#tones of low frequency@1@4@@oe@30-11-2008
10980060@unknown@formal@none@1@S@and the sentences:@1@3@@oe@30-11-2008
10980070@unknown@formal@none@1@S@#''I went fishing for some sea bass''@1@7@@oe@30-11-2008
10980080@unknown@formal@none@1@S@#''The bass line of the song is very moving''@1@9@@oe@30-11-2008
10980090@unknown@formal@none@1@S@Explanation@1@1@@oe@30-11-2008
10980100@unknown@formal@none@1@S@To a human it is obvious that the first sentence is using the word ''bass'' in the first sense above, and that in the second sentence it is being used in the second sense.@1@34@@oe@30-11-2008
10980110@unknown@formal@none@1@S@Although this seems obvious to a human, developing [[algorithm]]s to replicate this human ability is a difficult task.@1@18@@oe@30-11-2008
10980120@unknown@formal@none@1@S@==Difficulties==@1@1@@oe@30-11-2008
10980130@unknown@formal@none@1@S@One problem with word sense disambiguation is deciding what the senses are.@1@12@@oe@30-11-2008
10980140@unknown@formal@none@1@S@In cases like the word ''bass'' above, at least some senses are obviously different.@1@14@@oe@30-11-2008
10980150@unknown@formal@none@1@S@In other cases, however, the different senses can be closely related (one meaning being a [[metaphor]]ical or [[metonymy|metonymic]] extension of another), and in such cases division of words into senses becomes much more difficult.@1@34@@oe@30-11-2008
10980160@unknown@formal@none@1@S@Different dictionaries will provide different divisions of words into senses.@1@10@@oe@30-11-2008
10980170@unknown@formal@none@1@S@One solution some researchers have used is to choose a particular dictionary, and just use its set of senses.@1@19@@oe@30-11-2008
10980180@unknown@formal@none@1@S@Generally, however, research results using broad distinctions in senses have been much better than those using narrow, so most researchers ignore the fine-grained distinctions in their work.@1@27@@oe@30-11-2008
10980190@unknown@formal@none@1@S@Another problem is inter-judge [[variance]].@1@5@@oe@30-11-2008
10980200@unknown@formal@none@1@S@WSD systems are normally tested by having their results on a task compared against those of a human.@1@18@@oe@30-11-2008
10980210@unknown@formal@none@1@S@However, humans do not agree on the task at hand — give a list of senses and sentences, and humans will not always agree on which word belongs in which sense.@1@31@@oe@30-11-2008
10980220@unknown@formal@none@1@S@A computer cannot be expected to give better performance on such a task than a human (indeed, since the human serves as the standard, the computer being better than the human is incoherent), so the human performance serves as an upper bound.@1@42@@oe@30-11-2008
10980230@unknown@formal@none@1@S@Human performance, however, is much better on coarse-grained than fine-grained distinctions, so this again is why research on coarse-grained distinctions is most useful.@1@23@@oe@30-11-2008
10980240@unknown@formal@none@1@S@==Approaches==@1@1@@oe@30-11-2008
10980250@unknown@formal@none@1@S@As in all [[natural language processing]], there are two main approaches to WSD — deep approaches and shallow approaches.@1@19@@oe@30-11-2008
10980260@unknown@formal@none@1@S@Deep approaches presume access to a comprehensive body of [[commonsense knowledge|world knowledge]].@1@12@@oe@30-11-2008
10980270@unknown@formal@none@1@S@Knowledge such as "you can go fishing for a type of fish, but not for low frequency sounds" and "songs have low frequency sounds as parts, but not types of fish" is then used to determine in which sense the word is used.@1@43@@oe@30-11-2008
10980280@unknown@formal@none@1@S@These approaches are not very successful in practice, mainly because such a body of knowledge does not exist in computer-readable format outside of very limited domains.@1@26@@oe@30-11-2008
10980290@unknown@formal@none@1@S@But if such knowledge did exist, they would be much more accurate than the shallow approaches.@1@16@@oe@30-11-2008
10980300@unknown@formal@none@1@S@However, there is a long tradition in Computational Linguistics of trying such approaches in terms of coded knowledge, and in some cases it is hard to say clearly whether the knowledge involved is linguistic or world knowledge.@1@37@@oe@30-11-2008
10980310@unknown@formal@none@1@S@The first attempt was that by Margaret Masterman and her colleagues at Cambridge Language Research Unit in England in the 1950s.@1@21@@oe@30-11-2008
10980320@unknown@formal@none@1@S@This used as data a punched-card version of Roget's Thesaurus and its numbered "heads" as indicators of topics and looked for their repetitions in text, using a set intersection algorithm: it was not very successful (and is described in some detail in (Wilks, Y. et al., 1996) but had strong relationships to later work, especially Yarowsky's machine learning optimisation of a thesaurus method in the 1990s (see below).@1@68@@oe@30-11-2008
10980330@unknown@formal@none@1@S@Shallow approaches don't try to understand the text.@1@8@@oe@30-11-2008
10980340@unknown@formal@none@1@S@They just consider the surrounding words, using information like "if ''bass'' has words ''sea'' or ''fishing'' nearby, it probably is in the fish sense; if ''bass'' has the words ''music'' or ''song'' nearby, it is probably in the music sense."@1@40@@oe@30-11-2008
10980350@unknown@formal@none@1@S@These rules can be automatically derived by the computer, using a training corpus of words tagged with their word senses.@1@20@@oe@30-11-2008
10980360@unknown@formal@none@1@S@This approach, while theoretically not as powerful as deep approaches, gives superior results in practice, due to computers' limited world knowledge.@1@21@@oe@30-11-2008
10980370@unknown@formal@none@1@S@It can, though, be confused by sentences like ''The dogs bark at the tree'', which contains the word ''bark'' near both ''tree'' and ''dogs''.@1@24@@oe@30-11-2008
10980380@unknown@formal@none@1@S@These approaches normally work by defining a window of ''N'' content words around each word to be disambiguated in the corpus, and statistically analyzing those ''N'' surrounding words.@1@28@@oe@30-11-2008
10980390@unknown@formal@none@1@S@Two shallow approaches used to train and then disambiguate are ''[[Naïve Bayes classifier]]s'' and ''[[decision tree]]s''.@1@16@@oe@30-11-2008
10980400@unknown@formal@none@1@S@In recent research, kernel based methods such as [[support vector machine]]s have shown superior performance in [[supervised learning]].@1@18@@oe@30-11-2008
10980410@unknown@formal@none@1@S@But over the last few years, there hasn't been any major improvement in performance of any of these methods.@1@19@@oe@30-11-2008
10980420@unknown@formal@none@1@S@It is instructive to compare the word sense disambiguation problem with the problem of [[part-of-speech tagging]].@1@16@@oe@30-11-2008
10980430@unknown@formal@none@1@S@Both involve disambiguating or tagging with words, be it with senses or parts of speech.@1@15@@oe@30-11-2008
10980440@unknown@formal@none@1@S@However, algorithms used for one do not tend to work well for the other, mainly because the part of speech of a word is primarily determined by the immediately adjacent one to three words, whereas the sense of a word may be determined by words further away.@1@47@@oe@30-11-2008
10980450@unknown@formal@none@1@S@The success rate for part-of-speech tagging algorithms is at present much higher than that for WSD, state-of-the art being around 95% accuracy or better, as compared to less than 75% accuracy in word sense disambiguation with supervised learning.@1@38@@oe@30-11-2008
10980460@unknown@formal@none@1@S@These figures are typical for English, and may be very different from those for other languages.@1@16@@oe@30-11-2008
10980470@unknown@formal@none@1@S@Another aspect of word sense disambiguation that differentiates it from part-of-speech tagging is the availability of training data.@1@18@@oe@30-11-2008
10980480@unknown@formal@none@1@S@While it is relatively easy to assign parts of speech to text, training people to tag senses is far more difficult .@1@22@@oe@30-11-2008
10980490@unknown@formal@none@1@S@While users can memorize all of the possible parts of speech a word can take, it is impossible for individuals to memorize all of the senses a word can take.@1@30@@oe@30-11-2008
10980500@unknown@formal@none@1@S@Thus, many word sense disambiguation algorithms use [[semi-supervised learning]], which allows both labeled and unlabeled data.@1@16@@oe@30-11-2008
10980510@unknown@formal@none@1@S@The [[Yarowsky algorithm]] was an early example of such an algorithm.@1@11@@oe@30-11-2008
10980520@unknown@formal@none@1@S@Yarowsky’s [[Unsupervised learning|unsupervised algorithm]] uses the ‘One sense per collocation’ and the ‘One sense per discourse’ properties of human languages for word sense disambiguation.@1@24@@oe@30-11-2008
10980530@unknown@formal@none@1@S@From observation, words tend to exhibit only one sense in most given discourse and in a given collocation.@1@18@@oe@30-11-2008
10980540@unknown@formal@none@1@S@The corpus is initially untagged.@1@5@@oe@30-11-2008
10980550@unknown@formal@none@1@S@The algorithm starts with a large corpus, in which it identifies examples of the given polysemous word, and stores all the relevant sentences as lines.@1@25@@oe@30-11-2008
10980560@unknown@formal@none@1@S@For instance, Yarowsky uses the word ‘plant’ in his 1995 paper to demonstrate the algorithm.@1@15@@oe@30-11-2008
10980570@unknown@formal@none@1@S@Assume that there are two possible senses of the word, the next step is to identify a small number of seed collocations representative of each sense, give each sense a label, i.e. sense A and B, then assign the appropriate label to all training examples containing the seed collocations.@1@49@@oe@30-11-2008
10980580@unknown@formal@none@1@S@In this case, the words ‘life’ and ‘manufacturing’ are chosen as initial seed collocations for sense A and B respectively.@1@20@@oe@30-11-2008
10980590@unknown@formal@none@1@S@The residual examples (85% - 98% according to Yarowsky) remain untagged.@1@11@@oe@30-11-2008
10980600@unknown@formal@none@1@S@The algorithm should initially choose seed collocations representative that will distinguish sense A and B accurately and productively.@1@18@@oe@30-11-2008
10980610@unknown@formal@none@1@S@This can be done by selecting seed words from a dictionary’s entry for that sense.@1@15@@oe@30-11-2008
10980620@unknown@formal@none@1@S@The collocations tend to have stronger effect if they are adjacent to the target word, the effect weakens with distance.@1@20@@oe@30-11-2008
10980630@unknown@formal@none@1@S@According to the criteria given in Yarowsky (1993), seed words that appear in the most reliable collocational relationships with the target word will be selected.@1@25@@oe@30-11-2008
10980640@unknown@formal@none@1@S@The effect is much stronger for words in a predicate-argument relationship than for arbitrary associations at the same distance to the target word, and is much stronger for collocations with content words than with function words.@1@36@@oe@30-11-2008
10980650@unknown@formal@none@1@S@Having said this, a collocation word can have several collocational relationships with the target word throughout the corpus.@1@18@@oe@30-11-2008
10980660@unknown@formal@none@1@S@This could give the word different rankings or even different classifications.@1@11@@oe@30-11-2008
10980670@unknown@formal@none@1@S@Alternatively, it can be done by identifying a single defining collocate for each class, and using for seeds only those contexts containing one of these defining words.@1@27@@oe@30-11-2008
10980680@unknown@formal@none@1@S@A publicly available database called WordNet can be used as an automatic source for such defining terms.@1@17@@oe@30-11-2008
10980690@unknown@formal@none@1@S@In addition, words that occur near the target word in great frequency can be selected as seed collocations representative.@1@19@@oe@30-11-2008
10980700@unknown@formal@none@1@S@This approach is not fully automatic, a human judge must decide which word will be selected for each target word’s sense, the outputs will be reliable indicators of the senses.@1@30@@oe@30-11-2008
10980710@unknown@formal@none@1@S@A decision-list algorithm is then used to identify other reliable collocations.@1@11@@oe@30-11-2008
10980720@unknown@formal@none@1@S@This training algorithm calculates the probability P(Sense | Collocation), and the decision list is ranked by the log-likelihood ratio: '''Log( P(Sense<sub>A</sub> | Collocation<sub>i</sub>) / P(Sense<sub>B</sub> | Collocation<sub>i</sub>) )'''@1@28@@oe@30-11-2008
10980730@unknown@formal@none@1@S@A [[smoothing]] algorithm will then be used to avoid 0 values.@1@11@@oe@30-11-2008
10980740@unknown@formal@none@1@S@The decision-list algorithm resolves many problems in a large set of non-independent evidence source by using only the most reliable piece of evidence rather than the whole matching collocation set.@1@30@@oe@30-11-2008
10980750@unknown@formal@none@1@S@The new resulting classifier will then be applied to the whole sample set.@1@13@@oe@30-11-2008
10980760@unknown@formal@none@1@S@Add those examples in the residual that are tagged as A or B with probability above a reasonable threshold to the seed sets.@1@23@@oe@30-11-2008
10980770@unknown@formal@none@1@S@Apply the decision-list algorithm and the above adding step iteratively.@1@10@@oe@30-11-2008
10980780@unknown@formal@none@1@S@As more newly-learned collocations are added to the seed sets, the sense A or sense B set will grow, and the original residual will shrink.@1@25@@oe@30-11-2008
10980790@unknown@formal@none@1@S@However, these collocations stay in the seed sets only if their probability of classification remains above the threshold, otherwise they are returned to the residual for later classification.@1@28@@oe@30-11-2008
10980800@unknown@formal@none@1@S@At the end of each iteration, the ‘One sense per discourse’ property can be used to help preventing initially mistagged collocates and hence improving the purity of the seed sets.@1@30@@oe@30-11-2008
10980810@unknown@formal@none@1@S@In order to avoid strong collocates becoming indicators for the wrong class, the class-inclusion threshold needs to be randomly altered.@1@20@@oe@30-11-2008
10980820@unknown@formal@none@1@S@For the same purpose, after intermediate convergence the algorithm will also need to increase the width of the context window.@1@20@@oe@30-11-2008
10980830@unknown@formal@none@1@S@The algorithm will continue to iterate until no more reliable collocations are found.@1@13@@oe@30-11-2008
10980840@unknown@formal@none@1@S@The ‘One sense per discourse’ property can be used here for error correction.@1@13@@oe@30-11-2008
10980850@unknown@formal@none@1@S@For a target word that has a binary sense partition, if the occurrences of the majority sense A exceed that of the minor sense B by a certain threshold, the minority ones will be relabeled as A. According to Yarowsky, for any sense to be clearly dominant, the occurrences of the target word should not be less than 4.@1@59@@oe@30-11-2008
10980860@unknown@formal@none@1@S@When the algorithm converges on a stable residual set, a final decision list of the target word is obtained.@1@19@@oe@30-11-2008
10980870@unknown@formal@none@1@S@The most reliable collocations are at the top of the new list instead of the original seed words.@1@18@@oe@30-11-2008
10980880@unknown@formal@none@1@S@The original untagged corpus is then tagged with sense labels and probabilities.@1@12@@oe@30-11-2008
10980890@unknown@formal@none@1@S@The final decision list may now be applied to new data, the collocation with the highest rank in the list is used to classify the new data.@1@27@@oe@30-11-2008
10980900@unknown@formal@none@1@S@For example, if the highest ranking collocation of the target word in the new data set is of sense A, then the target word is classified as sense A.@1@29@@oe@30-11-2008
10990010@unknown@formal@none@1@S@<article>XHTML</article>@1@1@@oe@30-11-2008
10990020@unknown@formal@none@1@S@The '''''Extensible [[Hypertext]] Markup Language''''', or '''XHTML''', is a [[markup language]] that has the same depth of expression as [[HTML]], but also conforms to [[XML]] syntax.@1@26@@oe@30-11-2008
10990030@unknown@formal@none@1@S@While HTML is an application of [[Standard Generalized Markup Language]] (SGML), a very flexible markup language, XHTML is an application of [[XML]], a more restrictive subset of SGML.@1@28@@oe@30-11-2008
10990040@unknown@formal@none@1@S@Because they need to be [[XML#Well-formed_documents|well-formed]], true XHTML documents allow for automated processing to be performed using standard XML tools—unlike HTML, which requires a relatively complex, lenient, and generally custom [[parsing|parser]].@1@31@@oe@30-11-2008
10990050@unknown@formal@none@1@S@XHTML can be thought of as the intersection of HTML and XML in many respects, since it is a reformulation of HTML in XML.@1@24@@oe@30-11-2008
10990060@unknown@formal@none@1@S@XHTML 1.0 became a [[World Wide Web Consortium]] (W3C) [[W3C recommendation|Recommendation]] on [[January 26]], [[2000]].@1@15@@oe@30-11-2008
10990070@unknown@formal@none@1@S@XHTML 1.1 became a W3C Recommendation on [[May 31]], [[2001]].@1@10@@oe@30-11-2008
10990080@unknown@formal@none@1@S@== Overview ==@1@3@@oe@30-11-2008
10990090@unknown@formal@none@1@S@XHTML is "a reformulation of the three HTML 4 document types as applications of XML 1.0".@1@16@@oe@30-11-2008
10990100@unknown@formal@none@1@S@The [[W3C]] also continues to maintain the HTML 4.01 Recommendation and the specifications for [[HTML5]] and XHTML5 are being actively developed.@1@21@@oe@30-11-2008
10990110@unknown@formal@none@1@S@In the current XHTML 1.0 Recommendation document, as published and revised to August 2002, the W3C comments that, "The XHTML family is the next step in the evolution of the Internet.@1@31@@oe@30-11-2008
10990120@unknown@formal@none@1@S@By migrating to XHTML today, content developers can enter the XML world with all of its attendant benefits, while still remaining confident in their content's backward and future compatibility."@1@29@@oe@30-11-2008
10990130@unknown@formal@none@1@S@=== Motivation ===@1@3@@oe@30-11-2008
10990140@unknown@formal@none@1@S@The need for a reformulated version of HTML was felt primarily because [[World Wide Web]] content now needs to be delivered to many devices (like [[Mobile computing|mobile device]]s) apart from traditional desktop [[computer]]s, where extra resources cannot be devoted to support the additional complexity of HTML syntax.@1@47@@oe@30-11-2008
10990150@unknown@formal@none@1@S@In practice, however, HTML-supporting browsers for such constrained devices have emerged faster than XHTML support has been added to the desktop browser with the largest market share, [[Internet Explorer]].@1@29@@oe@30-11-2008
10990160@unknown@formal@none@1@S@Another goal for XHTML and XML was to reduce the demands on parsers and [[user agent]]s in general.@1@18@@oe@30-11-2008
10990170@unknown@formal@none@1@S@With HTML, user agents increasingly took on the burden of "correcting" errant documents.@1@13@@oe@30-11-2008
10990180@unknown@formal@none@1@S@Instead, XML requires user agents to give a "fatal" error when encountering malformed XML.@1@14@@oe@30-11-2008
10990190@unknown@formal@none@1@S@In theory, this allows for vendors to produce leaner browsers, without the obligation to work around author errors.@1@18@@oe@30-11-2008
10990200@unknown@formal@none@1@S@A side effect of this behavior is that those authoring XHTML documents and testing in conformant browsers should be more readily alerted to errors that may have gone otherwise unnoticed if the browser had attempted to render or ignore the malformed markup.@1@42@@oe@30-11-2008
10990210@unknown@formal@none@1@S@A feature XHTML inherits from its XML underpinnings is XML [[Namespace (computer science)|namespaces]].@1@13@@oe@30-11-2008
10990220@unknown@formal@none@1@S@With namespaces, authors or communities of authors can define their own XML elements, attributes and content models to mix within XHTML documents.@1@22@@oe@30-11-2008
10990230@unknown@formal@none@1@S@This is similar to the semantic flexibility of the <code>class</code> attribute in an [[HTML element]], but with fewer restrictions.@1@19@@oe@30-11-2008
10990240@unknown@formal@none@1@S@Some W3C XML namespaces/schema that can be mixed with XHTML include [[MathML]] for semantic math markup, [[Scalable Vector Graphics]] for markup of vector graphics, and [[RDFa]] for embedding [[Resource Description Framework|RDF]] data.@1@32@@oe@30-11-2008
10990250@unknown@formal@none@1@S@=== Relationship to HTML ===@1@5@@oe@30-11-2008
10990260@unknown@formal@none@1@S@HTML is the [[antecedent]] technology to XHTML.@1@7@@oe@30-11-2008
10990270@unknown@formal@none@1@S@The changes from HTML to first-generation XHTML 1.0 are minor and are mainly to achieve conformance with XML.@1@18@@oe@30-11-2008
10990280@unknown@formal@none@1@S@The most important change is the requirement that the document must be [[well-formed element|well-formed]] and that all [[HTML element|elements]] must be explicitly closed as required in XML.@1@27@@oe@30-11-2008
10990290@unknown@formal@none@1@S@In XML, all element and attribute names are [[case-sensitive]], so the XHTML approach has been to define all tag names to be lowercase.@1@23@@oe@30-11-2008
10990300@unknown@formal@none@1@S@This contrasts with some earlier established traditions which began around the time of HTML 2.0, when many used uppercase tags.@1@20@@oe@30-11-2008
10990310@unknown@formal@none@1@S@In XHTML, all attribute values must be enclosed by quotes; either single (<code>'</code>) or double (<code>"</code>) quotes may be used.@1@20@@oe@30-11-2008
10990320@unknown@formal@none@1@S@In contrast, this was sometimes optional in SGML-based HTML, where numeric or boolean attributes can omit quotes.@1@17@@oe@30-11-2008
10990330@unknown@formal@none@1@S@All elements must also be explicitly closed, including empty (aka [[singleton]]) elements such as <code>img</code> and <code>br</code>.@1@17@@oe@30-11-2008
10990340@unknown@formal@none@1@S@This can be done by adding a closing slash to the start tag, ''e.g.'', <code>&lt;img /&gt;</code> and <code>&lt;br /&gt;</code>.@1@19@@oe@30-11-2008
10990350@unknown@formal@none@1@S@Attribute minimization (e.g., <code>&lt;option selected&gt;</code>) is also prohibited, as the attribute <code>selected</code> contains no explicit value; instead this would be written as <code>&lt;option selected="selected"&gt;</code>.@1@24@@oe@30-11-2008
10990360@unknown@formal@none@1@S@HTML elements which are optional in the content model will not appear in the [[Document Object Model|DOM]] tree unless they are explicitly specified.@1@23@@oe@30-11-2008
10990370@unknown@formal@none@1@S@For example, an XHTML page ''must'' have a <code>&lt;body&gt;</code> element, and a table will not have a <code>&lt;tbody&gt;</code> element unless the author specifies one.@1@24@@oe@30-11-2008
10990380@unknown@formal@none@1@S@The XHTML 1.0 recommendation devotes a section to differences between HTML and XHTML..@1@13@@oe@30-11-2008
10990390@unknown@formal@none@1@S@The WHATWG wiki similarly considers differences that arise with the use of (X)HTML5..@1@13@@oe@30-11-2008
10990400@unknown@formal@none@1@S@Because XHTML and HTML are closely related technologies, sometimes they are written about and documented in parallel.@1@17@@oe@30-11-2008
10990410@unknown@formal@none@1@S@In such circumstances, some authors conflate the two names by using a parenthetical notation, such as (X)HTML.@1@17@@oe@30-11-2008
10990420@unknown@formal@none@1@S@This indicates that the documentation and principles can be considered to apply generally to both standards.@1@16@@oe@30-11-2008
10990430@unknown@formal@none@1@S@=== Adoption ===@1@3@@oe@30-11-2008
10990440@unknown@formal@none@1@S@The similarities between HTML 4.01 and XHTML 1.0 led many web sites and content management systems to adopt the initial W3C XHTML 1.0 Recommendation.@1@24@@oe@30-11-2008
10990450@unknown@formal@none@1@S@To aid authors in the transition, the W3C provided guidance on how to publish XHTML 1.0 documents in an HTML-compatible manner, and serve them to browsers that were not designed for XHTML.@1@32@@oe@30-11-2008
10990460@unknown@formal@none@1@S@Such "HTML-compatible" content is sent using the HTML media type (<code>text/html</code>) rather than the official Internet media type for XHTML (<code>application/xhtml+xml</code>).@1@21@@oe@30-11-2008
10990470@unknown@formal@none@1@S@When measuring the adoption of XHTML to that of regular HTML, therefore, it is important to distinguish whether it is media type usage or actual document contents that is being compared.@1@31@@oe@30-11-2008
10990480@unknown@formal@none@1@S@Most web browsers have mature support for all of the possible XHTML media types.@1@14@@oe@30-11-2008
10990490@unknown@formal@none@1@S@The notable exception is [[Internet Explorer]] by [[Microsoft]]; rather than rendering <code>application/xhtml+xml</code> content, a dialog box invites the user to save the content to disk instead.@1@26@@oe@30-11-2008
10990500@unknown@formal@none@1@S@Both Internet Explorer 7 (released in 2006) and the initial beta version of Internet Explorer 8 (released in March 2008) exhibit this behaviour, and it is unclear whether this will be resolved in a future release.@1@36@@oe@30-11-2008
10990510@unknown@formal@none@1@S@Whilst this remains the case, most web developers avoid using XHTML that isn’t HTML-compatible, so advantages of XML such as namespaces, faster parsing and smaller-footprint browsers do not benefit the user.@1@31@@oe@30-11-2008
10990520@unknown@formal@none@1@S@Microsoft developer Chris Wilson explained in 2005 that IE7’s priorities were improved security and [[Cascading Style Sheet|CSS]] support, and that proper XHTML support would be difficult to graft onto IE’s compatibility-oriented HTML parser.@1@33@@oe@30-11-2008
10990530@unknown@formal@none@1@S@Recently, notable developers have begun to question why Web authors ever made the leap into authoring in XHTML.@1@18@@oe@30-11-2008
10990540@unknown@formal@none@1@S@In October 2006, HTML inventor and W3C chair [[Tim Berners-Lee]], explaining the motivation for the resumption of HTML (not XHTML) development, posted in his blog: "The attempt to get the world to switch to XML, including quotes around attribute values and slashes in empty tags and namespaces all at once didn't work.@1@52@@oe@30-11-2008
10990550@unknown@formal@none@1@S@The large HTML-generating public did not move, largely because the browsers didn't complain."@1@13@@oe@30-11-2008
10990560@unknown@formal@none@1@S@== Versions of XHTML ==@1@5@@oe@30-11-2008
10990570@unknown@formal@none@1@S@=== XHTML 1.0 ===@1@4@@oe@30-11-2008
10990580@unknown@formal@none@1@S@December 1998 saw the publication of a W3C Working Draft entitled ''Reformulating HTML in XML''.@1@15@@oe@30-11-2008
10990590@unknown@formal@none@1@S@This introduced Voyager, the codename for a new markup language based on HTML 4 but adhering to the stricter syntax rules of XML.@1@23@@oe@30-11-2008
10990600@unknown@formal@none@1@S@By February 1999 the specification had changed name to ''XHTML™ 1.0: The Extensible HyperText Markup Language'', and in January 2000 it was officially adopted as a W3C Recommendation.@1@28@@oe@30-11-2008
10990610@unknown@formal@none@1@S@There are three formal [[Document Type Definition|DTDs]] for XHTML 1.0, corresponding to the three different versions of HTML 4.01:@1@19@@oe@30-11-2008
10990620@unknown@formal@none@1@S@* '''XHTML 1.0 Strict''' is the equivalent to strict HTML 4.01, and includes elements and attributes that have not been marked deprecated in the HTML 4.01 specification.@1@27@@oe@30-11-2008
10990630@unknown@formal@none@1@S@* '''XHTML 1.0 Transitional''' is the equivalent of HTML 4.01 Transitional, and includes the presentational elements (such as <code>center</code>, <code>font</code> and <code>strike</code>) excluded from the strict version.@1@27@@oe@30-11-2008
10990640@unknown@formal@none@1@S@* '''XHTML 1.0 Frameset''' is the equivalent of HTML 4.01 Frameset, and allows for the definition of [[frameset|frameset documents]]—a common Web feature in the late 1990s.@1@26@@oe@30-11-2008
10990650@unknown@formal@none@1@S@The second edition of XHTML 1.0 became a W3C Recommendation in August 2002.@1@13@@oe@30-11-2008
10990660@unknown@formal@none@1@S@=== Modularization of XHTML ===@1@5@@oe@30-11-2008
10990670@unknown@formal@none@1@S@The initial draft of ''Modularization of XHTML'' became available in April 1999, and reached Recommendation status in April 2001.@1@19@@oe@30-11-2008
10990680@unknown@formal@none@1@S@[[XHTML Modularization|Modularization]] provides an abstract collection of components through which XHTML can be subsetted and extended.@1@16@@oe@30-11-2008
10990690@unknown@formal@none@1@S@The feature is intended to help XHTML extend it’s reach onto emerging platforms, such as mobile devices and Web-enabled televisions.@1@20@@oe@30-11-2008
10990700@unknown@formal@none@1@S@The first XHTML Family Markup Languages to be developed with this technique were XHTML 1.1 and XHTML Basic 1.0.@1@19@@oe@30-11-2008
10990710@unknown@formal@none@1@S@Another example is XHTML-Print (W3C Recommendation, September 2006), a language designed for printing from mobile devices to low-cost printers.@1@19@@oe@30-11-2008
10990720@unknown@formal@none@1@S@In 2008 ''Modularization of XHTML'' is expected to be superseded by ''XHTML Modularization 1.1'', which adds an [[XML Schema (W3C)|XML Schema]] implementation.@1@22@@oe@30-11-2008
10990730@unknown@formal@none@1@S@=== XHTML 1.1—Module-based XHTML ===@1@5@@oe@30-11-2008
10990740@unknown@formal@none@1@S@XHTML 1.1 evolved out of the work surrounding the initial ''Modularization of XHTML'' specification.@1@14@@oe@30-11-2008
10990750@unknown@formal@none@1@S@The W3C released a first draft in September 1999; Recommendation status was reached in May 2001.@1@16@@oe@30-11-2008
10990760@unknown@formal@none@1@S@The modules combined within XHTML 1.1 effectively recreate XHTML 1.0 Strict, with the addition of [[ruby character|ruby annotation]] elements (<code>ruby</code>, <code>rbc</code>, <code>rtc</code>, <code>rb</code>, <code>rt</code> and <code>rp</code>) to better support East-Asian languages.@1@31@@oe@30-11-2008
10990770@unknown@formal@none@1@S@Other changes include removal of the <code>lang</code> attribute (in favour of <code>xml:lang</code>), and removal of the <code>name</code> attribute from the <code>a</code> and <code>map</code> elements.@1@24@@oe@30-11-2008
10990780@unknown@formal@none@1@S@Although XHTML 1.1 is largely compatible with XHTML 1.0 and HTML 4, in August 2002 the W3C issued a formal Note advising that it should not be transmitted with the HTML media type.@1@33@@oe@30-11-2008
10990790@unknown@formal@none@1@S@With limited browser support for the alternate <code>application/xhtml+xml</code> media type, XHTML 1.1 has so far proven unable to gain widespread use.@1@21@@oe@30-11-2008
10990800@unknown@formal@none@1@S@XHTML 1.1 Second Edition is expected in the third quarter of 2008.@1@12@@oe@30-11-2008
10990810@unknown@formal@none@1@S@=== XHTML Basic and XHTML-MP ===@1@6@@oe@30-11-2008
10990820@unknown@formal@none@1@S@To support constrained devices, ''[[XHTML Basic]]'' was created by the W3C; it reached Recommendation status in December 2000.@1@18@@oe@30-11-2008
10990830@unknown@formal@none@1@S@XHTML Basic 1.0 is the most restrictive version of XHTML, providing a minimal set of features that even the most limited devices can be expected to support.@1@27@@oe@30-11-2008
10990840@unknown@formal@none@1@S@The [[Open Mobile Alliance]] and it’s predecessor the WAP Forum released three specifications between 2001 and 2006 that extended XHTML Basic 1.0.@1@22@@oe@30-11-2008
10990850@unknown@formal@none@1@S@Known as [[XHTML Mobile Profile]] or XHTML-MP, they were strongly focussed on uniting the differing markup languages used on [[mobile phone|mobile handsets]] at the time.@1@25@@oe@30-11-2008
10990860@unknown@formal@none@1@S@All provide richer form controls than XHTML Basic 1.0, along with varying levels of scripting support.@1@16@@oe@30-11-2008
10990870@unknown@formal@none@1@S@''XHTML Basic 1.1'' became a W3C Proposed Recommendation in June 2008, superseding XHTML-MP 1.2.@1@14@@oe@30-11-2008
10990880@unknown@formal@none@1@S@XHTML Basic 1.1 is almost but not quite a subset of regular XHTML 1.1.@1@14@@oe@30-11-2008
10990890@unknown@formal@none@1@S@The most notable addition over XHTML 1.1 is the <code>inputmode</code> attribute—also found in XHTML-MP 1.2—which provides hints to help browsers improve form entry.@1@23@@oe@30-11-2008
10990900@unknown@formal@none@1@S@=== XHTML 1.2 ===@1@4@@oe@30-11-2008
10990910@unknown@formal@none@1@S@The XHTML 2 Working Group is considering the creation a new language based on XHTML 1.1.@1@16@@oe@30-11-2008
10990920@unknown@formal@none@1@S@If XHTML 1.2 is created, it will include [[WAI-ARIA]] and <code>role</code> attributes to better support accessible web applications, and improved [[Semantic Web]] support through [[RDFa]].@1@25@@oe@30-11-2008
10990930@unknown@formal@none@1@S@The <code>inputmode</code> attribute from XHTML Basic 1.1, along with the <code>target</code> attribute (for specifying [[Framing (World Wide Web)|frame]] targets) may also be present.@1@23@@oe@30-11-2008
10990940@unknown@formal@none@1@S@=== XHTML 2.0 ===@1@4@@oe@30-11-2008
10990950@unknown@formal@none@1@S@Between August 2002 and July 2006 the W3C released the first eight Working Drafts of XHTML 2.0, a new version of XHTML able to make a clean break from the past by discarding the requirement of backward compatibility.@1@38@@oe@30-11-2008
10990960@unknown@formal@none@1@S@This lack of compatibility with XHTML 1.x and HTML 4 caused some early controversy in the web developer community.@1@19@@oe@30-11-2008
10990970@unknown@formal@none@1@S@Some parts of the language (such as the <code>role</code> and RDFa attributes) were subsequently split out of the specification and worked on as separate modules, partially to help make the transition from XHTML 1.x to XHTML 2.0 smoother.@1@38@@oe@30-11-2008
10990980@unknown@formal@none@1@S@A ninth draft of XHTML 2.0 is expected to appear in 2008.@1@12@@oe@30-11-2008
10990990@unknown@formal@none@1@S@New features introduced by XHTML 2.0 include:@1@7@@oe@30-11-2008
10991000@unknown@formal@none@1@S@* HTML forms will be replaced by [[XForms]], an XML-based user input specification allowing forms to be displayed appropriately for different rendering devices.@1@23@@oe@30-11-2008
10991010@unknown@formal@none@1@S@* HTML frames will be replaced by [[XFrames]].@1@8@@oe@30-11-2008
10991020@unknown@formal@none@1@S@* The [[DOM Events]] will be replaced by [[XML Events]], which uses the XML [[Document Object Model]].@1@17@@oe@30-11-2008
10991030@unknown@formal@none@1@S@* A new list element type, the <code>nl</code> element type, will be included to specifically designate a list as a navigation list.@1@22@@oe@30-11-2008
10991040@unknown@formal@none@1@S@This will be useful in creating nested menus, which are currently created by a wide variety of means like nested unordered lists or nested definition lists.@1@26@@oe@30-11-2008
10991050@unknown@formal@none@1@S@* Any element will be able to act as a [[hyperlink]], e.g., <code><nowiki><li href="articles.html">Articles</li></nowiki></code>, similar to [[XLink]].@1@17@@oe@30-11-2008
10991060@unknown@formal@none@1@S@However, XLink itself is not compatible with XHTML due to design differences.@1@12@@oe@30-11-2008
10991070@unknown@formal@none@1@S@* Any element will be able to reference alternative media with the <code><nowiki>src</nowiki></code> attribute, e.g., <code><nowiki><p src="lbridge.jpg" type="image/jpeg">London Bridge</p></nowiki></code> is the same as <code><nowiki><object src="lbridge.jpg" type="image/jpeg"><p>London Bridge</p></object></nowiki></code>.@1@27@@oe@30-11-2008
10991080@unknown@formal@none@1@S@* The <code>alt</code> attribute of the <code>img</code> element has been removed: alternative text will be given in the content of the <code>img</code> element, much like the <code>object</code> element, e.g., <code><nowiki><img src="hms_audacious.jpg">HMS <em>Audacious</em></img></nowiki></code>.@1@32@@oe@30-11-2008
10991090@unknown@formal@none@1@S@* A single heading element (<code>h</code>) will be added.@1@9@@oe@30-11-2008
10991100@unknown@formal@none@1@S@The level of these headings are determined by the depth of the nesting.@1@13@@oe@30-11-2008
10991110@unknown@formal@none@1@S@This allows the use of headings to be infinite, rather than limiting use to six levels deep.@1@17@@oe@30-11-2008
10991120@unknown@formal@none@1@S@* The remaining presentational elements <code>i</code>, <code>b</code> and <code>tt</code>, still allowed in XHTML 1.x (even Strict), will be absent from XHTML 2.0.@1@22@@oe@30-11-2008
10991130@unknown@formal@none@1@S@The only somewhat presentational elements remaining will be <code>sup</code> and <code>sub</code> for superscript and subscript respectively, because they have significant non-presentational uses and are required by certain languages.@1@28@@oe@30-11-2008
10991140@unknown@formal@none@1@S@All other tags are meant to be [[semantic]] instead (e.g. <code><nowiki><strong></nowiki></code> for <strong>strong or bolded</strong> text) while allowing the user agent to control the presentation of elements via CSS.@1@29@@oe@30-11-2008
10991150@unknown@formal@none@1@S@* The addition of RDF triple with the <code>property</code> and <code>about</code> attributes to facilitate the conversion from XHTML to RDF/XML.@1@20@@oe@30-11-2008
10991160@unknown@formal@none@1@S@=== HTML 5—Vocabulary and APIs for HTML and XHTML ===@1@10@@oe@30-11-2008
10991170@unknown@formal@none@1@S@[[HTML 5]] initially grew independently of the W3C, through a loose group of browser manufacturers and other interested parties calling themselves the [[WHATWG]], or Web Hypertext Application Technology Working Group.@1@30@@oe@30-11-2008
10991180@unknown@formal@none@1@S@The WHATWG announced the existence of an open mailing list in June 2004, along with a website bearing the strapline “Maintaining and evolving HTML since 2004.”@1@26@@oe@30-11-2008
10991190@unknown@formal@none@1@S@The key motive of the group was to create a platform for dynamic web applications; they considered XHTML 2.0 to be too document-centric, and not suitable for the creation of forum sites or online shops.@1@35@@oe@30-11-2008
10991200@unknown@formal@none@1@S@In April 2007, the Mozilla Foundation and Opera Software joined Apple in requesting that the newly rechartered HTML Working Group of the W3C adopt the work, under the name of HTML 5.@1@32@@oe@30-11-2008
10991210@unknown@formal@none@1@S@The group resolved to do this the following month, and the First Public Working Draft of HTML 5 was issued by the W3C in January 2008.@1@26@@oe@30-11-2008
10991220@unknown@formal@none@1@S@The most recent W3C Working Draft was published in June 2008.@1@11@@oe@30-11-2008
10991230@unknown@formal@none@1@S@HTML 5 has both a regular <code>text/html</code> serialization and an XML serialization, which is known as XHTML 5.@1@18@@oe@30-11-2008
10991240@unknown@formal@none@1@S@In addition to the markup language, the specification includes a number of [[application programming interfaces]].@1@15@@oe@30-11-2008
10991250@unknown@formal@none@1@S@The [[Document Object Model]] is extended with APIs for editing, drag-and-drop, data storage and network communication.@1@16@@oe@30-11-2008
10991260@unknown@formal@none@1@S@The language can be considered more compatible with HTML 4 and XHTML 1.x than XHTML 2.0, due to the decision to keep the existing HTML form elements and events model.@1@30@@oe@30-11-2008
10991270@unknown@formal@none@1@S@It adds many new elements not found in XHTML 1.x, however, such as <code>section</code> and <code>aside</code>.@1@16@@oe@30-11-2008
10991280@unknown@formal@none@1@S@(The XHTML 1.2 equivalent of these structural elements would be <code><nowiki></nowiki></code> and <code><nowiki></nowiki></code>.)@1@13@@oe@30-11-2008
10991290@unknown@formal@none@1@S@The specification is expected to add WAI-ARIA support in a future draft.@1@12@@oe@30-11-2008
10991300@unknown@formal@none@1@S@There is currently no indication as to whether HTML 5 will support RDFa, or be limited just to [[microformats]].@1@19@@oe@30-11-2008
10991310@unknown@formal@none@1@S@== Valid XHTML documents ==@1@5@@oe@30-11-2008
10991320@unknown@formal@none@1@S@An XHTML document that conforms to an XHTML specification is said to be ''valid''.@1@14@@oe@30-11-2008
10991330@unknown@formal@none@1@S@Validity assures consistency in document code, which in turn eases processing, but does not necessarily ensure consistent rendering by browsers.@1@20@@oe@30-11-2008
10991340@unknown@formal@none@1@S@A document can be checked for validity with the [[W3C Markup Validation Service]].@1@13@@oe@30-11-2008
10991350@unknown@formal@none@1@S@In practice, many web development programs such as [[Dreamweaver]] provide code validation based on the [[W3C]] standards.@1@17@@oe@30-11-2008
10991360@unknown@formal@none@1@S@=== DOCTYPEs ===@1@3@@oe@30-11-2008
10991370@unknown@formal@none@1@S@In order to validate an XHTML document, a [[Document Type Declaration]], or ''DOCTYPE'', may be used.@1@16@@oe@30-11-2008
10991380@unknown@formal@none@1@S@A DOCTYPE declares to the browser which [[Document Type Definition]] (DTD) the document conforms to.@1@15@@oe@30-11-2008
10991390@unknown@formal@none@1@S@A Document Type Declaration should be placed before the [[root element]].@1@11@@oe@30-11-2008
10991400@unknown@formal@none@1@S@The [[system identifier]] part of the DOCTYPE, which in these examples is the [[Uniform Resource Locator|URL]] that begins with ''http://'', need only point to a copy of the DTD to use if the validator cannot locate one based on the [[public identifier]] (the other quoted string).@1@46@@oe@30-11-2008
10991410@unknown@formal@none@1@S@It does not need to be the specific URL that is in these examples; in fact, authors are encouraged to use local copies of the DTD files when possible.@1@29@@oe@30-11-2008
10991420@unknown@formal@none@1@S@The public identifier, however, must be character-for-character the same as in the examples.@1@13@@oe@30-11-2008
10991430@unknown@formal@none@1@S@These are the most common XHTML Document Type Declarations:@1@9@@oe@30-11-2008
10991440@unknown@formal@none@1@S@;XHTML 1.0 Strict@1@3@@oe@30-11-2008
10991450@unknown@formal@none@1@S@:<code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN""<nowiki>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</nowiki>"&gt;</code>@1@7@@oe@30-11-2008
10991460@unknown@formal@none@1@S@;XHTML 1.0 Transitional@1@3@@oe@30-11-2008
10991470@unknown@formal@none@1@S@:<code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN""<nowiki>http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</nowiki>"&gt;</code>@1@7@@oe@30-11-2008
10991480@unknown@formal@none@1@S@;XHTML 1.0 Frameset@1@3@@oe@30-11-2008
10991490@unknown@formal@none@1@S@:<code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN""<nowiki>http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd</nowiki>"&gt;</code>@1@7@@oe@30-11-2008
10991500@unknown@formal@none@1@S@;XHTML 1.1@1@2@@oe@30-11-2008
10991510@unknown@formal@none@1@S@:<code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN""<nowiki>http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</nowiki>"&gt;</code>@1@6@@oe@30-11-2008
10991520@unknown@formal@none@1@S@;HTML 5@1@2@@oe@30-11-2008
10991530@unknown@formal@none@1@S@HTML5 does not require a doctype, and HTML 5 validation is not DTD-based.@1@13@@oe@30-11-2008
10991540@unknown@formal@none@1@S@;XHTML 2.0@1@2@@oe@30-11-2008
10991550@unknown@formal@none@1@S@XHTML 2.0, [[As of April 2008]], is in a draft phase.@1@11@@oe@30-11-2008
10991560@unknown@formal@none@1@S@If an XHTML 2.0 Recommendation is published with the same document type declaration as in the current Working Draft, the declaration will appear as:@1@24@@oe@30-11-2008
10991570@unknown@formal@none@1@S@:<code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0//EN"<br/>"<nowiki>http://www.w3.org/MarkUp/DTD/xhtml2.dtd</nowiki>"&gt;</code>@1@6@@oe@30-11-2008
10991580@unknown@formal@none@1@S@A placeholder DTD schema exists at the corresponding URI, though it currently only includes the character reference entities from previous recommendations.@1@21@@oe@30-11-2008
10991590@unknown@formal@none@1@S@XHTML 2 contemplates both a <code>version</code> attribute and an <code>xsi:schemalocation</code> attribute on the root HTML element that could possibly serve as a substitute for any DOCTYPE declaration.@1@27@@oe@30-11-2008
10991600@unknown@formal@none@1@S@==== XML namespaces and schemas ====@1@6@@oe@30-11-2008
10991610@unknown@formal@none@1@S@In addition to the DOCTYPE, all XHTML elements must be in the appropriate [[XML namespace]] for the version being used.@1@20@@oe@30-11-2008
10991620@unknown@formal@none@1@S@This is usually done by declaring a default namespace on the root element using <code>xmlns="namespace"</code> as in the example below.@1@20@@oe@30-11-2008
10991630@unknown@formal@none@1@S@For XHTML 1.0, XHTML 1.1 and HTML5, this is@1@9@@oe@30-11-2008
10991640@unknown@formal@none@1@S@:<code>&lt;<nowiki>html xmlns="http://www.w3.org/1999/xhtml"</nowiki>&gt;</code>@1@2@@oe@30-11-2008
10991650@unknown@formal@none@1@S@XHTML 2.0 requires both a namespace and an [[W3C XML Schema|XML Schema]] instance declaration.@1@14@@oe@30-11-2008
10991660@unknown@formal@none@1@S@These might be declared as@1@5@@oe@30-11-2008
10991670@unknown@formal@none@1@S@:<code>&lt;html xmlns="<nowiki>http://www.w3.org/2002/06/xhtml2/</nowiki>"<br/>xmlns:xsi="<nowiki>http://www.w3.org/2001/XMLSchema-instance</nowiki>"xsi:schemaLocation="<nowiki>http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd</nowiki>"&gt;</code>@1@3@@oe@30-11-2008
10991680@unknown@formal@none@1@S@This example for XHTML 2.0 also demonstrates the use of multiple namespaces within a document.@1@15@@oe@30-11-2008
10991690@unknown@formal@none@1@S@The first <code>xmlns</code> default namespace declaration indicates that elements and attributes whose names have no XML namespace prefix fall within the XHTML 2.0 namespace.@1@24@@oe@30-11-2008
10991700@unknown@formal@none@1@S@The second namespace prefix declaration <code>xmlns:xsi</code> indicates that any elements or attributes prefixed with the <code>xsi:</code> refer to the XMLSchema-Instance namespace.@1@21@@oe@30-11-2008
10991710@unknown@formal@none@1@S@Through this namespace mechanism XML documents allow the use of a mixture of elements and attributes taken from various XML vocabularies while avoiding the potential for clashes of naming between items from independently developed vocabularies.@1@35@@oe@30-11-2008
10991720@unknown@formal@none@1@S@Similar to the case of DOCTYPE above, the actual URL to the [[W3C XML Schema|XML Schema]] file can be changed, as long as the [[Universal Resource Identifier]] (URI) before it (which indicates the XHTML 2.0 namespace) remains the same.@1@39@@oe@30-11-2008
10991730@unknown@formal@none@1@S@The namespace URI is intended to be a persistent and universally unique identifier for the particular version of the specification.@1@20@@oe@30-11-2008
10991740@unknown@formal@none@1@S@If treated as a URL, the actual content located at the site is of no significance.@1@16@@oe@30-11-2008
10991750@unknown@formal@none@1@S@==== XML Declaration ====@1@4@@oe@30-11-2008
10991760@unknown@formal@none@1@S@A [[character encoding]] may be specified at the beginning of an XHTML document in the XML declaration when the document is served using the <code>application/xhtml+xml</code> MIME type.@1@27@@oe@30-11-2008
10991770@unknown@formal@none@1@S@(If an XML document lacks encoding specification, an XML parser assumes that the encoding is [[UTF-8]] or [[UTF-16]], unless the encoding has already been determined by a higher protocol.)@1@29@@oe@30-11-2008
10991780@unknown@formal@none@1@S@For example:@1@2@@oe@30-11-2008
10991790@unknown@formal@none@1@S@: <code><?xml version="1.0" encoding="UTF-8"?></code>@1@4@@oe@30-11-2008
10991800@unknown@formal@none@1@S@The declaration may be optionally omitted because it declares as its encoding the default encoding.@1@15@@oe@30-11-2008
10991810@unknown@formal@none@1@S@However, if the document instead makes use of XML 1.1 or another character encoding, a declaration is necessary.@1@18@@oe@30-11-2008
10991820@unknown@formal@none@1@S@[[Internet Explorer]] prior to version 7 enters [[quirks mode]] if it encounters an XML declaration in a document served as <code>text/html</code>.@1@21@@oe@30-11-2008
10991830@unknown@formal@none@1@S@=== Common errors ===@1@4@@oe@30-11-2008
10991840@unknown@formal@none@1@S@Some of the most common errors in the usage of XHTML are:@1@12@@oe@30-11-2008
10991850@unknown@formal@none@1@S@* Failing to realize that documents won’t be treated as XHTML unless they are served with an appropriate XML [[Internet media type|MIME type]]@1@23@@oe@30-11-2008
10991860@unknown@formal@none@1@S@* Not closing empty elements (elements without closing tags in HTML4)@1@11@@oe@30-11-2008
10991870@unknown@formal@none@1@S@** Incorrect: <code><nowiki></nowiki></code>@1@3@@oe@30-11-2008
10991880@unknown@formal@none@1@S@** Correct: <code><nowiki></nowiki></code>@1@3@@oe@30-11-2008
10991890@unknown@formal@none@1@S@Note that any of these are acceptable in XHTML: <code>&lt;br&gt;&lt;/br&gt;</code>, <code>&lt;br/&gt;</code> and <code>&lt;br&nbsp;/&gt;</code>.@1@13@@oe@30-11-2008
10991900@unknown@formal@none@1@S@Older HTML-only browsers interpreting it as HTML will generally accept <code>&lt;br&gt;</code> and <code>&lt;br&nbsp;/&gt;</code>.@1@13@@oe@30-11-2008
10991910@unknown@formal@none@1@S@* Not closing non-empty elements@1@5@@oe@30-11-2008
10991920@unknown@formal@none@1@S@** Incorrect: <code><nowiki><p>This is a paragraph.<p>This is another paragraph.</nowiki></code>@1@9@@oe@30-11-2008
10991930@unknown@formal@none@1@S@** Correct: <code><nowiki><p>This is a paragraph.</p><p>This is another paragraph.</p></nowiki></code>@1@9@@oe@30-11-2008
10991940@unknown@formal@none@1@S@* Improperly nesting elements (Note that this would also be invalid in [[HTML]])@1@13@@oe@30-11-2008
10991950@unknown@formal@none@1@S@** Incorrect: <code><nowiki><em><strong>This is some text.</em></strong></nowiki></code>@1@6@@oe@30-11-2008
10991960@unknown@formal@none@1@S@** Correct: <code><nowiki><em><strong>This is some text.</strong></em></nowiki></code>@1@6@@oe@30-11-2008
10991970@unknown@formal@none@1@S@* Not putting quotation marks around attribute values@1@8@@oe@30-11-2008
10991980@unknown@formal@none@1@S@** Incorrect: <code><nowiki><td rowspan=3></nowiki></code>@1@4@@oe@30-11-2008
10991990@unknown@formal@none@1@S@** Correct: <code><nowiki><td rowspan="3"></nowiki></code>@1@4@@oe@30-11-2008
10992000@unknown@formal@none@1@S@** Correct: <code><nowiki><td rowspan='3'></nowiki></code>@1@4@@oe@30-11-2008
10992010@unknown@formal@none@1@S@* Using the ampersand character outside of entities@1@8@@oe@30-11-2008
10992020@unknown@formal@none@1@S@** Incorrect: <code><nowiki><title>Cars &amp; Trucks</title></nowiki></code>@1@5@@oe@30-11-2008
10992030@unknown@formal@none@1@S@** Correct: <code><nowiki><title>Cars &amp;amp; Trucks</title></nowiki></code>@1@5@@oe@30-11-2008
10992040@unknown@formal@none@1@S@* Using the ampersand outside of entities in [[Uniform Resource Locator|URL]]s (Note that this would also be invalid in [[HTML]])@1@20@@oe@30-11-2008
10992050@unknown@formal@none@1@S@** Incorrect: <code><nowiki><a href="index.php?page=news&amp;style=5">News</a></nowiki></code>@1@4@@oe@30-11-2008
10992060@unknown@formal@none@1@S@** Correct: <code><nowiki><a href="index.php?page=news&amp;amp;style=5">News</a></nowiki></code>@1@4@@oe@30-11-2008
10992070@unknown@formal@none@1@S@* Failing to recognize that XHTML elements and attributes are case sensitive@1@12@@oe@30-11-2008
10992080@unknown@formal@none@1@S@** Incorrect: <code><nowiki><BODY><P ID="ONE">The Best Page Ever</P></BODY></nowiki></code>@1@7@@oe@30-11-2008
10992090@unknown@formal@none@1@S@** Correct: <code><nowiki><body><p id="ONE">The Best Page Ever</p></body></nowiki></code>@1@7@@oe@30-11-2008
10992100@unknown@formal@none@1@S@* Using attribute minimization@1@4@@oe@30-11-2008
10992110@unknown@formal@none@1@S@** Incorrect: <code><nowiki><textarea readonly>READ-ONLY</textarea></nowiki></code>@1@4@@oe@30-11-2008
10992120@unknown@formal@none@1@S@** Correct: <code><nowiki><textarea readonly="readonly">READ-ONLY</textarea></nowiki></code>@1@4@@oe@30-11-2008
10992130@unknown@formal@none@1@S@* Mis-using CDATA, script-comments and xml-comments when embedding scripts and stylesheets.@1@11@@oe@30-11-2008
10992140@unknown@formal@none@1@S@** This problem can be avoided altogether by putting all script and stylesheet information into separate files and referring to them as follows in the XHTML <code>head</code> element.@1@28@@oe@30-11-2008
10992150@unknown@formal@none@1@S@<pre> &lt;link rel="stylesheet" href="/style/screen.css" type="text/css" /&gt; &lt;script type="text/javascript" src="/script/site.js"&gt;&lt;/script&gt; </pre>@1@10@@oe@30-11-2008
10992160@unknown@formal@none@1@S@::Note: The format <code>&lt;script …&gt;&lt;/script&gt;</code>, rather than the more concise <code>&lt;script … /&gt;</code>, is required for HTML compatibility when served as MIME type <code>text/html</code>.@1@24@@oe@30-11-2008
10992170@unknown@formal@none@1@S@** If an author chooses to include script or style data inline within an XHTML document, different approaches are recommended depending whether the author intends to serve the page as <code>application/xhtml+xml</code> and target only fully conformant browsers, or serve the page as <code>text/html</code> and try to obtain usability in Internet Explorer 6 and other non-conformant browsers.@1@56@@oe@30-11-2008
10992180@unknown@formal@none@1@S@== Backward compatibility ==@1@4@@oe@30-11-2008
10992190@unknown@formal@none@1@S@XHTML 1.x documents are mostly backward compatible with HTML 4 user agents when the appropriate guidelines are followed.@1@18@@oe@30-11-2008
10992200@unknown@formal@none@1@S@XHTML 1.1 is essentially compatible, although the elements for [[ruby character|ruby annotiation]] are not part of the HTML 4 specification and thus generally ignored by HTML 4 browsers.@1@28@@oe@30-11-2008
10992210@unknown@formal@none@1@S@Later XHTML 1.x modules such as those for the <code>role</code> attribute, [[RDFa]] and [[WAI-ARIA]] degrade gracefully in a similar manner.@1@20@@oe@30-11-2008
10992220@unknown@formal@none@1@S@HTML 5 and XHTML 2 are significantly less compatible, although this can be mitigated to some degree through the use of scripting.@1@22@@oe@30-11-2008
10992230@unknown@formal@none@1@S@(This can be simple one-liners, such as the use of “<code>document.createElement()</code>” to register a new HTML element within Internet Explorer, or complete JavaScript frameworks, such as the [[FormFaces]] implementation of [[XForms]].)@1@31@@oe@30-11-2008
10992240@unknown@formal@none@1@S@=== Examples ===@1@3@@oe@30-11-2008
10992250@unknown@formal@none@1@S@The followings are examples of XHTML 1.0 Strict.@1@8@@oe@30-11-2008
10992260@unknown@formal@none@1@S@Both of them have the same visual output.@1@8@@oe@30-11-2008
10992270@unknown@formal@none@1@S@The former one follows the [http://www.w3.org/TR/xhtml1/#guidelines HTML Compatibility Guidelines] in Appendix C of the XHTML 1.0 Specification while the latter one breaks backward compatibility but provides cleaner codes.@1@28@@oe@30-11-2008
10992280@unknown@formal@none@1@S@Example 1. <source lang="xml"> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <title>XHTML 1.0 Example</title> <script type="text/javascript"> <![CDATA[//><!]]> </script> </head> <body onload="loadpdf()"> <p>This is an example of an <abbr title="Extensible HyperText Markup Language">XHTML</abbr> 1.0 Strict document.<img id="validation-icon" src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0 Strict" /><object id="pdf-object" name="pdf-object" type="application/pdf" data="http://www.w3.org/TR/xhtml1/xhtml1.pdf" width="100%" height="500"> </object> </p> </body> </html> </source>@1@64@@oe@30-11-2008
10992290@unknown@formal@none@1@S@Example 2. <source lang="xml"> <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"> <head> <title>XHTML 1.0 Example</title> <script type="application/javascript"> <![CDATA[ function loadpdf() { document.getElementById("pdf-object").src="http://www.w3.org/TR/xhtml1/xhtml1.pdf"; } ]]> </script> </head> <body onload="loadpdf()"> <p>This is an example of an <abbr title="Extensible HyperText Markup Language">XHTML</abbr> 1.0 Strict document.<img id="validation-icon" src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0 Strict"/><object id="pdf-object" name="pdf-object" type="application/pdf" data="http://www.w3.org/TR/xhtml1/xhtml1.pdf" width="100%" height="500"/> </p> </body> </html> </source>@1@65@@oe@30-11-2008
10992300@unknown@formal@none@1@S@Notes:@1@1@@oe@30-11-2008
10992310@unknown@formal@none@1@S@# For further information on the media type recommendation, please refer to [http://www.w3.org/TR/2002/NOTE-xhtml-media-types-20020801/ XHTML Media Types], a W3C Note issued on 2002-08-01.@1@22@@oe@30-11-2008
10992320@unknown@formal@none@1@S@# The "loadpdf" function is actually a workaround for Internet Explorer.@1@11@@oe@30-11-2008
10992330@unknown@formal@none@1@S@It can be replaced by adding <code><nowiki><param name="src" value="http://www.w3.org/TR/xhtml1/xhtml1.pdf" /></nowiki></code> within <code><nowiki><object></nowiki></code>.@1@12@@oe@30-11-2008
10992340@unknown@formal@none@1@S@# The <code>img</code> element does not get a <code>name</code> attribute in the [http://www.w3.org/TR/xhtml1/dtds.html#a_dtd_XHTML-1.0-Strict XHTML 1.0 Strict DTD].@1@17@@oe@30-11-2008
10992350@unknown@formal@none@1@S@Use <code>id</code> instead.@1@3@@oe@30-11-2008
11000010@unknown@formal@none@1@S@<article>XML</article>@1@1@@oe@30-11-2008
11000020@unknown@formal@none@1@S@The '''Extensible Markup Language''' ('''XML''') is a general-purpose ''specification'' for creating custom [[markup language]]s.@1@14@@oe@30-11-2008
11000030@unknown@formal@none@1@S@It is classified as an [[extensible language]] because it allows its users to define their own elements.@1@17@@oe@30-11-2008
11000040@unknown@formal@none@1@S@Its primary purpose is to facilitate the sharing of structured data across different information systems, particularly via the [[Internet]], and it is used both to encode documents and to [[Serialization|serialize]] data.@1@31@@oe@30-11-2008
11000050@unknown@formal@none@1@S@In the latter context, it is comparable with other text-based serialization languages such as [[JSON]] and [[YAML]].@1@17@@oe@30-11-2008
11000060@unknown@formal@none@1@S@It started as a simplified subset of the [[Standard Generalized Markup Language]] (SGML), and is designed to be relatively human-legible.@1@20@@oe@30-11-2008
11000070@unknown@formal@none@1@S@By adding [[semantics|semantic]] constraints, application languages can be implemented in XML.@1@11@@oe@30-11-2008
11000080@unknown@formal@none@1@S@These include [[XHTML]], [[RSS (file format)|RSS]], [[MathML]], [[GraphML]], [[Scalable Vector Graphics]], [[MusicXML]], and thousands of others.@1@16@@oe@30-11-2008
11000090@unknown@formal@none@1@S@Moreover, XML is sometimes used as the [[specification language]] for such application languages.@1@13@@oe@30-11-2008
11000100@unknown@formal@none@1@S@XML is [[W3C recommendation|recommended]] by the [[World Wide Web Consortium]] (W3C).@1@11@@oe@30-11-2008
11000110@unknown@formal@none@1@S@It is a fee-free [[open standard]].@1@6@@oe@30-11-2008
11000120@unknown@formal@none@1@S@The recommendation specifies both the [[lexical grammar]] and the requirements for [[parsing]].@1@12@@oe@30-11-2008
11000130@unknown@formal@none@1@S@==Well-formed and valid XML documents==@1@5@@oe@30-11-2008
11000140@unknown@formal@none@1@S@There are two levels of correctness of an XML document:@1@10@@oe@30-11-2008
11000150@unknown@formal@none@1@S@* '''Well-formed'''.@1@2@@oe@30-11-2008
11000160@unknown@formal@none@1@S@A well-formed document conforms to all of XML's syntax rules.@1@10@@oe@30-11-2008
11000170@unknown@formal@none@1@S@For example, if a start-tag appears without a corresponding end-tag, it is not ''well-formed''.@1@14@@oe@30-11-2008
11000180@unknown@formal@none@1@S@A document that is not well-formed is not considered to be XML; a ''conforming parser'' is not allowed to process it.@1@21@@oe@30-11-2008
11000190@unknown@formal@none@1@S@* '''Valid'''.@1@2@@oe@30-11-2008
11000200@unknown@formal@none@1@S@A valid document additionally conforms to some semantic rules.@1@9@@oe@30-11-2008
11000210@unknown@formal@none@1@S@These rules are either user-defined, or included as an [[XML schema]] or [[Document Type Definition|DTD]].@1@15@@oe@30-11-2008
11000220@unknown@formal@none@1@S@For example, if a document contains an undefined element, then it is not ''valid''; a ''validating parser'' is not allowed to process it.@1@23@@oe@30-11-2008
11000230@unknown@formal@none@1@S@==Well-formed documents: XML syntax==@1@4@@oe@30-11-2008
11000240@unknown@formal@none@1@S@As long as only [[well-formed element|well-formedness]] is required, XML is a generic framework for storing any amount of text or any data whose structure can be represented as a [[Tree (data structure)|tree]].@1@32@@oe@30-11-2008
11000250@unknown@formal@none@1@S@The only indispensable syntactical requirement is that the document has exactly one '''root element''' (alternatively called the '''document element''').@1@19@@oe@30-11-2008
11000260@unknown@formal@none@1@S@This means that the text must be enclosed between a root start-tag and a corresponding end-tag.@1@16@@oe@30-11-2008
11000270@unknown@formal@none@1@S@The following is a "well-formed" XML document: <source lang="xml"><book>This is a book.... </book> </source>@1@14@@oe@30-11-2008
11000280@unknown@formal@none@1@S@The root element can be preceded by an optional '''XML declaration'''.@1@11@@oe@30-11-2008
11000290@unknown@formal@none@1@S@This element states what version of XML is in use (normally 1.0); it may also contain information about [[character encoding]] and external dependencies. <source lang="xml"> <?xml version="1.0" encoding="UTF-8"?> </source>@1@29@@oe@30-11-2008
11000300@unknown@formal@none@1@S@The specification ''requires'' that [[Data Processor|processors]] of XML support the pan-[[Unicode]] [[character encoding]]s [[UTF-8]] and [[UTF-16/UCS-2|UTF-16]] ([[UTF-32/UCS-4|UTF-32]] is not mandatory).@1@20@@oe@30-11-2008
11000310@unknown@formal@none@1@S@The use of more limited encodings, such as those based on [[ISO/IEC 8859]], is acknowledged and is widely used and supported.@1@21@@oe@30-11-2008
11000320@unknown@formal@none@1@S@'''Comments''' can be placed anywhere in the tree, including in the text if the content of the element is text or #PCDATA.@1@22@@oe@30-11-2008
11000330@unknown@formal@none@1@S@XML comments start with '''&lt;!--''' and end with '''--&gt;'''.@1@9@@oe@30-11-2008
11000340@unknown@formal@none@1@S@Two dashes (--) may not appear anywhere in the text of the comment.@1@13@@oe@30-11-2008
11000350@unknown@formal@none@1@S@<source lang="xml"></source>@1@2@@oe@30-11-2008
11000360@unknown@formal@none@1@S@In any meaningful application, additional markup is used to structure the contents of the XML document.@1@16@@oe@30-11-2008
11000370@unknown@formal@none@1@S@The text enclosed by the root tags may contain an arbitrary number of XML elements.@1@15@@oe@30-11-2008
11000380@unknown@formal@none@1@S@The basic syntax for one '''element''' is: <source lang="xml"> <name attribute="value">Content</name> </source> The two instances of »name« are referred to as the '''start-tag''' and '''end-tag''', respectively.@1@26@@oe@30-11-2008
11000390@unknown@formal@none@1@S@Here, »content« is some text which may again contain XML elements.@1@11@@oe@30-11-2008
11000400@unknown@formal@none@1@S@So, a generic XML document contains a [[tree (data structure)|tree-based data structure]].@1@12@@oe@30-11-2008
11000410@unknown@formal@none@1@S@Here is an example of a structured XML document:@1@9@@oe@30-11-2008
11000420@unknown@formal@none@1@S@<source lang="xml"> <recipe name="bread" prep_time="5 mins" cook_time="3 hours"> <title>Basic bread</title> <ingredient amount="8" unit="dL">Flour</ingredient> <ingredient amount="10" unit="grams">Yeast</ingredient> <ingredient amount="4" unit="dL" state="warm">Water</ingredient> <ingredient amount="1" unit="teaspoon">Salt</ingredient> <instructions> <step>Mix all ingredients together.</step> <step>Knead thoroughly.</step> <step>Cover with a cloth, and leave for one hour in warm room.</step> <step>Knead again.</step> <step>Place in a bread baking tin.</step> <step>Cover with a cloth, and leave for one hour in warm room.</step> <step>Bake in the oven at 180(degrees)C for 30 minutes.</step> </instructions> </recipe> </source>@1@74@@oe@30-11-2008
11000430@unknown@formal@none@1@S@Attribute values must always be quoted, using single or double quotes; and each attribute name must appear only once in any element.@1@22@@oe@30-11-2008
11000440@unknown@formal@none@1@S@XML requires that elements be properly nested &mdash; elements may never overlap, and so must be closed in the opposite order to which they are opened.@1@26@@oe@30-11-2008
11000450@unknown@formal@none@1@S@For example, this fragment of code below cannot be part of a well-formed XML document because the ''title'' and ''author'' elements are closed in the wrong order: <source lang="xml"><title>Book on Logic<author>Aristotle</title></author> </source> One way of writing the same information in a way which could be incorporated into a well-formed XML document is as follows: <source lang="xml"><title>Book on Logic</title> <author>Aristotle</author> </source>@1@60@@oe@30-11-2008
11000460@unknown@formal@none@1@S@XML provides special syntax for representing an element with empty content.@1@11@@oe@30-11-2008
11000470@unknown@formal@none@1@S@Instead of writing a start-tag followed immediately by an end-tag, a document may contain an empty-element tag.@1@17@@oe@30-11-2008
11000480@unknown@formal@none@1@S@An empty-element tag resembles a start-tag but contains a slash just before the closing angle bracket.@1@16@@oe@30-11-2008
11000490@unknown@formal@none@1@S@The following three examples are equivalent in XML: <source lang="xml"> <foo></foo> <foo /> <foo/> </source> An empty-element may contain attributes: <source lang="xml"> <info author="John Smith" genre="science-fiction" date="2009-Jan-01" /> </source>@1@29@@oe@30-11-2008
11000500@unknown@formal@none@1@S@===Entity references===@1@2@@oe@30-11-2008
11000510@unknown@formal@none@1@S@An [[SGML entity|entity]] in XML is a named body of data, usually text.@1@13@@oe@30-11-2008
11000520@unknown@formal@none@1@S@Entities are often used to represent single characters that cannot easily be entered on the keyboard; they are also used to represent pieces of standard ("boilerplate") text that occur in many documents, especially if there is a need to allow such text to be changed in one place only.@1@49@@oe@30-11-2008
11000530@unknown@formal@none@1@S@Special characters can be represented either using [[SGML entity|entity]] references, or by means of [[numeric character reference]]s.@1@17@@oe@30-11-2008
11000540@unknown@formal@none@1@S@An example of a numeric character reference is "<code>&amp;#x20AC;</code>", which refers to the [[Euro symbol]] by means of its [[Unicode]] codepoint in [[hexadecimal]].@1@23@@oe@30-11-2008
11000550@unknown@formal@none@1@S@An entity reference is a [[placeholder]] that represents that entity.@1@10@@oe@30-11-2008
11000560@unknown@formal@none@1@S@It consists of the entity's name preceded by an [[ampersand]] ("<code>&amp;</code>") and followed by a [[semicolon]] ("<code>;</code>").@1@17@@oe@30-11-2008
11000570@unknown@formal@none@1@S@XML has five [[predeclared]] entities:@1@5@@oe@30-11-2008
11000580@unknown@formal@none@1@S@* <code>&amp;amp;</code> (& or "ampersand")@1@5@@oe@30-11-2008
11000590@unknown@formal@none@1@S@* <code>&amp;lt;</code> (&lt; or "less than")@1@6@@oe@30-11-2008
11000600@unknown@formal@none@1@S@* <code>&amp;gt;</code> (&gt; or "greater than")@1@6@@oe@30-11-2008
11000610@unknown@formal@none@1@S@* <code>&amp;apos;</code> (' or "apostrophe")@1@5@@oe@30-11-2008
11000620@unknown@formal@none@1@S@* <code>&amp;quot;</code> (" or "quotation mark")@1@6@@oe@30-11-2008
11000630@unknown@formal@none@1@S@Here is an example using a predeclared XML entity to represent the ampersand in the name "AT&amp;T": <source lang="xml"> <company_name>AT&amp;T</company_name> </source> Additional entities (beyond the predefined ones) can be declared in the document's [[XML#DTD|Document Type Definition (DTD)]].@1@37@@oe@30-11-2008
11000640@unknown@formal@none@1@S@A basic example of doing so in a minimal internal DTD follows.@1@12@@oe@30-11-2008
11000650@unknown@formal@none@1@S@Declared entities can describe single characters or pieces of text, and can reference each other. <source lang="xml"> <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE example [ <!ENTITY copy "&#xA9;"> <!ENTITY copyright-notice "Copyright &copy; 2006, XYZ Enterprises"> ]> <example> &copyright-notice; </example> </source>@1@38@@oe@30-11-2008
11000660@unknown@formal@none@1@S@When viewed in a suitable browser, the XML document above appears as:@1@12@@oe@30-11-2008
11000670@unknown@formal@none@1@S@Copyright © 2006, XYZ Enterprises@1@5@@oe@30-11-2008
11000680@unknown@formal@none@1@S@====Numeric character references====@1@3@@oe@30-11-2008
11000690@unknown@formal@none@1@S@Numeric character references look like entity references, but instead of a name, they contain the "<code>[[number sign|#]]</code>" character followed by a number.@1@22@@oe@30-11-2008
11000700@unknown@formal@none@1@S@The number (in decimal or "<code>x</code>"-prefixed [[hexadecimal]]) represents a Unicode code point.@1@12@@oe@30-11-2008
11000710@unknown@formal@none@1@S@Unlike entity references, they are neither predeclared nor do they need to be declared in the document's DTD.@1@18@@oe@30-11-2008
11000720@unknown@formal@none@1@S@They have typically been used to represent characters that are not easily encodable, such as an [[Arabic language|Arabic]] character in a document produced on a European computer.@1@27@@oe@30-11-2008
11000730@unknown@formal@none@1@S@The ampersand in the "AT&amp;T" example could also be [[escape character|escaped]] like this (decimal 38 and hexadecimal 26 both represent the Unicode code point for the "&amp;" character): <source lang="xml"> <company_name>AT&#38;T</company_name> <company_name>AT&#x26;T</company_name> </source>@1@33@@oe@30-11-2008
11000740@unknown@formal@none@1@S@Similarly, in the previous example, notice that “&#xA9” is used to generate the “©” symbol.@1@15@@oe@30-11-2008
11000750@unknown@formal@none@1@S@See also [[numeric character reference]]s.@1@5@@oe@30-11-2008
11000760@unknown@formal@none@1@S@===Well-formed documents===@1@2@@oe@30-11-2008
11000770@unknown@formal@none@1@S@In XML, a [[well-formed element|well-formed]] document must conform to the following rules, among others:@1@14@@oe@30-11-2008
11000780@unknown@formal@none@1@S@* Non-empty elements are [[delimiter|delimited]] by both a start-tag and an end-tag.@1@12@@oe@30-11-2008
11000790@unknown@formal@none@1@S@* Empty elements may be marked with an empty-element (self-closing) tag, such as <code>&lt;IAmEmpty /></code>.@1@15@@oe@30-11-2008
11000800@unknown@formal@none@1@S@This is equal to <code>&lt;IAmEmpty&gt;&lt;/IAmEmpty&gt;</code>.@1@5@@oe@30-11-2008
11000810@unknown@formal@none@1@S@* All attribute values are quoted with either single (') or double (") quotes.@1@14@@oe@30-11-2008
11000820@unknown@formal@none@1@S@Single quotes close a single quote and double quotes close a double quote.@1@13@@oe@30-11-2008
11000830@unknown@formal@none@1@S@* Tags may be nested but must not overlap.@1@9@@oe@30-11-2008
11000840@unknown@formal@none@1@S@Each non-root element must be completely contained in another element.@1@10@@oe@30-11-2008
11000850@unknown@formal@none@1@S@* The document complies with its declared character encoding.@1@9@@oe@30-11-2008
11000860@unknown@formal@none@1@S@The encoding may be declared or implied externally, such as in "Content-Type" headers when a document is transported via [[Hypertext Transfer Protocol|HTTP]], or internally, using explicit markup at the very beginning of the document.@1@34@@oe@30-11-2008
11000870@unknown@formal@none@1@S@When no such declaration exists, a Unicode encoding is assumed, as defined by a Unicode [[Byte-order mark|Byte Order Mark]] before the document's first character.@1@24@@oe@30-11-2008
11000880@unknown@formal@none@1@S@If the mark does not exist, UTF-8 encoding is assumed.@1@10@@oe@30-11-2008
11000890@unknown@formal@none@1@S@Element names are case-sensitive.@1@4@@oe@30-11-2008
11000900@unknown@formal@none@1@S@For example, the following is a well-formed matching pair:@1@9@@oe@30-11-2008
11000910@unknown@formal@none@1@S@:<code>&lt;Step></code> ... <code>&lt;/Step></code>@1@3@@oe@30-11-2008
11000920@unknown@formal@none@1@S@whereas this is not@1@4@@oe@30-11-2008
11000930@unknown@formal@none@1@S@:<code>&lt;Step></code> ... <code>&lt;/step></code>@1@3@@oe@30-11-2008
11000940@unknown@formal@none@1@S@By carefully choosing the names of the XML elements one may convey the meaning of the data in the [[Markup language|markup]].@1@21@@oe@30-11-2008
11000950@unknown@formal@none@1@S@This increases human readability while retaining the rigor needed for software parsing.@1@12@@oe@30-11-2008
11000960@unknown@formal@none@1@S@Choosing meaningful names implies the [[semantics]] of elements and attributes to a human reader without reference to external documentation.@1@19@@oe@30-11-2008
11000970@unknown@formal@none@1@S@However, this can lead to verbosity, which complicates [[authoring]] and increases [[file size]].@1@13@@oe@30-11-2008
11000980@unknown@formal@none@1@S@===Automatic verification===@1@2@@oe@30-11-2008
11000990@unknown@formal@none@1@S@It is relatively simple to verify that a document is well-formed or validated XML, because the rules of well-formedness and validation of XML are designed for portability of tools.@1@29@@oe@30-11-2008
11001000@unknown@formal@none@1@S@The idea is that any tool designed to work with XML files will be able to work with XML files written in any XML language (or XML application).@1@28@@oe@30-11-2008
11001010@unknown@formal@none@1@S@Here are some examples of ways to verify XML documents:@1@10@@oe@30-11-2008
11001020@unknown@formal@none@1@S@* load it into an XML-capable browser, such as [[Mozilla Firefox|Firefox]] or [[Internet Explorer]]@1@14@@oe@30-11-2008
11001030@unknown@formal@none@1@S@* use a tool like xmlwf (usually bundled with [[Expat (XML)|expat]])@1@11@@oe@30-11-2008
11001040@unknown@formal@none@1@S@* parse the document, for instance in [[Ruby programming language|Ruby]]:@1@10@@oe@30-11-2008
11001050@unknown@formal@none@1@S@irb> require "rexml/document" irb> include REXML irb> doc = Document.new(File.new("test.xml")).root@1@10@@oe@30-11-2008
11001060@unknown@formal@none@1@S@==Valid documents: XML semantics==@1@4@@oe@30-11-2008
11001070@unknown@formal@none@1@S@By leaving the names, allowable hierarchy, and meanings of the elements and attributes open and definable by a customizable ''[[XML schema|schema]] or [[Document Type Definition|DTD]]'', XML provides a syntactic foundation for the creation of purpose-specific, XML-based markup languages.@1@38@@oe@30-11-2008
11001080@unknown@formal@none@1@S@The general syntax of such languages is rigid &mdash; documents must adhere to the general rules of XML, ensuring that all XML-aware software can at least read and understand the relative arrangement of information within them.@1@36@@oe@30-11-2008
11001090@unknown@formal@none@1@S@The schema merely supplements the syntax rules with a set of constraints.@1@12@@oe@30-11-2008
11001100@unknown@formal@none@1@S@Schemas typically restrict element and attribute names and their allowable containment hierarchies, such as only allowing an element named 'birthday' to contain one element named 'month' and one element named 'day', each of which has to contain only character data.@1@40@@oe@30-11-2008
11001110@unknown@formal@none@1@S@The constraints in a schema may also include [[data type]] assignments that affect how information is processed; for example, the 'month' element's character data may be defined as being a month according to a particular schema language's conventions, perhaps meaning that it must not only be formatted a certain way, but also must not be processed as if it were some other type of data.@1@65@@oe@30-11-2008
11001120@unknown@formal@none@1@S@An XML document that complies with a particular schema/DTD, in addition to being well-formed, is said to be '''valid'''.@1@19@@oe@30-11-2008
11001130@unknown@formal@none@1@S@An XML schema is a description of a type of XML document, typically expressed in terms of [[constraints]] on the structure and content of documents of that type, above and beyond the basic constraints imposed by XML itself.@1@38@@oe@30-11-2008
11001140@unknown@formal@none@1@S@A number of standard and proprietary XML schema languages have emerged for the purpose of formally expressing such schemas, and some of these languages are XML-based, themselves.@1@27@@oe@30-11-2008
11001150@unknown@formal@none@1@S@Before the advent of generalised data description languages such as SGML and XML, software designers had to define special [[file format]]s or small languages to share data between programs.@1@29@@oe@30-11-2008
11001160@unknown@formal@none@1@S@This required writing detailed [[specifications]] and special-purpose parsers and [[writer]]s.@1@10@@oe@30-11-2008
11001170@unknown@formal@none@1@S@XML's regular structure and strict parsing rules allow software designers to leave parsing to standard tools, and since XML provides a general, [[data model]]-oriented framework for the development of application-specific languages, software designers need only concentrate on the development of rules for their data, at relatively high levels of abstraction.@1@50@@oe@30-11-2008
11001180@unknown@formal@none@1@S@Well-tested tools exist to [[validate]] an XML document "against" a schema: the tool automatically [[verify|verifies]] whether the document conforms to constraints expressed in the schema.@1@25@@oe@30-11-2008
11001190@unknown@formal@none@1@S@Some of these validation tools are included in XML parsers, and some are packaged separately.@1@15@@oe@30-11-2008
11001200@unknown@formal@none@1@S@Other usages of schemas exist: XML editors, for instance, can use schemas to support the editing process (by suggesting valid elements and attributes names, etc).@1@25@@oe@30-11-2008
11001210@unknown@formal@none@1@S@====DTD====@1@1@@oe@30-11-2008
11001220@unknown@formal@none@1@S@The oldest schema format for XML is the [[Document Type Definition]] (DTD), inherited from SGML.@1@15@@oe@30-11-2008
11001230@unknown@formal@none@1@S@While DTD support is ubiquitous due to its inclusion in the XML 1.0 standard, it is seen as limited for the following reasons:@1@23@@oe@30-11-2008
11001240@unknown@formal@none@1@S@* It has no support for newer [[feature]]s of XML, most importantly [[XML Namespace|namespaces]].@1@14@@oe@30-11-2008
11001250@unknown@formal@none@1@S@* It lacks expressiveness.@1@4@@oe@30-11-2008
11001260@unknown@formal@none@1@S@Certain formal aspects of an XML document cannot be captured in a DTD.@1@13@@oe@30-11-2008
11001270@unknown@formal@none@1@S@* It uses a custom non-XML syntax, inherited from [[SGML]], to describe the schema.@1@14@@oe@30-11-2008
11001280@unknown@formal@none@1@S@DTD is still used in many applications because it is considered the easiest to read and write.@1@17@@oe@30-11-2008
11001290@unknown@formal@none@1@S@====XML Schema====@1@2@@oe@30-11-2008
11001300@unknown@formal@none@1@S@A newer [[XML schema]] language, described by the W3C as the successor of DTDs, is [[XML Schema (W3C)|XML Schema]], or more informally referred to by the [[acronym and initialism|initialism]] for XML Schema instances, XSD (XML Schema Definition).@1@37@@oe@30-11-2008
11001310@unknown@formal@none@1@S@XSDs are far more powerful than DTDs in describing XML languages.@1@11@@oe@30-11-2008
11001320@unknown@formal@none@1@S@They use a rich [[datatype|datatyping]] system, allow for more detailed constraints on an XML document's logical structure, and must be processed in a more robust validation framework.@1@27@@oe@30-11-2008
11001330@unknown@formal@none@1@S@XSDs also use an XML-based format, which makes it possible to use ordinary XML tools to help process them, although XSD implementations require much more than just the ability to read XML.@1@32@@oe@30-11-2008
11001340@unknown@formal@none@1@S@Criticisms of XSD include the following:@1@6@@oe@30-11-2008
11001350@unknown@formal@none@1@S@*The specification is very large, which makes it difficult to understand and implement.@1@13@@oe@30-11-2008
11001360@unknown@formal@none@1@S@*The XML-based syntax leads to verbosity in schema descriptions, which makes XSDs harder to read and write.@1@17@@oe@30-11-2008
11001370@unknown@formal@none@1@S@*Schema validation can be an expensive addition to XML parsing, especially for high volume systems.@1@15@@oe@30-11-2008
11001380@unknown@formal@none@1@S@*The modeling capabilities are very limited, with no ability to allow attributes to influence [[content model]]s.@1@16@@oe@30-11-2008
11001390@unknown@formal@none@1@S@*The [[type derivation model]] is very limited, in particular that derivation by extension is rarely useful.@1@16@@oe@30-11-2008
11001400@unknown@formal@none@1@S@*Database-related [[data transfer]] is supported with ideas such as [[nillability]], but the requirements of industrial publishing are under-supported.@1@18@@oe@30-11-2008
11001410@unknown@formal@none@1@S@*The key/[[keyref]]/[[uniqueness]] mechanisms are not type-aware.@1@6@@oe@30-11-2008
11001420@unknown@formal@none@1@S@*The [[PSVI]] concept (Post Schema Validation Infoset) does not have a standard XML representation or [[Application Programming Interface]], thus it works against [[vendor independence]] unless revalidation is performed.@1@28@@oe@30-11-2008
11001430@unknown@formal@none@1@S@====RELAX NG====@1@2@@oe@30-11-2008
11001440@unknown@formal@none@1@S@Another popular schema language for XML is [[RELAX NG]].@1@9@@oe@30-11-2008
11001450@unknown@formal@none@1@S@Initially specified by [[OASIS (organization)|OASIS]], RELAX NG is now also an ISO international standard (as part of [[DSDL]]).@1@18@@oe@30-11-2008
11001460@unknown@formal@none@1@S@It has two formats: an XML based syntax and a non-XML compact syntax.@1@13@@oe@30-11-2008
11001470@unknown@formal@none@1@S@The compact syntax aims to increase readability and writability but, since there is a well-defined way to translate the compact syntax to the XML syntax and back again by means of [[James Clark (XML expert)|James Clark]]'s [http://www.thaiopensource.com/relaxng/trang.html Trang conversion tool], the advantage of using standard XML tools is not lost.@1@50@@oe@30-11-2008
11001480@unknown@formal@none@1@S@RELAX NG has a simpler definition and validation framework than XML Schema, making it easier to use and implement.@1@19@@oe@30-11-2008
11001490@unknown@formal@none@1@S@It also has the ability to use [[datatype]] framework [[plug-in]]s; a RELAX NG schema author, for example, can require values in an XML document to conform to definitions in XML Schema Datatypes.@1@32@@oe@30-11-2008
11001500@unknown@formal@none@1@S@====ISO DSDL and other schema languages====@1@6@@oe@30-11-2008
11001510@unknown@formal@none@1@S@The ISO [[DSDL]] (Document Schema Description Languages) standard brings together a comprehensive set of small schema languages, each targeted at specific problems.@1@22@@oe@30-11-2008
11001520@unknown@formal@none@1@S@DSDL includes [[RELAX NG]] full and compact syntax, [[Schematron]] assertion language, and languages for defining datatypes, character repertoire constraints, renaming and entity expansion, and namespace-based [[routing]] of document fragments to different validators.@1@32@@oe@30-11-2008
11001530@unknown@formal@none@1@S@DSDL schema languages do not have the vendor support of XML Schemas yet, and are to some extent a grassroots reaction of industrial publishers to the lack of utility of XML Schemas for [[publishing]].@1@34@@oe@30-11-2008
11001540@unknown@formal@none@1@S@Some schema languages not only describe the structure of a particular XML format but also offer limited facilities to influence processing of individual XML files that conform to this format.@1@30@@oe@30-11-2008
11001550@unknown@formal@none@1@S@DTDs and XSDs both have this ability; they can for instance provide attribute defaults.@1@14@@oe@30-11-2008
11001560@unknown@formal@none@1@S@RELAX NG and Schematron intentionally do not provide these; for example the [[infoset]] augmentation facility.@1@15@@oe@30-11-2008
11001570@unknown@formal@none@1@S@=== International use ===@1@4@@oe@30-11-2008
11001580@unknown@formal@none@1@S@XML supports the direct use of almost any Unicode character in element names, attributes, comments, character data, and processing instructions (other than the ones that have special symbolic meaning in XML itself, such as the open corner bracket, "<").@1@39@@oe@30-11-2008
11001590@unknown@formal@none@1@S@Therefore, the following is a well-formed XML document, even though it includes both [[Chinese character|Chinese]] and [[Cyrillic alphabet|Cyrillic]] characters: <source lang="xml"> <?xml version="1.0" encoding="UTF-8"?> <俄語>Данные</俄語> </source>@1@26@@oe@30-11-2008
11001600@unknown@formal@none@1@S@== Displaying XML on the web ==@1@7@@oe@30-11-2008
11001610@unknown@formal@none@1@S@XML documents do not carry information about how to display the data.@1@12@@oe@30-11-2008
11001620@unknown@formal@none@1@S@Without using [[Cascading Style Sheets|CSS]] or [[Extensible Stylesheet Language|XSL]], a generic XML document is rendered as raw XML text by most [[web browser]]s.@1@23@@oe@30-11-2008
11001630@unknown@formal@none@1@S@Some display it with 'handles' (e.g. + and - signs in the margin) that allow parts of the structure to be expanded or collapsed with mouse-clicks.@1@26@@oe@30-11-2008
11001640@unknown@formal@none@1@S@In order to style the rendering in a browser with CSS, the XML document must include a reference to the [[stylesheet]]: <source lang="xml"> <?xml-stylesheet type="text/css" href="myStyleSheet.css"?> </source>@1@27@@oe@30-11-2008
11001650@unknown@formal@none@1@S@Note that this is different from specifying such a stylesheet in HTML, which uses the <code>&lt;link></code> element.@1@17@@oe@30-11-2008
11001660@unknown@formal@none@1@S@[[Extensible Stylesheet Language]] (XSL) can be used to alter the format of XML data, either into HTML or other formats that are suitable for a browser to display.@1@28@@oe@30-11-2008
11001670@unknown@formal@none@1@S@To specify [[client-side]] [[XSL Transformations|XSL Transformation]] (XSLT), the following processing instruction is required in the XML: <source lang="xml"> <?xml-stylesheet type="text/xsl" href="myTransform.xslt"?> </source>@1@22@@oe@30-11-2008
11001680@unknown@formal@none@1@S@Client-side XSLT is supported by many [[web browser]]s.@1@8@@oe@30-11-2008
11001690@unknown@formal@none@1@S@Alternatively, one may use XSL to convert XML into a displayable format ''on the [[Server (computing)|server]]'' rather than being dependent on the [[end-user]]'s browser capabilities.@1@25@@oe@30-11-2008
11001700@unknown@formal@none@1@S@The end-user is not aware of what has gone on 'behind the scenes'; all they see is well-formatted, displayable data.@1@20@@oe@30-11-2008
11001710@unknown@formal@none@1@S@See the XSLT article for [[XSL Transformations#XSLT examples|an example of server-side XSLT in action]].@1@14@@oe@30-11-2008
11001720@unknown@formal@none@1@S@== XML extensions ==@1@4@@oe@30-11-2008
11001730@unknown@formal@none@1@S@* '''[[XPath]]''' makes it possible to refer to individual parts of an XML document.@1@14@@oe@30-11-2008
11001740@unknown@formal@none@1@S@This provides random access to XML data for other technologies, including XSLT, XSL-FO, XQuery etc.@1@15@@oe@30-11-2008
11001750@unknown@formal@none@1@S@XPath expressions can refer to all or part of the text, data and values in XML elements, attributes, processing instructions, comments etc.@1@22@@oe@30-11-2008
11001760@unknown@formal@none@1@S@They can also access the names of elements and attributes.@1@10@@oe@30-11-2008
11001770@unknown@formal@none@1@S@XPaths can be used in both valid and well-formed XML, with and without defined namespaces.@1@15@@oe@30-11-2008
11001780@unknown@formal@none@1@S@*'''[[XInclude]]''' defines the ability for XML files to include all or part of an external file.@1@16@@oe@30-11-2008
11001790@unknown@formal@none@1@S@When processing is complete, the final XML infoset has no XInclude elements, but instead has copied the documents or parts thereof into the final infoset.@1@25@@oe@30-11-2008
11001800@unknown@formal@none@1@S@It uses XPath to refer to a portion of the document for partial inclusions.@1@14@@oe@30-11-2008
11001810@unknown@formal@none@1@S@*'''[[XQuery]]''' is to XML and [[XML database|XML Databases]] what [[SQL]] and [[PL/SQL]] are to [[relational databases]]: ways to access, manipulate and return XML.@1@23@@oe@30-11-2008
11001820@unknown@formal@none@1@S@*'''[[XML Namespace]]s''' enable the same document to contain XML elements and attributes taken from different vocabularies, without any [[naming collision]]s occurring.@1@21@@oe@30-11-2008
11001830@unknown@formal@none@1@S@*'''[[XML Signature]]''' defines the syntax and processing rules for creating [[digital signatures]] on XML content.@1@15@@oe@30-11-2008
11001840@unknown@formal@none@1@S@*'''[[XML Encryption]]''' defines the syntax and processing rules for [[encryption|encrypting]] XML content.@1@12@@oe@30-11-2008
11001850@unknown@formal@none@1@S@* '''[[XPointer]]''' is a system for addressing components of XML-based internet media.@1@12@@oe@30-11-2008
11001860@unknown@formal@none@1@S@XML files may be served with a variety of [[MIME|Media types]].@1@11@@oe@30-11-2008
11001870@unknown@formal@none@1@S@RFC 3023 defines the types "application/xml" and "text/xml", which say only that the data is in XML, and nothing about its semantics.@1@22@@oe@30-11-2008
11001880@unknown@formal@none@1@S@The use of "text/xml" has been criticized as a potential source of encoding problems but is now in the process of being deprecated.@1@23@@oe@30-11-2008
11001890@unknown@formal@none@1@S@RFC 3023 also recommends that XML-based languages be given media types beginning in "application/" and ending in "+xml"; for example "application/atom+xml" for [[Atom (standard)|Atom]].@1@24@@oe@30-11-2008
11001900@unknown@formal@none@1@S@This page discusses further [[XML and MIME]].@1@7@@oe@30-11-2008
11001910@unknown@formal@none@1@S@== Processing XML files ==@1@5@@oe@30-11-2008
11001920@unknown@formal@none@1@S@Three traditional techniques for processing XML files are:@1@8@@oe@30-11-2008
11001930@unknown@formal@none@1@S@* Using a programming language and the [[Simple API for XML|SAX]] [[Application programming interface|API]].@1@14@@oe@30-11-2008
11001940@unknown@formal@none@1@S@* Using a programming language and the [[DOM (XML API)|DOM]] [[Application programming interface|API]].@1@13@@oe@30-11-2008
11001950@unknown@formal@none@1@S@* Using a transformation engine and a filter@1@8@@oe@30-11-2008
11001960@unknown@formal@none@1@S@More recent and emerging techniques for processing XML files are:@1@10@@oe@30-11-2008
11001970@unknown@formal@none@1@S@* Pull Parsing@1@3@@oe@30-11-2008
11001980@unknown@formal@none@1@S@* Non-Extractive Parsing (i.e. in-situ parsing)@1@6@@oe@30-11-2008
11001990@unknown@formal@none@1@S@* Data binding@1@3@@oe@30-11-2008
11002000@unknown@formal@none@1@S@=== Simple API for XML (SAX)===@1@6@@oe@30-11-2008
11002010@unknown@formal@none@1@S@[[Simple API for XML|SAX]] is a [[lexical analysis|lexical]], [[Event-driven programming|event-driven]] interface in which a document is read serially and its contents are reported as "[[callback]]s" to various [[method (computer science)|method]]s on a [[event handler|handler object]] of the user's design.@1@39@@oe@30-11-2008
11002020@unknown@formal@none@1@S@SAX is fast and efficient to implement, but difficult to use for extracting information at random from the XML, since it tends to burden the application author with keeping track of what part of the document is being processed.@1@39@@oe@30-11-2008
11002030@unknown@formal@none@1@S@It is better suited to situations in which certain types of information are always handled the same way, no matter where they occur in the document.@1@26@@oe@30-11-2008
11002040@unknown@formal@none@1@S@=== DOM ===@1@3@@oe@30-11-2008
11002050@unknown@formal@none@1@S@[[Document Object Model|DOM]] is an [[interface]]-oriented [[Application Programming Interface]] that allows for navigation of the entire document as if it were a tree of "[[Node (computer science)|Node]]" [[Object (computer science)|object]]s representing the document's contents.@1@34@@oe@30-11-2008
11002060@unknown@formal@none@1@S@A DOM document can be created by a parser, or can be generated manually by users (with limitations).@1@18@@oe@30-11-2008
11002070@unknown@formal@none@1@S@Data types in DOM Nodes are abstract; implementations provide their own [[programming]] language-specific [[binding]]s.@1@14@@oe@30-11-2008
11002080@unknown@formal@none@1@S@DOM implementations tend to be [[memory]] intensive, as they generally require the entire document to be loaded into memory and constructed as a tree of objects before access is allowed.@1@30@@oe@30-11-2008
11002090@unknown@formal@none@1@S@DOM is supported in Java by several packages that usually come with the standard libraries.@1@15@@oe@30-11-2008
11002100@unknown@formal@none@1@S@As the DOM specification is regulated by the [[World Wide Web Consortium]], the main interfaces (Node, Document, etc.) are in the package org.w3c.dom.*, as well as some of the events and interfaces for other capabilities like serialization (output).@1@38@@oe@30-11-2008
11002110@unknown@formal@none@1@S@The package com.sun.org.apache.xml.internal.serialize.* provides the serialization (output capacities) by implementing the appropriate interfaces, while the javax.xml.parsers.* package parses data to create DOM XML documents for manipulation.@1@26@@oe@30-11-2008
11002120@unknown@formal@none@1@S@=== Non-extractive XML Processing API ===@1@6@@oe@30-11-2008
11002130@unknown@formal@none@1@S@Non-extractive XML Processing API is a new and emerging category of parsers that aim to overcome the fundamental limitations of DOM and SAX.@1@23@@oe@30-11-2008
11002140@unknown@formal@none@1@S@The most representative is VTD-XML, which abolishes the object-oriented modeling of XML hierarchy and instead uses 64-bit Virtual Token Descriptors (encoding offsets, lengths, depths, and types) of XML tokens.@1@29@@oe@30-11-2008
11002150@unknown@formal@none@1@S@VTD-XML's approach enables a number of interesting features/enhancements, such as high performance, low memory usage [8], ASIC implementation [9], incremental update [10], and native XML indexing [11] [12].@1@28@@oe@30-11-2008
11002160@unknown@formal@none@1@S@=== Transformation engines and filters ===@1@6@@oe@30-11-2008
11002170@unknown@formal@none@1@S@A [[filter (software)|filter]] in the [[Extensible Stylesheet Language]] (XSL) family can transform an XML file for [[display]]ing or [[Computer printer|print]]ing.@1@20@@oe@30-11-2008
11002180@unknown@formal@none@1@S@* '''[[XSL-FO]]''' is a declarative, XML-based [[page layout]] language.@1@9@@oe@30-11-2008
11002190@unknown@formal@none@1@S@An XSL-FO processor can be used to convert an XSL-FO document into another non-XML format, such as [[PDF]].@1@18@@oe@30-11-2008
11002200@unknown@formal@none@1@S@* '''[[XSLT]]''' is a declarative, XML-based document transformation language.@1@9@@oe@30-11-2008
11002210@unknown@formal@none@1@S@An XSLT processor can use an XSLT ''stylesheet'' as a guide for the conversion of the data tree represented by one XML document into another tree that can then be [[serialize]]d as XML, HTML, plain text, or any other format supported by the processor.@1@44@@oe@30-11-2008
11002220@unknown@formal@none@1@S@* '''[[XQuery]]''' is a W3C language for [[query]]ing, constructing and transforming XML data.@1@13@@oe@30-11-2008
11002230@unknown@formal@none@1@S@* '''[[XPath]]''' is a DOM-like node tree [[data model]] and [[path expression]] language for selecting data within XML documents.@1@19@@oe@30-11-2008
11002240@unknown@formal@none@1@S@XSL-FO, XSLT and XQuery all make use of XPath.@1@9@@oe@30-11-2008
11002250@unknown@formal@none@1@S@XPath also includes a useful [[function library]].@1@7@@oe@30-11-2008
11002260@unknown@formal@none@1@S@=== Pull parsing ===@1@4@@oe@30-11-2008
11002270@unknown@formal@none@1@S@Pull parsing treats the document as a series of items which are read in sequence using the Iterator design pattern.@1@20@@oe@30-11-2008
11002280@unknown@formal@none@1@S@This allows for writing of [[recursive descent parser|recursive-descent parsers]] in which the structure of the code performing the parsing mirrors the structure of the XML being parsed, and intermediate parsed results can be used and accessed as local variables within the methods performing the parsing, or passed down (as method parameters) into lower-level methods, or returned (as method return values) to higher-level methods.@1@63@@oe@30-11-2008
11002290@unknown@formal@none@1@S@Examples of pull parsers include [[StAX]] in the [[Java (programming language)|Java]] programming language, SimpleXML in PHP and System.Xml.XmlReader in .NET.@1@20@@oe@30-11-2008
11002300@unknown@formal@none@1@S@A pull parser creates an iterator that sequentially visits the various elements, attributes, and data in an XML document.@1@19@@oe@30-11-2008
11002310@unknown@formal@none@1@S@Code which uses this 'iterator' can test the current item (to tell, for example, whether it is a start or end element, or text), and inspect its attributes (local name, namespace, values of XML attributes, value of text, etc.), and can also move the iterator to the 'next' item.@1@49@@oe@30-11-2008
11002320@unknown@formal@none@1@S@The code can thus extract information from the document as it traverses it.@1@13@@oe@30-11-2008
11002330@unknown@formal@none@1@S@The recursive-descent approach tends to lend itself to keeping data as typed local variables in the code doing the parsing, while SAX, for instance, typically requires a parser to manually maintain intermediate data within a stack of elements which are parent elements of the element being parsed.@1@47@@oe@30-11-2008
11002340@unknown@formal@none@1@S@Pull-parsing code can be more straightforward to understand and maintain than SAX parsing code.@1@14@@oe@30-11-2008
11002350@unknown@formal@none@1@S@=== Non-extractive XML Processing API ===@1@6@@oe@30-11-2008
11002360@unknown@formal@none@1@S@Non-extractive XML Processing API is a new and emerging category of parsers that aim to overcome the fundamental limitations of DOM and SAX.@1@23@@oe@30-11-2008
11002370@unknown@formal@none@1@S@The most representative is [[VTD-XML]], which abolishes the object-oriented modeling of XML hierarchy and instead uses 64-bit Virtual Token Descriptors (encoding offsets, lengths, depths, and types) of XML tokens.@1@29@@oe@30-11-2008
11002380@unknown@formal@none@1@S@VTD-XML's approach enables a number of interesting features/enhancements, such as high performance, low memory usage , ASIC implementation , incremental update , and native XML indexing .@1@27@@oe@30-11-2008
11002390@unknown@formal@none@1@S@=== Data binding ===@1@4@@oe@30-11-2008
11002400@unknown@formal@none@1@S@Another form of XML Processing API is [[XML data binding|data binding]], where XML data is made available as a custom, strongly typed programming language data structure, in contrast to the interface-oriented DOM.@1@32@@oe@30-11-2008
11002410@unknown@formal@none@1@S@Example data binding systems include the [[Java (programming language)|Java]] [[Architecture]] for XML Binding ([[JAXB]]).@1@14@@oe@30-11-2008
11002420@unknown@formal@none@1@S@=== Specific XML applications and editors ===@1@7@@oe@30-11-2008
11002430@unknown@formal@none@1@S@The [[Native and foreign format|native file format]] of [[OpenOffice.org]], [[AbiWord]], and [[Apple Computer|Apple]]'s [[iWork]] applications is XML.@1@17@@oe@30-11-2008
11002440@unknown@formal@none@1@S@Some parts of [[Microsoft Office]] 2007 are also able to edit XML files with a user-supplied schema (but not a DTD), and Microsoft has released a file format compatibility kit for Office 2003 that allows previous versions of Office to save in the new XML based format.@1@47@@oe@30-11-2008
11002450@unknown@formal@none@1@S@There are dozens of other [[XML editor]]s available.@1@8@@oe@30-11-2008
11002460@unknown@formal@none@1@S@==History==@1@1@@oe@30-11-2008
11002470@unknown@formal@none@1@S@The versatility of [[SGML]] for dynamic information display was understood by early digital media publishers in the late 1980s prior to the rise of the Internet.@1@26@@oe@30-11-2008
11002480@unknown@formal@none@1@S@By the mid-1990s some practitioners of SGML had gained experience with the then-new [[World Wide Web]], and believed that SGML offered solutions to some of the problems the Web was likely to face as it grew.@1@36@@oe@30-11-2008
11002490@unknown@formal@none@1@S@[[Dan Connolly]] added SGML to the list of W3C's activities when he joined the staff in 1995; work began in mid-1996 when [[Jon Bosak]] developed a charter and recruited collaborators.@1@30@@oe@30-11-2008
11002500@unknown@formal@none@1@S@Bosak was well connected in the small community of people who had experience both in SGML and the Web.@1@19@@oe@30-11-2008
11002510@unknown@formal@none@1@S@He received support in his efforts from [[Microsoft]].@1@8@@oe@30-11-2008
11002520@unknown@formal@none@1@S@XML was compiled by a [[working group]] of eleven members, supported by an (approximately) 150-member Interest Group.@1@17@@oe@30-11-2008
11002530@unknown@formal@none@1@S@Technical debate took place on the Interest Group mailing list and issues were resolved by consensus or, when that failed, majority vote of the Working Group.@1@26@@oe@30-11-2008
11002540@unknown@formal@none@1@S@A record of design decisions and their rationales was compiled by [[Michael Sperberg-McQueen]] on December 4th 1997.@1@17@@oe@30-11-2008
11002550@unknown@formal@none@1@S@[[James Clark (XML expert)|James Clark]] served as Technical Lead of the Working Group, notably contributing the empty-element "<empty/>" syntax and the name "XML".@1@23@@oe@30-11-2008
11002560@unknown@formal@none@1@S@Other names that had been put forward for consideration included "MAGMA" (Minimal Architecture for Generalized Markup Applications), "SLIM" (Structured Language for Internet Markup) and "MGML" (Minimal Generalized Markup Language).@1@29@@oe@30-11-2008
11002570@unknown@formal@none@1@S@The co-editors of the specification were originally [[Tim Bray]] and [[Michael Sperberg-McQueen]].@1@12@@oe@30-11-2008
11002580@unknown@formal@none@1@S@Halfway through the project Bray accepted a consulting engagement with [[Netscape Communications Corporation|Netscape]], provoking vociferous protests from Microsoft.@1@18@@oe@30-11-2008
11002590@unknown@formal@none@1@S@Bray was temporarily asked to resign the editorship.@1@8@@oe@30-11-2008
11002600@unknown@formal@none@1@S@This led to intense dispute in the Working Group, eventually solved by the appointment of Microsoft's [[Jean Paoli]] as a third co-editor.@1@22@@oe@30-11-2008
11002610@unknown@formal@none@1@S@The XML Working Group never met face-to-face; the design was accomplished using a combination of email and weekly teleconferences.@1@19@@oe@30-11-2008
11002620@unknown@formal@none@1@S@The major design decisions were reached in twenty weeks of intense work between July and November of 1996, when the first Working Draft of an XML specification was published.@1@29@@oe@30-11-2008
11002630@unknown@formal@none@1@S@Further design work continued through [[1997]], and XML 1.0 became a [[W3C]] Recommendation on [[February 10]], [[1998]].@1@17@@oe@30-11-2008
11002640@unknown@formal@none@1@S@XML 1.0 achieved the Working Group's goals of Internet usability, general-purpose usability, SGML compatibility, facilitation of easy development of processing software, minimization of optional features, legibility, formality, conciseness, and ease of authoring.@1@32@@oe@30-11-2008
11002650@unknown@formal@none@1@S@Like its antecedent SGML, XML allows for some redundant syntactic constructs and includes repetition of element identifiers.@1@17@@oe@30-11-2008
11002660@unknown@formal@none@1@S@In these respects, terseness was not considered essential in its structure.@1@11@@oe@30-11-2008
11002670@unknown@formal@none@1@S@===Sources===@1@1@@oe@30-11-2008
11002680@unknown@formal@none@1@S@XML is a profile of an ISO standard [[SGML]], and most of XML comes from SGML unchanged.@1@17@@oe@30-11-2008
11002690@unknown@formal@none@1@S@From SGML comes the separation of logical and physical structures (elements and entities), the availability of grammar-based validation (DTDs), the separation of data and metadata (elements and attributes), mixed content, the separation of processing from representation (processing instructions), and the default angle-bracket syntax.@1@43@@oe@30-11-2008
11002700@unknown@formal@none@1@S@Removed were the SGML Declaration (XML has a fixed delimiter set and adopts [[Unicode]] as the document [[Character encoding|character set]]).@1@20@@oe@30-11-2008
11002710@unknown@formal@none@1@S@Other sources of technology for XML were the [[Text Encoding Initiative]] (TEI), which defined a profile of SGML for use as a 'transfer syntax'; [[HTML]], in which elements were synchronous with their resource, the separation of document character set from resource encoding, the xml:lang attribute, and the [[HTTP]] notion that metadata accompanied the resource rather than being needed at the declaration of a link; and the Extended Reference Concrete Syntax (ERCS), from which XML 1.0's naming rules were taken, and which had introduced hexadecimal numeric character references and the concept of references to make available all Unicode characters.@1@98@@oe@30-11-2008
11002720@unknown@formal@none@1@S@Ideas that developed during discussion which were novel in XML, were the algorithm for encoding detection and the encoding header, the processing instruction target, the xml:space attribute, and the new close delimiter for empty-element tags.@1@35@@oe@30-11-2008
11002730@unknown@formal@none@1@S@===Versions===@1@1@@oe@30-11-2008
11002740@unknown@formal@none@1@S@There are two current versions of XML.@1@7@@oe@30-11-2008
11002750@unknown@formal@none@1@S@The first, ''XML 1.0'', was initially defined in [[1998]].@1@9@@oe@30-11-2008
11002760@unknown@formal@none@1@S@It has undergone minor revisions since then, without being given a new version number, and is currently in its fourth edition, as published on [[August 16]], [[2006]].@1@27@@oe@30-11-2008
11002770@unknown@formal@none@1@S@It is widely implemented and still recommended for general use.@1@10@@oe@30-11-2008
11002780@unknown@formal@none@1@S@The second, ''XML 1.1'', was initially published on [[February 4]], [[2004]], the same day as XML 1.0 Third Edition, and is currently in its second edition, as published on [[August 16]], [[2006]].@1@32@@oe@30-11-2008
11002790@unknown@formal@none@1@S@It contains features &mdash; some contentious &mdash; that are intended to make XML easier to use in certain cases - mainly enabling the use of line-ending characters used on [[EBCDIC]] platforms, and the use of scripts and characters absent from Unicode 2.0.@1@42@@oe@30-11-2008
11002800@unknown@formal@none@1@S@XML 1.1 is not very widely implemented and is recommended for use only by those who need its unique features.@1@20@@oe@30-11-2008
11002810@unknown@formal@none@1@S@XML 1.0 and XML 1.1 differ in the requirements of characters used for element and attribute names: XML 1.0 only allows characters which are defined in Unicode 2.0, which includes most world scripts, but excludes those which were added in later Unicode versions.@1@43@@oe@30-11-2008
11002820@unknown@formal@none@1@S@Among the excluded scripts are [[Mongolian language|Mongolian]], [[Cambodian language|Cambodian]], [[Amharic]], [[Burmese language|Burmese]], and others.@1@14@@oe@30-11-2008
11002830@unknown@formal@none@1@S@Almost any Unicode character can be used in the character data and attribute values of an XML 1.1 document, even if the character is not defined, aside from having a code point, in the current version of Unicode.@1@38@@oe@30-11-2008
11002840@unknown@formal@none@1@S@The approach in XML 1.1 is that only certain characters are forbidden, and everything else is allowed, whereas in XML 1.0, only certain characters are explicitly allowed, thus XML 1.0 cannot accommodate the addition of characters in future versions of Unicode.@1@41@@oe@30-11-2008
11002850@unknown@formal@none@1@S@In character data and attribute values, XML 1.1 allows the use of more [[control character]]s than XML 1.0, but, for "robustness", most of the control characters introduced in XML 1.1 must be expressed as numeric character references.@1@37@@oe@30-11-2008
11002860@unknown@formal@none@1@S@Among the supported control characters in XML 1.1 are two line break codes that must be treated as whitespace.@1@19@@oe@30-11-2008
11002870@unknown@formal@none@1@S@Whitespace characters are the only control codes that can be written directly.@1@12@@oe@30-11-2008
11002880@unknown@formal@none@1@S@There are also discussions on an XML 2.0, although it remains to be seen if such will ever come about. [http://www.textuality.com/xml/xmlSW.html XML-SW] (SW for [[skunk works]]), written by one of the original developers of XML, contains some proposals for what an XML 2.0 might look like: elimination of DTDs from syntax, integration of [[namespace (computer science)#XML|namespace]]s, [[XML Base]] and [[XML Information Set]] (''infoset'') into the base standard.@1@67@@oe@30-11-2008
11002890@unknown@formal@none@1@S@The World Wide Web Consortium also has an XML Binary Characterization Working Group doing preliminary research into use cases and properties for a binary encoding of the XML infoset.@1@29@@oe@30-11-2008
11002900@unknown@formal@none@1@S@The working group is not chartered to produce any official standards.@1@11@@oe@30-11-2008
11002910@unknown@formal@none@1@S@Since XML is by definition text-based, ITU-T and ISO are using the name ''[[Fast Infoset]][http://asn1.elibel.tm.fr/xml/finf.htm]'' for their own binary infoset to avoid confusion (see ITU-T Rec. X.891 | ISO/IEC 24824-1).@1@30@@oe@30-11-2008
11002920@unknown@formal@none@1@S@===Patent claims===@1@2@@oe@30-11-2008
11002930@unknown@formal@none@1@S@In October 2005 the small company [[Scientigo]] publicly asserted that two of its patents, and , apply to the use of XML.@1@22@@oe@30-11-2008
11002940@unknown@formal@none@1@S@The patents cover the "modeling, storage and transfer [of data] in a particular ''non-hierarchical'', non-integrated neutral form", according to their applications, which were filed in 1997 and 1999.@1@28@@oe@30-11-2008
11002950@unknown@formal@none@1@S@Scientigo CEO [[Doyal Bryant]] expressed a desire to "monetize" the patents but stated that the company was "not interested in having us against the world."@1@25@@oe@30-11-2008
11002960@unknown@formal@none@1@S@He said that Scientigo was discussing the patents with several large corporations.@1@12@@oe@30-11-2008
11002970@unknown@formal@none@1@S@XML users and independent experts responded to Scientigo's claims with widespread skepticism and criticism.@1@14@@oe@30-11-2008
11002980@unknown@formal@none@1@S@Some derided the company as a [[patent troll]].@1@8@@oe@30-11-2008
11002990@unknown@formal@none@1@S@[[Tim Bray]] described any claims that the patents covered XML as "ridiculous on the face of it".@1@17@@oe@30-11-2008
11003000@unknown@formal@none@1@S@== Critique of XML ==@1@5@@oe@30-11-2008
11003010@unknown@formal@none@1@S@Commentators have offered various critiques of XML, suggesting circumstances where XML provides both advantages and potential disadvantages.@1@17@@oe@30-11-2008
11003020@unknown@formal@none@1@S@===Advantages of XML===@1@3@@oe@30-11-2008
11003030@unknown@formal@none@1@S@* It is text-based.@1@4@@oe@30-11-2008
11003040@unknown@formal@none@1@S@* It supports [[Unicode]], allowing almost any information in any written human language to be communicated.@1@16@@oe@30-11-2008
11003050@unknown@formal@none@1@S@* It can represent common [[computer science]] [[data structure]]s: [[record (computer science)|record]]s, [[List (computing)|list]]s and [[tree data structure|tree]]s.@1@18@@oe@30-11-2008
11003060@unknown@formal@none@1@S@* Its [[self-documenting]] format describes [[structure]] and [[field name]]s as well as specific values.@1@14@@oe@30-11-2008
11003070@unknown@formal@none@1@S@* The strict [[syntax]] and [[parsing]] requirements make the necessary [[parser|parsing algorithms]] extremely simple, efficient, and consistent.@1@17@@oe@30-11-2008
11003080@unknown@formal@none@1@S@* XML is heavily used as a format for [[document storage]] and processing, both online and offline.@1@17@@oe@30-11-2008
11003090@unknown@formal@none@1@S@* It is based on [[international standards]].@1@7@@oe@30-11-2008
11003100@unknown@formal@none@1@S@* It can be updated incrementally.@1@6@@oe@30-11-2008
11003110@unknown@formal@none@1@S@* It allows validation using schema languages such as [[XSD]] and [[Schematron]], which makes effective unit-testing, firewalls, acceptance testing, contractual specification and software construction easier.@1@25@@oe@30-11-2008
11003120@unknown@formal@none@1@S@* The [[hierarchy|hierarchical]] structure is suitable for most (but not all) types of documents.@1@14@@oe@30-11-2008
11003130@unknown@formal@none@1@S@* It is platform-independent, thus relatively immune to changes in technology.@1@11@@oe@30-11-2008
11003140@unknown@formal@none@1@S@* Forward and backward compatibility are relatively easy to maintain despite changes in DTD or Schema.@1@16@@oe@30-11-2008
11003150@unknown@formal@none@1@S@* Its predecessor, [[SGML]], has been in use since [[1986]], so there is extensive experience and software available.@1@18@@oe@30-11-2008
11003160@unknown@formal@none@1@S@===Disadvantages of XML===@1@3@@oe@30-11-2008
11003170@unknown@formal@none@1@S@* XML syntax is redundant or large relative to binary representations of similar data, especially with [[Table (information)|tabular]] data.@1@19@@oe@30-11-2008
11003180@unknown@formal@none@1@S@* The redundancy may affect application efficiency through higher storage, transmission and processing costs.@1@14@@oe@30-11-2008
11003190@unknown@formal@none@1@S@* XML syntax is verbose, especially for human readers, relative to other alternative 'text-based' data transmission formats.@1@17@@oe@30-11-2008
11003200@unknown@formal@none@1@S@* The [[hierarchical model]] for representation is limited in comparison to an [[object oriented]] [[Graph (mathematics)|graph]].@1@16@@oe@30-11-2008
11003210@unknown@formal@none@1@S@* Expressing overlapping (non-hierarchical) node relationships requires extra effort.@1@9@@oe@30-11-2008
11003220@unknown@formal@none@1@S@* XML namespaces are problematic to use and namespace support can be difficult to correctly implement in an XML parser.@1@20@@oe@30-11-2008
11003230@unknown@formal@none@1@S@* XML is commonly depicted as "[[self-documenting]]" but this depiction ignores critical ambiguities.@1@13@@oe@30-11-2008
11003240@unknown@formal@none@1@S@* The distinction between content and attributes in XML seems unnatural to some and makes designing XML data structures harder.@1@20@@oe@30-11-2008
11003250@unknown@formal@none@1@S@== Standardization ==@1@3@@oe@30-11-2008
11003260@unknown@formal@none@1@S@In addition to the [[ISO]] standards mentioned above, other related document include@1@12@@oe@30-11-2008
11003270@unknown@formal@none@1@S@* ISO/IEC 8825-4:2002 ''Information technology -- ASN.1 encoding rules: XML Encoding Rules (XER)''@1@13@@oe@30-11-2008
11003280@unknown@formal@none@1@S@* ISO/IEC 8825-5:2004 ''Information technology -- ASN.1 encoding rules: Mapping W3C XML schema definitions into ASN.1''@1@16@@oe@30-11-2008
11003290@unknown@formal@none@1@S@* ISO/IEC 9075-14:2006 ''Information technology -- Database languages -- SQL -- Part 14: XML-Related Specifications (SQL/XML)''@1@16@@oe@30-11-2008
11003300@unknown@formal@none@1@S@* ISO 10303-28:2007 ''Industrial automation systems and integration -- Product data representation and exchange -- Part 28: Implementation methods: XML representations of EXPRESS schemas and data, using XML schemas''@1@29@@oe@30-11-2008
11003310@unknown@formal@none@1@S@* ISO/IEC 13250-3:2007 ''Information technology -- Topic Maps -- Part 3: XML syntax''@1@13@@oe@30-11-2008
11003320@unknown@formal@none@1@S@* ISO/IEC 13522-5:1997 ''Information technology -- Coding of multimedia and hypermedia information -- Part 5: Support for base-level interactive applications''@1@20@@oe@30-11-2008
11003330@unknown@formal@none@1@S@* ISO/IEC 13522-8:2001 ''Information technology -- Coding of multimedia and hypermedia information -- Part 8: XML notation for ISO/IEC 13522-5''@1@20@@oe@30-11-2008
11003340@unknown@formal@none@1@S@* ISO/IEC 18056:2007 ''Information technology -- Telecommunications and information exchange between systems -- XML Protocol for Computer Supported Telecommunications Applications (CSTA) Phase III''@1@23@@oe@30-11-2008
11003350@unknown@formal@none@1@S@* ISO/IEC 19503:2005 ''Information technology -- XML Metadata Interchange (XMI)''@1@10@@oe@30-11-2008
11003360@unknown@formal@none@1@S@* ISO/IEC 19776-1:2005 ''Information technology -- Computer graphics, image processing and environmental data representation -- Extensible 3D (X3D) encodings -- Part 1: Extensible Markup Language (XML) encoding@1@27@@oe@30-11-2008
11003370@unknown@formal@none@1@S@* ISO/IEC 22537:2006 ''Information technology -- ECMAScript for XML (E4X) specification''@1@11@@oe@30-11-2008
11003380@unknown@formal@none@1@S@* ISO 22643:2003 ''Space data and information transfer systems -- Data entity dictionary specification language (DEDSL) -- XML/DTD Syntax''@1@19@@oe@30-11-2008
11003390@unknown@formal@none@1@S@* ISO/IEC 23001-1:2006 ''Information technology -- MPEG systems technologies -- Part 1: Binary MPEG format for XML''@1@17@@oe@30-11-2008
11003400@unknown@formal@none@1@S@* ISO 24531:2007 ''Intelligent transport systems -- System architecture, taxonomy and terminology -- Using XML in ITS standards, data registries and data dictionaries''@1@23@@oe@30-11-2008
