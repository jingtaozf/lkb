.menu.file                              create and maintain test suite databases; set tsdb(1) directories and options; update display
{.menu.file.menu Reread}                reread current database status (flush profile cache)
{.menu.file.menu Rename}                rename current database (change directory name)
{.menu.file.menu Purge}                 purge all test run data from current database
{.menu.file.menu Delete}                delete current database
{.menu.file.menu Create}                create new database from test suite skeleton
{.menu.file.menu Import}                import ASCII test item file or tsdb(1) database into new database
{.menu.file.menu Close}                 close all [incr tsdb()] client windows
{.menu.file.menu Quit}                  quit from [incr tsdb()] podium (only, why would you?)

#
# `Browse' menu (and embedded cascades)
#
.menu.browse                            query and browse database schema and data from active (selected) database
{.menu.browse.menu Database Schema}     browse database schema (definition of relations, attributes, types et al.)
{.menu.browse.menu Vocabulary}          show lexicographically sorted list of lexical items (and usage frequencies)
{.menu.browse.menu Test Items}          browse (selected) fields from `item' relation
{.menu.browse.menu Phenomena}           browse (selected) fields from `phenomena' relation
{.menu.browse.menu Test Run(s)}         browse (selected) fields from `run' relation
{.menu.browse.menu Parses}              browse (selected) fields from `parse' relation
{.menu.browse.menu Results}             browse (selected) fields from `result' relation       
{.menu.browse.menu Errors}              browse (selected) fields from `error' relation      
{.menu.browse.menu Custom Query}        compose and submit custom TSQL query to current test suite database
#
# `Process' menu (and embedded cascades)
#
.menu.process                           load test suite vocabulary; start and control batch processing (a test run)
{.menu.process.menu All Items}          process all test items from current database
{.menu.process.menu Positive Items}     process grammatical test items from current database
{.menu.process.menu Negative Items}     process ungrammatical test items from current database
{.menu.process.menu TSQL Condition}     process test items from current database that satisfy the TSQL condition
{.menu.process.menu Vocabulary}         process test suite vocabulary; report lexical coverage

#
# `Analyze' menu (and embedded cascades)
#
.menu.analyze                           summarize or graph competence and performance profiles for current database

#
# `Compare' menu (and embedded cascades)
#

.menu.compare                           compare competence or performance profiles across test runs (i.e. databases)
{.menu.compare.menu Source Database}    select (g)old standard database to compare to
{.menu.compare.menu Detail}             compute and display detail comparison
{.menu.compare.menu Decoration}         select attributes (with common values in both databases) to decorate display
{.menu.compare.menu Intersection}       select attrbutes for intersection: display pairs of test items with at least one mismatch

#
# `Evolution' menu (and embedded cascades)
#
.menu.evolution                         tabulate or graph multiple competence and performance profiles over extended period

# 
# `Options' menu (and embedded cascades)
#
.menu.options                           set [incr tsdb()] directories and options; restrict data set (TSQL condition); change aggregation parameters
{.menu.options.menu Database Root}      (view or) change base directory for [incr tsdb()] database directory tree
{.menu.options.menu Skeleton Root}      (view or) change directory containing [incr tsdb()] database skeletons
{.menu.options.menu Update}             update [incr tsdb()] podium status
{.menu.options.menu TSQL Condition}     select TSQL condition to restrict browsing, analysis, and comparison to subset from current data
{.menu.options.menu Phenomena}          select phenomena to restrict browsing, analysis, and comparison to subset from current data
{.menu.options.menu New Condition}      input and activate new TSQL condition (see above)
{.menu.options.menu Aggregate By}       select dimension (attribute) used in aggregation (class organization) in analysis and comparsion
{.menu.options.menu Aggregation Parameters}  (view or) change aggregation parameters: aggregate width, minimum size, lower and upper bounds
{.menu.options.menu Switches}           (view or) change various processing, memory management, and display switches

#
# `Help' menu (and embedded cascades)
#
.menu.help                              if only someone provided some help |:-{

#
# aggregation parameter pane
#
.status.aggregate.lsize         size (width) of individual aggregates in scale units
.status.aggregate.esize         use <Up> or <Shift-Up> to increment, <Down> or <Shift-Down> to decrement value
.status.aggregate.lthreshold    minimal number of items per aggregate
.status.aggregate.ethreshold    use <Up> or <Shift-Up> to increment, <Down> or <Shift-Down> to decrement value
.status.aggregate.llower        lower bound for aggregation (minimal value)
.status.aggregate.elower        use <Up> or <Shift-Up> to increment, <Down> or <Shift-Down> to decrement value
.status.aggregate.lupper        upper bound for aggregation (maximal value)
.status.aggregate.eupper        use <Up> or <Shift-Up> to increment, <Down> or <Shift-Down> to decrement value
.status.aggregate.fill0         <Return> completes parameter input; <Control-G> aborts
.status.aggregate.fill1         <Return> completes parameter input; <Control-G> aborts
.status.aggregate.fill2         <Return> completes parameter input; <Control-G> aborts
.status.aggregate.fill3         <Return> completes parameter input; <Control-G> aborts
.status.aggregate.fill4         <Return> completes parameter input; <Control-G> aborts


