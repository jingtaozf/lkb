#!/bin/bash

unset DISPLAY;
unset LUI;

if [ -z "${LOGONROOT}" ]; then
  echo "parse: unable to determine \$LOGONROOT directory; exit.";
  exit 1;
fi

#
# include a shared set of shell functions and global parameters, including the
# architecture identifier .LOGONOS.
#
. ${LOGONROOT}/etc/library.bash;

TSDBHOME=${LOGONROOT}/lingo/lkb/src/tsdb/home
TARGET=${LOGONROOT}/tmp
TSDB=${LOGONROOT}/bin/tsdb

[ -d ${TARGET} ] || mkdir $TARGET;
[ -d ${TSDBHOME}/log ] || mkdir ${TSDBHOME}/log;

source="--source";
thinning="nil";
increment=1000;
formats="(";
grammar=${LOGONROOT}/lingo/erg/lkb/script;

while [ $# -gt 0 -a "${1#-}" != "$1" ]; do
  case ${1} in
    --binary)
      source="";
      shift 1;
    ;;
    --source)
      source="--source";
      shift 1;
    ;;
    --cat)
      cat="--cat";
      shift 1;
    ;;
    --terg)
      grammar=${LOGONROOT}/lingo/terg/lkb/script;
      shift 1;
    ;;
    --gg)
      grammar=${LOGONROOT}/dfki/gg/lkb/script;
      shift 1;
    ;;
    --jacy)
      grammar=${LOGONROOT}/dfki/jacy/lkb/script;
      shift 1;
    ;;
    --srg)
      grammar=${LOGONROOT}/upf/srg/lkb/script;
      shift 1;
    ;;
    --cheetah)
      grammar=${LOGONROOT}/coli/cheetah/lkb/script;
      shift 1;
    ;;
    --thinning)
      thinning="t";
      shift 1;
    ;;
    --condition)
      extra=${2};
      shift 2;
    ;;
    --format)
      formats="${formats} :${2}";
      shift 2;
    ;;
    --active)
      case ${2} in
        nil|null|all) unset active; ;;
        resolved) active="t-active == 1"; ;;
        reduced) active="t-active >= 1"; ;;
      esac
      shift 2;
    ;;
  esac
done

if [ "${formats}" = "(" ]; then
  formats="(:derivation :mrs :dependencies)";
else
  formats="${formats})";
fi

log="$(echo ${1} | sed "s@/@.@g")"

unset DISPLAY

{

  DB=${TSDBHOME}/${1}
  low=$(${TSDB} -home ${DB} -query 'select i-id from item' \
        | sort -n | head -1)
  all=$(${TSDB} -home ${DB} -query 'select i-id from item' \
        | sort -n | tail -1);

  while [ ${low} -le ${all} ]; do
    high=$[${low} + ${increment}];
    echo
    echo "exporting \`${1}' [$low -- $high]";
    echo
    condition="i-id >= ${low} && i-id < ${high} && readings >= 1";
    if [ ! -z "${active}" ]; then
      condition="(${condition}) && (${active})";
    fi
    if [ ! -z "${extra}" ]; then
      condition="(${condition}) && (${extra})";
    fi
    low=${high};

    ( 
      #
      # when running from source, configure and compile the LOGON system
      #
      if [ -n "${source}" ]; then
        echo "(pushnew :logon *features*)";
        echo "(pushnew :lkb *features*)";
        echo "(load \"${LOGONROOT}/lingo/lkb/src/general/loadup.lisp\")";
        echo "(setf (system:getenv \"DISPLAY\") nil)";
        echo "(compile-system \"tsdb\")";
      fi

      echo "(setf (sys:gsgc-switch :print) t)"; \
      echo "(setf (sys:gsgc-switch :stats) t)"; \
      echo "(setf (sys:gsgc-switch :verbose) t)"; \
      echo "(setf (sys:gsgc-parameter :auto-step) nil)"; \
 
      echo "(setf mrs::*eds-include-quantifiers-p* t)"; \
      echo "(setf mrs::*eds-include-vacuous-relations-p* nil)"; \
      echo "(setf tsdb::*redwoods-export-values* '${formats})"; \
      echo "(setf tsdb::*redwoods-thinning-export-p* ${thinning})"; \
      echo "(lkb:read-script-file-aux \"${grammar}\")"; \

      echo "(excl:gc :tenure) (excl:gc t) (excl:gc)"; \

      echo "(tsdb::export-trees \"${1}\" :path \"${TARGET}\""; \
      echo "  :condition \"${condition}\")"; \
      echo "(excl:exit)"; \
    ) | ${LOGONROOT}/bin/logon ${source} ${cat} -I base -locale no_NO.UTF-8 -qq
  done
} 2>&1 | tee ${TSDBHOME}/log/${log}.export.log
